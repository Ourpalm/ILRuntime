<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.Workspaces</name>
    </assembly>
    <members>
        <member name="F:Microsoft.CodeAnalysis.CaseCorrection.CaseCorrector.Annotation">
            <summary>
            The annotation normally used on nodes to request case correction.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.CaseCorrector.CaseCorrectAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Case corrects all names found in the provided document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.CaseCorrector.CaseCorrectAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,System.Threading.CancellationToken)">
            <summary>
            Case corrects all names found in the spans of any nodes annotated with the provided
            annotation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.CaseCorrector.CaseCorrectAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Case corrects all names found in the span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.CaseCorrector.CaseCorrectAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Case corrects all names found in the provided spans.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.CaseCorrector.CaseCorrect(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Case correct only things that don't require semantic information
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.ICaseCorrectionService.CaseCorrectAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Case corrects all names found in the spans in the provided document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CaseCorrection.ICaseCorrectionService.CaseCorrect(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Case corrects only things that don't require semantic information
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddRange(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Collections.Generic.List{Microsoft.CodeAnalysis.Classification.ClassifiedSpan})">
            <summary>
            Helper to add all the values of <paramref name="temp"/> into <paramref name="result"/>
            without causing any allocations or boxing of enumerators.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.AdditiveTypeNames">
            <summary>
            Additive classifications types supply additional context to other classifications.
            </summary>
            <remarks>
            NOTE: Any updates to this class should also be reflected in LSP - see
            Features/LanguageServer/Protocol/Handler/SemanticTokens/SemanticTokensHelpers.cs
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.Classifier.GetClassifiedSpans(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Returns classified spans in ascending <see cref="T:Microsoft.CodeAnalysis.Classification.ClassifiedSpan"/> order.
            <see cref="T:Microsoft.CodeAnalysis.Classification.ClassifiedSpan"/>s may have the same <see cref="P:Microsoft.CodeAnalysis.Classification.ClassifiedSpan.TextSpan"/>. This occurs when there are multiple
            <see cref="P:Microsoft.CodeAnalysis.Classification.ClassifiedSpan.ClassificationType"/>s for the same region of code. For example, a reference to a static method
            will have two spans, one that designates it as a method, and one that designates it as static.
            <see cref="T:Microsoft.CodeAnalysis.Classification.ClassifiedSpan"/>s may also have overlapping <see cref="P:Microsoft.CodeAnalysis.Classification.ClassifiedSpan.TextSpan"/>s. This occurs when there are
            strings containing regex and/or escape characters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ClassifierHelper.GetClassifiedSpansAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken,System.Boolean,System.Boolean)">
            <summary>
            Classifies the provided <paramref name="span"/> in the given <paramref name="document"/>.
            This will do this using an appropriate <see cref="T:Microsoft.CodeAnalysis.Classification.IClassificationService"/>
            if that can be found.  <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault"/> will be returned if this
            fails.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddLexicalClassifications(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            Produce the classifications for the span of text specified.  Classification should be
            performed as quickly as possible, and should process the text in a lexical fashion.
            This allows classification results to be shown to the user when a file is opened before
            any additional compiler information is available for the text.
            
            Important: The classification should not consider the context the text exists in, and how
            that may affect the final classifications.  This may result in incorrect classification
            (i.e. identifiers being classified as keywords).  These incorrect results will be patched
            up when the lexical results are superseded by the calls to AddSyntacticClassifications.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSyntacticClassifications(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSyntacticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)"/>
            <remarks>This method is optional and only should be implemented by languages that support
            syntax.  If the language does not support syntax, callers should use
            <see cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSyntacticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)"/> instead.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSyntacticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            Produce the classifications for the span of text specified.  The syntax of the document 
            can be accessed to provide more correct classifications.  For example, the syntax can
            be used to determine if a piece of text that looks like a keyword should actually be
            considered an identifier in its current context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Classification.ClassificationOptions,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            Produce the classifications for the span of text specified.  Semantics of the language
            can be used to provide richer information for constructs where syntax is insufficient.
            For example, semantic information can be used to determine if an identifier should be
            classified as a type, structure, or something else entirely. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AdjustStaleClassification(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Classification.ClassifiedSpan)">
            <summary>
            Adjust a classification from a previous version of text accordingly based on the current
            text.  For example, if a piece of text was classified as an identifier in a previous version,
            but a character was added that would make it into a keyword, then indicate that here.
            
            This allows the classified to quickly fix up old classifications as the user types.  These
            adjustments are allowed to be incorrect as they will be superseded by calls to get the
            syntactic and semantic classifications for this version later.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.ComputeSyntacticChangeRangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Determines the range of the documents that should be considered syntactically changed after an edit.  In
            language systems that can reuse major parts of a document after an edit, and which would not need to
            recompute classifications for those reused parts, this can speed up processing on a host by not requiring
            the host to reclassify all the source in view, but only the source that could have changed.
            <para>
            If determining this is not possible, or potentially expensive, <see langword="null"/> can be returned to
            indicate that the entire document should be considered changed and should be syntactically reclassified.
            </para>
            <para>
            Implementations should attempt to abide by the provided timeout as much as they can, returning the best
            information available at that point.  As this can be called in performance critical scenarios, it is better
            to return quickly with potentially larger change span (including that of the full document) rather than
            spend too much time computing a very precise result.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IClassificationService.ComputeSyntacticChangeRange(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.ComputeSyntacticChangeRangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.TimeSpan,System.Threading.CancellationToken)"/>
            <remarks>This method is optional and only should be implemented by languages that support
            syntax.  If the language does not support syntax, callers should use
            <see cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.ComputeSyntacticChangeRangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.TimeSpan,System.Threading.CancellationToken)"/> instead.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.IRemoteSemanticClassificationService.GetCachedSemanticClassificationsAsync(Microsoft.CodeAnalysis.Storage.DocumentKey,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Checksum,Microsoft.CodeAnalysis.Storage.StorageDatabase,System.Threading.CancellationToken)">
            <summary>
            Tries to get cached semantic classifications for the specified document and the specified <paramref
            name="textSpan"/>.  Will return an empty array not able to.
            </summary>
            <param name="checksum">Pass in <see cref="P:Microsoft.CodeAnalysis.Serialization.DocumentStateChecksums.Text"/>.  This will ensure that the cached
            classifications are only returned if they match the content the file currently has.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.SerializableClassifiedSpans">
            <summary>
            For space efficiency, we encode classified spans as triples of ints in one large array.  The
            first int is the index of classification type in <see cref="F:Microsoft.CodeAnalysis.Classification.SerializableClassifiedSpans.ClassificationTypes"/>, and the
            second and third ints encode the span.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier.SyntaxNodeTypes">
            <summary>
            The syntax node types this classifier is able to classify
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier.SyntaxTokenKinds">
            <summary>
            The syntax token kinds this classifier is able to classify
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier.AddClassifications(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Classification.ClassificationOptions,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            This method will be called for all nodes that match the types specified by the <see cref="P:Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier.SyntaxNodeTypes"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier.AddClassifications(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Classification.ClassificationOptions,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            This method will be called for all tokens that match the kinds specified by the <see cref="P:Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier.SyntaxTokenKinds"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.AddLexicalClassifications(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddLexicalClassifications(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.AddSyntacticClassifications(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSyntacticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Classification.ClassificationOptions,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier}},System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier}},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Classification.ClassificationOptions,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.AddSemanticClassifications(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier}},System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier}},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},Microsoft.CodeAnalysis.Classification.ClassificationOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Classification.ClassificationOptions,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier}},System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier}},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.FixClassification(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Classification.ClassifiedSpan)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.AdjustStaleClassification(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Classification.ClassifiedSpan)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.ISyntaxClassificationService.ComputeSyntacticChangeRange(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Classification.IClassificationService.ComputeSyntacticChangeRangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.TimeSpan,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.SyntacticChangeRangeComputer">
            <summary>
            Computes a syntactic text change range that determines the range of a document that was changed by an edit. The
            portions outside this change range are guaranteed to be syntactically identical (see <see
            cref="M:Microsoft.CodeAnalysis.SyntaxNode.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxNode)"/>).  This algorithm is intended to be <em>fast</em>.  It is
            technically linear in the number of nodes and tokens that may need to examined.  However, in practice, it should
            operate in sub-linear time as it will bail the moment tokens don't match, and it's able to skip over matching
            nodes fully without examining the contents of those nodes.  This is intended for consumers that want a
            reasonably accurate change range computer, but do not want to spend an inordinate amount of time getting the
            most accurate and minimal result possible.
            </summary>
            <remarks>
            This computation is not guaranteed to be minimal.  It may return a range that includes parts that are unchanged.
            This means it is also legal for the change range to just specify the entire file was changed. The quality of
            results will depend on how well the parsers did with incremental parsing, and how much time is given to do the
            comparison.  In practice, for large files (i.e. 15kloc) with standard types of edits, this generally returns
            results in around 50-100 usecs on a i7 3GHz desktop.
            <para>
            This algorithm will respect the timeout provided to the best of abilities.  If any information has been computed
            when the timeout elapses, it will be returned.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.ConflictAnnotation">
            <summary>
            Apply this annotation to a SyntaxNode to indicate a conflict may exist that requires user understanding and acknowledgment before taking action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.NavigationAnnotation">
            <summary>
            Apply this annotation to an appropriate Syntax element to request that it should be 
            navigated to by the user after a code action is applied.  If present the host should
            try to place the user's caret at the beginning of the element.
            </summary>
            <remarks>
            By using a <see cref="T:Microsoft.CodeAnalysis.SyntaxAnnotation"/> this navigation location will be resilient
            to the transformations performed by the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> infrastructure.  
            Namely it will be resilient to the formatting, reduction or case correction that
            automatically occures.  This allows a code action to specify a desired location for
            the user caret to be placed without knowing what actual position that location will
            end up at when the action is finally applied.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.RenameAnnotation">
            <summary>
            Apply this annotation to an appropriate SyntaxNode to request that it should be renamed by the user after the action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.WarningAnnotation">
            <summary>
            Apply this annotation to a SyntaxNode to indicate that a warning message should be presented to the user.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.CodeAction">
            <summary>
            An action produced by a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> or a <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.Title">
            <summary>
            A short title describing the action that may appear in a menu.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey">
             <summary>
             Two code actions are treated as equivalent if they have equal non-null <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/> values and were generated
             by the same <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> or <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/>.
             </summary>
             <remarks>
             Equivalence of code actions affects some Visual Studio behavior. For example, if multiple equivalent
             code actions result from code fixes or refactorings for a single Visual Studio light bulb instance,
             the light bulb UI will present only one code action from each set of equivalent code actions.
             Additionally, a Fix All operation will apply only code actions that are equivalent to the original code action.
            
             If two code actions that could be treated as equivalent do not have equal <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/> values, Visual Studio behavior
             may be less helpful than would be optimal. If two code actions that should be treated as distinct have
             equal <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/> values, Visual Studio behavior may appear incorrect.
             </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.Tags">
            <summary>
            Descriptive tags from <see cref="T:Microsoft.CodeAnalysis.Tags.WellKnownTags"/>.
            These tags may influence how the item is displayed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.CustomTags">
            <summary>
            Gets custom tags for the CodeAction.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.AddCustomTag(System.String)">
            <summary>
            Used by the CodeFixService and CodeRefactoringService to add the Provider Name as a CustomTag.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            The sequence of operations that define the code action.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker,System.Threading.CancellationToken)">
            <summary>
            The sequence of operations that define the code action.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            The sequence of operations used to construct a preview.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            Override this method if you want to implement a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> subclass that includes custom <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/>'s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            Override this method if you want to implement a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that has a set of preview operations that are different
            than the operations produced by <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken)">
            <summary>
            Computes all changes for an entire solution.
            Override this method if you want to implement a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> subclass that changes more than one document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedDocumentAsync(System.Threading.CancellationToken)">
            <summary>
            Computes changes for a single document. Override this method if you want to implement a
            <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> subclass that changes a single document.
            </summary>
            <remarks>
            All code actions are expected to operate on solutions. This method is a helper to simplify the
            implementation of <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken)"/> for code actions that only need
            to change one document.
            </remarks>
            <exception cref="T:System.NotSupportedException">If this code action does not support changing a single document.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionInternalAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            used by batch fixer engine to get new solution
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeActions.CodeActionOperation},System.Threading.CancellationToken)">
            <summary>
            Apply post processing steps to any <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/>'s.
            </summary>
            <param name="operations">A list of operations.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A new list of operations with post processing steps applied to any <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/>'s.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
             Apply post processing steps to solution changes, like formatting and simplification.
            </summary>
            <param name="changedSolution">The solution changed by the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.</param>
            <param name="cancellationToken">A cancellation token</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Apply post processing steps to a single document:
              Reducing nodes annotated with <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation"/>
              Formatting nodes annotated with <see cref="P:Microsoft.CodeAnalysis.Formatting.Formatter.Annotation"/>
            </summary>
            <param name="document">The document changed by the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A document with the post processing changes applied.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.Create(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.CodeAnalysis.Document}},System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> for a change to a single <see cref="T:Microsoft.CodeAnalysis.Document"/>.
            Use this factory when the change is expensive to compute and should be deferred until requested.
            </summary>
            <param name="title">Title of the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.</param>
            <param name="createChangedDocument">Function to create the <see cref="T:Microsoft.CodeAnalysis.Document"/>.</param>
            <param name="equivalenceKey">Optional value used to determine the equivalence of the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> with other <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>s. See <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.Create(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.CodeAnalysis.Solution}},System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> for a change to more than one <see cref="T:Microsoft.CodeAnalysis.Document"/> within a <see cref="T:Microsoft.CodeAnalysis.Solution"/>.
            Use this factory when the change is expensive to compute and should be deferred until requested.
            </summary>
            <param name="title">Title of the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.</param>
            <param name="createChangedSolution">Function to create the <see cref="T:Microsoft.CodeAnalysis.Solution"/>.</param>
            <param name="equivalenceKey">Optional value used to determine the equivalence of the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> with other <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>s. See <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.Create(System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeActions.CodeAction},System.Boolean)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> representing a group of code actions.
            </summary>
            <param name="title">Title of the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> group.</param>
            <param name="nestedActions">The code actions within the group.</param>
            <param name="isInlinable"><see langword="true"/> to allow inlining the members of the group into the parent;
            otherwise, <see langword="false"/> to require that this group appear as a group with nested actions.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.CodeActionPriority">
            <summary>
            Internal priority used to bluntly place items in a light bulb in strict orderings.  Priorities take
            the highest precedence when ordering items so that we can ensure very important items get top prominence,
            and low priority items do not.
            </summary>
            <remarks>
            If <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionPriority.High"/> is used, the feature that specifies that value should 
            implement and return <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.High"/> for <see cref="P:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer.RequestPriority"/>,
            <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RequestPriority"/> and
            <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.RequestPriority"/>. This
            will ensure that the analysis engine runs the providers that will produce those actions first,
            thus allowing those actions to be computed and displayed prior to running all other providers.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that can vary with user specified options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOptions(System.Threading.CancellationToken)">
            <summary>
            Gets the options to use with this code action.
            This method is guaranteed to be called on the UI thread.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An implementation specific object instance that holds options for applying the code action.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/>'s for this <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> given the specified options.
            </summary>
            <param name="options">An object instance returned from a prior call to <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOptions(System.Threading.CancellationToken)"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.ComputeOperationsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Override this method to compute the operations that implement this <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </summary>
            <param name="options">An object instance returned from a call to <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOptions(System.Threading.CancellationToken)"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/> for applying solution changes to a workspace.
            <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsAsync(System.Threading.CancellationToken)"/> may return at most one
            <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/>. Hosts may provide custom handling for 
            <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/>s, but if a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> requires custom
            host behavior not supported by a single <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/>, then instead:
            <list type="bullet">
            <description><text>Implement a custom <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> and <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/>s</text></description>
            <description><text>Do not return any <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/> from <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsAsync(System.Threading.CancellationToken)"/></text></description>
            <description><text>Directly apply any workspace edits</text></description>
            <description><text>Handle any custom host behavior</text></description>
            <description><text>Produce a preview for <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken)"/> 
              by creating a custom <see cref="T:Microsoft.CodeAnalysis.CodeActions.PreviewOperation"/> or returning a single <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/>
              to use the built-in preview mechanism</text></description>
            </list>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation">
            <summary>
            Represents a single operation of a multi-operation code action.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.Title">
            <summary>
            A short title describing of the effect of the operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.Apply(Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Called by the host environment to apply the effect of the operation.
            This method is guaranteed to be called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.TryApplyAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker,System.Threading.CancellationToken)">
            <summary>
            Called by the host environment to apply the effect of the operation.
            This method is guaranteed to be called on the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.ApplyDuringTests">
            <summary>
            Operations may make all sorts of changes that may not be appropriate during testing
            (like popping up UI). So, by default, we don't apply them unless the operation asks
            for that to happen.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.OpenDocumentOperation">
            <summary>
            A code action operation for requesting a document be opened in the host environment.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.PreviewOperation">
            <summary>
            Represents a preview operation for generating a custom user preview for the operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.PreviewOperation.GetPreviewAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a custom preview control for the operation.
            If preview is null and <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.Title"/> is non-null, then <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.Title"/> is used to generate the preview.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.None">
            <summary>
            No priority specified, all refactoring, code fixes, and analyzers should be run.  This is equivalent
            to <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Lowest"/>, <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Low"/>, <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Normal"/> and <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.High"/> combined.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Lowest">
            <summary>
            Only lowest priority suppression and configuration fix providers should be run.  Specifically,
            <see cref="T:IConfigurationFixProvider"/> providers will be run.
            NOTE: This priority is reserved for suppression and configuration fix providers and should not be
            used by regular code fix providers and refactoring providers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Low">
            <summary>
            Only low priority refactoring, code fix providers should be run.  Specifically,
            providers will be run when <see cref="T:CodeRefactoringProvider.RequestPriority"/> or
            <see cref="T:CodeFixProvider.RequestPriority"/> is <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Low"/>.  <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s
            which can report at least one fixable diagnostic will be run.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Normal">
            <summary>
            Only normal priority refactoring, code fix providers should be run.  Specifically,
            providers will be run when <see cref="T:CodeRefactoringProvider.RequestPriority"/> or
            <see cref="T:CodeFixProvider.RequestPriority"/> is <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Normal"/>.  <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s
            which can report at least one fixable diagnostic will be run.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.High">
            <summary>
            Only high priority refactoring, code fix providers should be run.  Specifically,
            providers will be run when <see cref="T:CodeRefactoringProvider.RequestPriority"/> or
            <see cref="T:CodeFixProvider.RequestPriority"/> is <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.Normal"/>.
            The <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.IsCompilerAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)"/> <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>
            will be run.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.GetPreviousTokenStartPosition(Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarkerType,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Get the proper start position based on the span marker type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.GetNextTokenEndPosition(Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarkerType,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Get the proper end position based on the span marker type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.AnnotateNodeForTextSpans(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Inject annotations into the node so that it can re-calculate spans for each code cleaner after each tree transformation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.GetNonOverlappingSpans(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Make sure annotations are positioned outside of any spans. If not, merge two adjacent spans to one.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.GetTokensAroundSpan(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@)">
             <summary>
             Retrieves four tokens around span like below.
            
             [previousToken][startToken][SPAN][endToken][nextToken]
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.GetSpanAlignedToTokens(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@)">
            <summary>
            Adjust provided span to align to either token's start position or end position.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.FindTokenOnRightOfPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)">
            <summary>
            Find closest token (including one in structured trivia) right of given position
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.FindTokenOnLeftOfPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)">
            <summary>
            Find closest token (including one in structured trivia) left of given position
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarkerType">
            <summary>
            Enum that indicates type of span marker
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarkerType.Normal">
            <summary>
            Normal case
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarkerType.BeginningOfFile">
            <summary>
            Span starts at the beginning of the tree
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarkerType.EndOfFile">
            <summary>
            Span ends at the end of the tree
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarker">
            <summary>
            Internal annotation type to mark span location in the tree.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarker.Type">
            <summary>
            Indicates the current marker type
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeCleanup.AbstractCodeCleanerService.SpanMarker.OppositeMarkerType">
            <summary>
            Indicates how to find the other side of the span marker if it is missing
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner">
            <summary>
            Static CodeCleaner class that provides default code cleaning behavior.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.GetDefaultProviders(Microsoft.CodeAnalysis.Document)">
            <summary>
            Return default code cleaners for a given document.
            
            This can be modified and given to the Cleanup method to provide different cleaners.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.CleanupAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            Cleans up the whole document.
            Optionally you can provide your own options and code cleaners. Otherwise, the default will be used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.CleanupAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            Cleans up the document marked with the provided annotation.
            Optionally you can provide your own options and code cleaners. Otherwise, the default will be used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.CleanupAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            Clean up the provided span in the document.
            Optionally you can provide your own options and code cleaners. Otherwise, the default will be used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.CleanupAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            Clean up the provided spans in the document.
            Optionally you can provide your own options and code cleaners. Otherwise, the default will be used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.CleanupAsync(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Workspace,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            Clean up the provided span in the node.
            This will only cleanup stuff that doesn't require semantic information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.CodeCleaner.CleanupAsync(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            Clean up the provided spans in the node.
            This will only cleanup stuff that doesn't require semantic information.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.ICodeCleanerService">
            <summary>
            Internal code cleanup service interface.
            
            This is not supposed to be used directly. It just provides a way to get the right service from each language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.ICodeCleanerService.GetDefaultProviders">
            <summary>
            Returns the default code cleaners.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.ICodeCleanerService.CleanupAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            This will run all provided code cleaners in an order that is given to the method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.ICodeCleanerService.CleanupAsync(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider},System.Threading.CancellationToken)">
            <summary>
            This will run all provided code cleaners in an order that is given to the method.
            
            This will do cleanups that don't require any semantic information.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.Providers.ExportCodeCleanupProvider">
            <summary>
            Specifies the exact type of the code cleanup exported.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider">
            <summary>
            A code cleaner that requires semantic information to do its job.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider.Name">
            <summary>
            Returns the name of this provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider.CleanupAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            This should apply its code clean up logic to the spans of the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider.CleanupAsync(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            This will run all provided code cleaners in an order that is given to the method.
            
            This will do cleanups that don't require any semantic information
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.Providers.SimpleCodeCleanupProvider">
            <summary>
            Helper class that implements <see cref="T:Microsoft.CodeAnalysis.CodeCleanup.Providers.ICodeCleanupProvider"/> using delegates passed to its constructor.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix">
            <summary>
            Represents a single fix. This is essentially a tuple
            that holds on to a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> and the set of
            <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/>s that this <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> will fix.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFix.PrimaryDiagnostic">
            <summary>
            This is the diagnostic that will show up in the preview pane header when a particular fix
            is selected in the light bulb menu. We also group all fixes with the same <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFix.PrimaryDiagnostic"/>
            together (into a single SuggestedActionSet) in the light bulb menu.
            </summary>
            <remarks>
            A given fix can fix one or more diagnostics. However, our light bulb UI (preview pane, grouping
            of fixes in the light bulb menu etc.) currently keeps things simple and pretends that
            each fix fixes a single <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFix.PrimaryDiagnostic"/>.
            
            Implementation-wise the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFix.PrimaryDiagnostic"/> is always the first diagnostic that
            the <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> supplied when registering the fix (<see 
            cref="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic})"/>). This could change
            in the future, if we decide to change the UI to depict the true mapping between fixes and diagnostics
            or if we decide to use some other heuristic to determine the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFix.PrimaryDiagnostic"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext">
            <summary>
            Context for code fixes provided by a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Document">
            <summary>
            Document corresponding to the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Span"/> to fix.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Span">
            <summary>
            Text span within the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Document"/> to fix.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Diagnostics">
            <summary>
            Diagnostics to fix.
            NOTE: All the diagnostics in this collection have the same <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Span"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.CancellationToken">
            <summary>
            CancellationToken.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic},System.Action{Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},System.Threading.CancellationToken)">
            <summary>
            Creates a code fix context to be passed into <see cref="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)"/> method.
            </summary>
            <param name="document">Document to fix.</param>
            <param name="span">Text span within the <paramref name="document"/> to fix.</param>
            <param name="diagnostics">
            Diagnostics to fix.
            All the diagnostics must have the same <paramref name="span"/>.
            Additionally, the <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Id"/> of each diagnostic must be in the set of the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds"/> of the associated <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/>.
            </param>
            <param name="registerCodeFix">Delegate to register a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> fixing a subset of diagnostics.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">Throws this exception if any of the arguments is null.</exception>
            <exception cref="T:System.ArgumentException">
            Throws this exception if the given <paramref name="diagnostics"/> is empty,
            has a null element or has an element whose span is not equal to <paramref name="span"/>.
            </exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostic,System.Action{Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},System.Threading.CancellationToken)">
            <summary>
            Creates a code fix context to be passed into <see cref="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)"/> method.
            </summary>
            <param name="document">Document to fix.</param>
            <param name="diagnostic">
            Diagnostic to fix.
            The <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Id"/> of this diagnostic must be in the set of the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds"/> of the associated <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/>.
            </param>
            <param name="registerCodeFix">Delegate to register a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> fixing a subset of diagnostics.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">Throws this exception if any of the arguments is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction,Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Add supplied <paramref name="action"/> to the list of fixes that will be offered to the user.
            </summary>
            <param name="action">The <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that will be invoked to apply the fix.</param>
            <param name="diagnostic">The subset of <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Diagnostics"/> being addressed / fixed by the <paramref name="action"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Add supplied <paramref name="action"/> to the list of fixes that will be offered to the user.
            </summary>
            <param name="action">The <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that will be invoked to apply the fix.</param>
            <param name="diagnostics">The subset of <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Diagnostics"/> being addressed / fixed by the <paramref name="action"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Add supplied <paramref name="action"/> to the list of fixes that will be offered to the user.
            </summary>
            <param name="action">The <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that will be invoked to apply the fix.</param>
            <param name="diagnostics">The subset of <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Diagnostics"/> being addressed / fixed by the <paramref name="action"/>.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider">
            <summary>
            Implement this type to provide fixes for source code problems.
            Remember to use <see cref="T:Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute"/> so the host environment can offer your fixes in a UI.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds">
            <summary>
            A list of diagnostic IDs that this provider can provide fixes for.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <summary>
            Computes one or more fixes for the specified <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext"/>.
            </summary>
            <param name="context">
            A <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext"/> containing context information about the diagnostics to fix.
            The context must only contain diagnostics with a <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Id"/> included in the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds"/> for the current provider.
            </param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that can fix all/multiple occurrences of diagnostics fixed by this code fix provider.
            Return null if the provider doesn't support fix all/multiple occurrences.
            Otherwise, you can return any of the well known fix all providers from <see cref="T:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders"/> or implement your own fix all provider.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RequestPriority">
            <summary>
            What priority this provider should run at.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> implementation so that it can be discovered by the host.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.Name">
            <summary>
            Optional name of the <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/>.  
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.Languages">
            <summary>
            The source languages this provider can provide fixes for.  See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.#ctor(System.String,System.String[])">
            <summary>
            Attribute constructor used to specify automatic application of a code fix provider.
            </summary>
            <param name="firstLanguage">One language to which the code fix provider applies.</param>
            <param name="additionalLanguages">Additional languages to which the code fix provider applies. See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider">
            <summary>
            Helper class for "Fix all occurrences" code fix providers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetAllChangedDocumentsInDiagnosticsOrderAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Returns all the changed documents produced by fixing the list of provided <paramref
            name="orderedDiagnostics"/>.  The documents will be returned such that fixed documents for a later
            diagnostic will appear later than those for an earlier diagnostic.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.MergeTextChangesAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Document},System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.CodeFixes.TextChangeMerger})">
            <summary>
            Take all the changes made to a particular document and determine the text changes caused by each one.  Take
            those individual text changes and attempt to merge them together in order into <paramref
            name="docIdToTextMerger"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.DefaultFixAllProviderHelpers">
            <summary>
            Default implementation of a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that efficiently handles the dispatch logic for fixing
            entire solutions.  Used by <see cref="T:Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider"/> and <see cref="T:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider">
            <summary>
            Provides a base class to write a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that fixes documents independently. This type
            should be used instead of <see cref="P:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders.BatchFixer"/> in the case where fixes for a <see
            cref="T:Microsoft.CodeAnalysis.Diagnostic"/> only affect the <see cref="T:Microsoft.CodeAnalysis.Document"/> the diagnostic was produced in.
            </summary>
            <remarks>
            This type provides suitable logic for fixing large solutions in an efficient manner.  Projects are serially
            processed, with all the documents in the project being processed in parallel.  Diagnostics are computed for the
            project and then appropriately bucketed by document.  These are then passed to <see
            cref="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.FixAllAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})"/> for implementors to process.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.GetFixAllTitle(Microsoft.CodeAnalysis.CodeFixes.FixAllContext)">
            <summary>
            Produce a suitable title for the fix-all <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> this type creates in <see
            cref="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.GetFixAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext)"/>.  Override this if customizing that title is desired.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.FixAllAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Fix all the <paramref name="diagnostics"/> present in <paramref name="document"/>.  The document returned
            will only be examined for its content (e.g. it's <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/> or <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.  No
            other aspects of (like it's properties), or changes to the <see cref="T:Microsoft.CodeAnalysis.Project"/> or <see cref="T:Microsoft.CodeAnalysis.Solution"/>
            it points at will be considered.
            </summary>
            <param name="fixAllContext">The context for the Fix All operation.</param>
            <param name="document">The document to fix.</param>
            <param name="diagnostics">The diagnostics to fix in the document.</param>
            <returns>
            <para>The new <see cref="T:Microsoft.CodeAnalysis.Document"/> representing the content fixed document.</para>
            <para>-or-</para>
            <para><see langword="null"/>, if no changes were made to the document.</para>
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.DetermineDiagnosticsAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker)">
            <summary>
            Determines all the diagnostics we should be fixing for the given <paramref name="fixAllContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.GetFixedDocumentsAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Attempts to fix all the provided <paramref name="diagnostics"/> returning, for each updated document, either
            the new syntax root for that document or its new text.  Syntax roots are returned for documents that support
            them, and are used to perform a final cleanup pass for formatting/simplication/etc.  Text is returned for
            documents that don't support syntax.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.CleanupAndApplyChangesAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker,Microsoft.CodeAnalysis.Solution,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.DocumentId,System.ValueTuple{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.SourceText}})">
            <summary>
            Take all the fixed documents and format/simplify/clean them up (if the language supports that), and take the
            resultant text and apply it to the solution.  If the language doesn't support cleanup, then just take the
            given text and apply that instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider.PostProcessCodeAction">
            <summary>
            Dummy class just to get access to <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext">
            <summary>
            Context for "Fix all occurrences" code fixes provided by a <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.FixAllProvider"/>.
            </summary>
            <summary>
            Context for "Fix all occurrences" code fixes provided by a <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.FixAllProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Solution">
            <summary>
            Solution to fix all occurrences.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Project">
            <summary>
            Project within which fix all occurrences was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Document">
            <summary>
            Document within which fix all occurrences was triggered.
            Can be null if the context was created using <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.#ctor(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllScope,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.CodeFixProvider">
            <summary>
            Underlying <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> which triggered this fix all.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Scope">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllScope"/> to fix all occurrences.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticIds">
            <summary>
            Diagnostic Ids to fix.
            Note that <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetDocumentDiagnosticsAsync(Microsoft.CodeAnalysis.Document)"/>, <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetProjectDiagnosticsAsync(Microsoft.CodeAnalysis.Project)"/> and <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetAllDiagnosticsAsync(Microsoft.CodeAnalysis.Project)"/> methods
            return only diagnostics whose IDs are contained in this set of Ids.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.CodeActionEquivalenceKey">
            <summary>
            The <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/> value expected of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> participating in this fix all.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.CancellationToken">
            <summary>
            CancellationToken for fix all session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllScope,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            Use this overload when applying fix all to a diagnostic with a source location.
            </summary>
            <param name="document">Document within which fix all occurrences was triggered.</param>
            <param name="codeFixProvider">Underlying <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> which triggered this fix all.</param>
            <param name="scope"><see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllScope"/> to fix all occurrences.</param>
            <param name="codeActionEquivalenceKey">The <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/> value expected of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> participating in this fix all.</param>
            <param name="diagnosticIds">Diagnostic Ids to fix.</param>
            <param name="fixAllDiagnosticProvider">
            <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider"/> to fetch document/project diagnostics to fix in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </param>
            <param name="cancellationToken">Cancellation token for fix all computation.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.#ctor(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllScope,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            Use this overload when applying fix all to a diagnostic with no source location, i.e. <see cref="P:Microsoft.CodeAnalysis.Location.None"/>.
            </summary>
            <param name="project">Project within which fix all occurrences was triggered.</param>
            <param name="codeFixProvider">Underlying <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> which triggered this fix all.</param>
            <param name="scope"><see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllScope"/> to fix all occurrences.</param>
            <param name="codeActionEquivalenceKey">The <see cref="P:Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey"/> value expected of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> participating in this fix all.</param>
            <param name="diagnosticIds">Diagnostic Ids to fix.</param>
            <param name="fixAllDiagnosticProvider">
            <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider"/> to fetch document/project diagnostics to fix in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </param>
            <param name="cancellationToken">Cancellation token for fix all computation.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetDocumentDiagnosticsAsync(Microsoft.CodeAnalysis.Document)">
            <summary>
            Gets all the diagnostics in the given document filtered by <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticIds"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetProjectDiagnosticsAsync(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets all the project-level diagnostics, i.e. diagnostics with no source location, in the given project filtered by <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticIds"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetAllDiagnosticsAsync(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets all the diagnostics in the given project filtered by <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticIds"/>.
            This includes both document-level diagnostics for all documents in the given project and project-level diagnostics, i.e. diagnostics with no source location, in the given project. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetProjectDiagnosticsAsync(Microsoft.CodeAnalysis.Project,System.Boolean)">
            <summary>
            Gets all the project diagnostics in the given project filtered by <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticIds"/>.
            If <paramref name="includeAllDocumentDiagnostics"/> is false, then returns only project-level diagnostics which have no source location.
            Otherwise, returns all diagnostics in the project, including the document diagnostics for all documents in the given project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.WithCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Gets a new <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/> with the given cancellationToken.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider">
            <summary>
            Diagnostic provider to fetch document/project diagnostics to fix in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider.GetDocumentDiagnosticsAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Gets all the diagnostics to fix in the given document in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider.GetProjectDiagnosticsAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)">
            <summary>
            Gets all the project-level diagnostics to fix, i.e. diagnostics with no source location, in the given project in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticProvider.GetAllDiagnosticsAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)">
            <summary>
            Gets all the diagnostics to fix in the given project in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            This includes both document-level diagnostics for all documents in the given project and project-level diagnostics, i.e. diagnostics with no source location, in the given project. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllLogger">
            <summary>
            Fix all occurrences logging.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider">
            <summary>
            Implement this abstract type to provide fix all/multiple occurrences code fixes for source code problems.
            Alternatively, you can use any of the well known fix all providers from <see cref="T:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetSupportedFixAllScopes">
            <summary>
            Gets the supported scopes for fixing all occurrences of a diagnostic.
            By default, it returns the following scopes:
            (a) <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Document"/>
            (b) <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Project"/> and
            (c) <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Solution"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetSupportedFixAllDiagnosticIds(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider)">
            <summary>
            Gets the diagnostic IDs for which fix all occurrences is supported.
            By default, it returns <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds"/> for the given <paramref name="originalCodeFixProvider"/>.
            </summary>
            <param name="originalCodeFixProvider">Original code fix provider that returned this fix all provider from <see cref="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider"/> method.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetFixAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext)">
            <summary>
            Gets fix all occurrences fix for the given fixAllContext.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.Create(System.Func{Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic},System.Threading.Tasks.Task{Microsoft.CodeAnalysis.Document}})">
            <summary>
            Create a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that fixes documents independently.  This should be used instead of
            <see cref="P:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders.BatchFixer"/> in the case where fixes for a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/>
            only affect the <see cref="T:Microsoft.CodeAnalysis.Document"/> the diagnostic was produced in.
            </summary>
            <param name="fixAllAsync">
            Callback that will the fix diagnostics present in the provided document.  The document returned will only be
            examined for its content (e.g. it's <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/> or <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.  No other aspects
            of it (like attributes), or changes to the <see cref="T:Microsoft.CodeAnalysis.Project"/> or <see cref="T:Microsoft.CodeAnalysis.Solution"/> it points at
            will be considered.
            </param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo">
            <summary>
            Contains computed information for a given <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/>, such as supported diagnostic Ids and supported <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllScope"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo.Create(System.Object)">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo"/> for the given code fix provider or suppression fix provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo.CreateWithCodeFixer(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider)">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo"/> for the given code fix provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo.CreateWithSuppressionFixer(Microsoft.CodeAnalysis.CodeFixes.IConfigurationFixProvider)">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo"/> for the given suppression fix provider.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllScope">
            <summary>
            Indicates scope for "Fix all occurrences" code fixes provided by each <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.TextChangeMerger">
            <summary>
            Helper to merge many disparate text changes to a single document together into a total set of changes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.TextChangeMerger.TryMergeChangesAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Try to merge the changes made to <paramref name="newDocument"/> into the tracked changes. If there is any
            conflicting change in <paramref name="newDocument"/> with existing changes, then no changes are added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.TextChangeMerger.TryMergeChangesAsync(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken)">
            <summary>
            Try to merge the changes made to all the documents in <paramref name="newDocuments"/> in order into the
            tracked changes. If there is any conflicting changes with existing changes for a particular document, then
            no changes will be added for it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders">
            <summary>
            Contains well known implementations of <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders.BatchFixer">
            <summary>
            Default batch fix all provider.
            This provider batches all the individual diagnostic fixes across the scope of fix all action,
            computes fixes in parallel and then merges all the non-conflicting fixes into a single fix all code action.
            This fixer supports fixes for the following fix all scopes:
            <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Document"/>, <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Project"/> and <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Solution"/>.
            </summary>
            <remarks>
            The batch fix all provider only batches operations (i.e. <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/>) of type
            <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/> present within the individual diagnostic fixes. Other types of
            operations present within these fixes are ignored.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.IConfigurationFixProvider">
            <summary>
            Provides suppression or configuration code fixes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IConfigurationFixProvider.IsFixableDiagnostic(Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Returns true if the given diagnostic can be configured, suppressed or unsuppressed by this provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IConfigurationFixProvider.GetFixesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Gets one or more add suppression, remove suppression, or configuration fixes for the specified diagnostics represented as a list of <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>'s.
            </summary>
            <returns>A list of zero or more potential <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix"/>'es. It is also safe to return null if there are none.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IConfigurationFixProvider.GetFixesAsync(Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Gets one or more add suppression, remove suppression, or configuration fixes for the specified no-location diagnostics represented as a list of <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>'s.
            </summary>
            <returns>A list of zero or more potential <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix"/>'es. It is also safe to return null if there are none.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IConfigurationFixProvider.GetFixAllProvider">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that can fix all/multiple occurrences of diagnostics fixed by this fix provider.
            Return null if the provider doesn't support fix all/multiple occurrences.
            Otherwise, you can return any of the well known fix all providers from <see cref="T:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders"/> or implement your own fix all provider.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixCategory">
            <summary>
            Code fix category for code fixes provided by a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeFixes.CodeFixCategory.CodeStyle">
            <summary>
            Fixes code to adhere to code style.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeFixes.CodeFixCategory.CodeQuality">
            <summary>
            Fixes code to improve code quality.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeFixes.CodeFixCategory.Compile">
            <summary>
            Fixes code to fix compiler diagnostics.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeFixes.CodeFixCategory.Custom">
            <summary>
            Custom category for fix.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllState.FixMultipleDiagnosticProvider">
            <summary>
            Diagnostic provider to fetch document/project diagnostics to fix in a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll(Microsoft.CodeAnalysis.Diagnostic,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,System.String,System.Threading.CancellationToken)">
             <summary>
             Whether or not this diagnostic should be included when performing a FixAll.  This is
             useful for providers that create multiple diagnostics for the same issue (For example,
             one main diagnostic and multiple 'faded out code' diagnostics).  FixAll can be invoked
             from any of those, but we'll only want perform an edit for only one diagnostic for each
             of those sets of diagnostics.
            
             This overload differs from <see cref="M:Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll(Microsoft.CodeAnalysis.Diagnostic,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,System.String,System.Threading.CancellationToken)"/>
             in that it also passes along the <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/>.
            
             This overload differs from <see cref="M:Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll(Microsoft.CodeAnalysis.Diagnostic)"/> in
             that it also passes along the <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllState"/> in case that would be useful
             (for example if the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllState.CodeActionEquivalenceKey"/> is used.
            
             Only one of these three overloads needs to be overridden if you want to customize
             behavior.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll(Microsoft.CodeAnalysis.Diagnostic)">
             <summary>
             Whether or not this diagnostic should be included when performing a FixAll.  This is
             useful for providers that create multiple diagnostics for the same issue (For example,
             one main diagnostic and multiple 'faded out code' diagnostics).  FixAll can be invoked
             from any of those, but we'll only want perform an edit for only one diagnostic for each
             of those sets of diagnostics.
            
             By default, all diagnostics will be included in fix-all unless they are filtered out
             here. If only the diagnostic needs to be queried to make this determination, only this
             overload needs to be overridden.  However, if information from <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllState"/>
             is needed (for example <see cref="P:Microsoft.CodeAnalysis.CodeFixes.FixAllState.CodeActionEquivalenceKey"/>), then <see
             cref="M:Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll(Microsoft.CodeAnalysis.Diagnostic,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,System.String,System.Threading.CancellationToken)"/>
             should be overridden instead.
            
             Only one of these two overloads needs to be overridden if you want to customize
             behavior.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.FindMostRelevantNameSpaceOrTypeDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Return the most relevant declaration to namespaceOrType,
            it will first search the context node contained within,
            then the declaration in the same file, then non auto-generated file,
            then all the potential location. Return null if no declaration.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions">
            <summary>
            Options for controlling the code produced by the <see cref="T:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.ContextLocation">
            <summary>
            A location used to determine the best place to generate a member.  This is only used for
            determining which part of a partial type to generate in.  If a type only has one part, or
            an API is used that specifies the type, then this is not used.  A part is preferred if
            it surrounds this context location. If no part surrounds this location then a part is
            preferred if it comes from the same SyntaxTree as this location.  If there is no
            such part, then any part may be used for generation.
            
            This option is not necessary if <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AfterThisLocation"/> or <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.BeforeThisLocation"/> are
            provided.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AfterThisLocation">
            <summary>
            A hint to the code generation service to specify where the generated code should be
            placed.  Code will be generated after this location if the location is valid in the type
            or symbol being generated into, and it is possible to generate the code after it.
            
            If this option is provided, neither <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.ContextLocation"/> nor <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.BeforeThisLocation"/> are
            needed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.BeforeThisLocation">
            <summary>
            A hint to the code generation service to specify where the generated code should be
            placed.  Code will be generated before this location if the location is valid in the type
            or symbol being generated into, and it is possible to generate the code after it. 
            
            If this option is provided, neither <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.ContextLocation"/> nor <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AfterThisLocation"/> are
            needed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AddImports">
            <summary>
            True if the code generation service should add <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.AddImportsAnnotation"/>,
            and when not generating directly into a declaration, should try to automatically add imports to the file
            for any generated code.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AdditionalImports">
            <summary>
            Contains additional imports to be automatically added.  This is useful for adding
            imports that are part of a list of statements.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.GenerateMembers">
            <summary>
            True if members of a symbol should also be generated along with the declaration.  If
            false, only the symbol's declaration will be generated.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.MergeNestedNamespaces">
            <summary>
            True if the code generator should merge namespaces which only contain other namespaces
            into a single declaration with a dotted name.  False if the nesting should be preserved
            and each namespace declaration should be nested and should only have a single non-dotted
            name.
            
            Merging can only occur if the namespace only contains a single member that is also a
            namespace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.MergeAttributes">
            <summary>
            True if the code generation should put multiple attributes in a single attribute
            declaration, or if should have a separate attribute declaration for each attribute.  For
            example, in C# setting this to True this would produce "[Goo, Bar]" while setting it to
            False would produce "[Goo][Bar]"
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.GenerateDefaultAccessibility">
            <summary>
            True if the code generator should always generate accessibility modifiers, even if they
            are the same as the defaults for that symbol.  For example, a private field in C# does
            not need its accessibility specified as it will be private by default.  However, if this
            option is set to true 'private' will still be generated.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.GenerateMethodBodies">
            <summary>
            True if the code generator should generate empty bodies for methods along with the
            method declaration.  If false, only method declarations will be generated.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.GenerateDocumentationComments">
            <summary>
            True if the code generator should generate documentation comments where available
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AutoInsertionLocation">
            <summary>
            True if the code generator should automatically attempt to choose the appropriate location
            to insert members.  If false and a generation location is not specified by AfterThisLocation,
            or BeforeThisLocation, members will be inserted at the end of the destination definition.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.SortMembers">
            <summary>
            If <see cref="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.AutoInsertionLocation"/> is <see langword="false"/>, determines if members will be
            sorted before being added to the end of the list of members.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions.ReuseSyntax">
            <summary>
            True if the code generator should attempt to reuse the syntax of the constituent entities, such as members, access modifier tokens, etc. while attempting to generate code.
            If any of the member symbols have zero declaring syntax references (non-source symbols) OR two or more declaring syntax references (partial definitions), then syntax is not reused.
            If false, then the code generator will always synthesize a new syntax node and ignore the declaring syntax references.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory">
            <summary>
            Generates symbols that describe declarations to be generated.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.IsCodeGenerationSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Determines if the symbol is purely a code generation symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateEventSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IEventSymbol},System.String,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Creates an event symbol that can be used to describe an event declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreatePropertySymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.RefKind,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IPropertySymbol},System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol},Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.IMethodSymbol,System.Boolean)">
            <summary>
            Creates a property symbol that can be used to describe a property declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateFieldSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Boolean,System.Object,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a field symbol that can be used to describe a field declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateConstructorSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)">
            <summary>
            Creates a constructor symbol that can be used to describe a constructor declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateDestructorSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a destructor symbol that can be used to describe a destructor declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateMethodSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.RefKind,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol},System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.MethodKind,System.Boolean)">
            <summary>
            Creates a method symbol that can be used to describe a method declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateOperatorSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOperatorKind,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String)">
            <summary>
            Creates a method symbol that can be used to describe an operator declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateConversionSymbol(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String)">
            <summary>
            Creates a method symbol that can be used to describe a conversion declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateConversionSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},System.String)">
            <summary>
            Creates a method symbol that can be used to describe a conversion declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateParameterSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Creates a parameter symbol that can be used to describe a parameter declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateParameterSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.RefKind,System.Boolean,Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates a parameter symbol that can be used to describe a parameter declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateParameterSymbol(Microsoft.CodeAnalysis.IParameterSymbol,System.Nullable{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData}},System.Nullable{Microsoft.CodeAnalysis.RefKind},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.Optional{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Optional{System.Object})">
            <summary>
            Creates a parameter symbol that can be used to describe a parameter declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateTypeParameterSymbol(System.String,System.Int32)">
            <summary>
            Creates a parameter symbol that can be used to describe a parameter declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateTypeParameter(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.VarianceKind,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol},Microsoft.CodeAnalysis.NullableAnnotation,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a type parameter symbol that can be used to describe a type parameter declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Creates a pointer type symbol that can be used to describe a pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32,Microsoft.CodeAnalysis.NullableAnnotation)">
            <summary>
            Creates an array type symbol that can be used to describe an array type reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateAccessorSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an method type symbol that can be used to describe an accessor method declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateAttributeData(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TypedConstant},System.Collections.Immutable.ImmutableArray{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.TypedConstant}})">
            <summary>
            Create attribute data that can be used in describing an attribute declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateNamedTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.TypeKind,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol},Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol},Microsoft.CodeAnalysis.SpecialType,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.NullableAnnotation,Microsoft.CodeAnalysis.IAssemblySymbol)">
            <summary>
            Creates a named type symbol that can be used to describe a named type declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateNamedTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Boolean,Microsoft.CodeAnalysis.TypeKind,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol},Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol},Microsoft.CodeAnalysis.SpecialType,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.NullableAnnotation,Microsoft.CodeAnalysis.IAssemblySymbol)">
            <summary>
            Creates a named type symbol that can be used to describe a named type declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateDelegateTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.RefKind,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol},Microsoft.CodeAnalysis.NullableAnnotation)">
            <summary>
            Creates a method type symbol that can be used to describe a delegate type declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationSymbolFactory.CreateNamespaceSymbol(System.String,System.Collections.Generic.IList{Microsoft.CodeAnalysis.ISymbol},System.Collections.Generic.IList{Microsoft.CodeAnalysis.INamespaceOrTypeSymbol})">
            <summary>
            Creates a namespace symbol that can be used to describe a namespace declaration.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator">
            <summary>
            A generator used for creating or modifying member declarations in source.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.Annotation">
            <summary>
            Annotation placed on generated syntax.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CreateEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created event declaration node from the provided event.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CreateFieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created field declaration node from the provided field.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CreateMethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created method declaration node from the provided method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CreatePropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created property declaration node from the provided property.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CreateNamedTypeDeclaration(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created named type declaration node from the provided named type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CreateNamespaceDeclaration(Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created namespace declaration node from the provided namespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddEventDeclaration``1(``0,Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with an event declaration of the same signature as the specified symbol added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddFieldDeclaration``1(``0,Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with a field declaration of the same signature as the specified symbol added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddMethodDeclaration``1(``0,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with a method declaration of the same signature as the specified symbol added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddPropertyDeclaration``1(``0,Microsoft.CodeAnalysis.IPropertySymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with a property declaration of the same signature as the specified symbol added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddNamedTypeDeclaration``1(``0,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with a named type declaration of the same signature as the specified symbol added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddMemberDeclarations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with multiple member declarations of the same signatures as the specified symbols added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddParameterDeclarations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.IParameterSymbol},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with one or more parameter declarations of the same signature as the specified symbols added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddAttributes``1(``0,Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.AttributeData},System.Nullable{Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new declaration node with the specified attributes added to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.RemoveAttribute``1(``0,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Removes the specified attribute node from the given declaration node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.RemoveAttribute``1(``0,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Removes the specified attribute node from the given declaration node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddStatements``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Create a new declaration node with one or more statements added to its body.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddEventDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional event of the same signature as the specified event symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddFieldDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional field of the same signature as the specified field symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddMethodDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional method of the same signature as the specified method symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddPropertyDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IPropertySymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional property of the same signature as the specified property symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddNamedTypeDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional named type of the same signature as the specified named type symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddNamedTypeDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional named type of the same signature as the specified named type symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddNamespaceDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional namespace of the same signature as the specified namespace symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddNamespaceOrTypeDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has an additional namespace or type of the same signature as the specified namespace or type symbol.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.AddMemberDeclarationsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new solution where the declaration of the destination symbol has additional members of the same signature as the specified member symbols.
            Returns the document in the new solution where the destination symbol is declared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.CodeGenerator.CanAdd(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Returns <c>true</c> if additional declarations can be added to the destination symbol's declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CreateEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created event declaration node from the provided event.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CreateFieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created field declaration node from the provided field.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CreateMethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created method declaration node from the provided method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CreatePropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions)">
            <summary>
            Returns a newly created property declaration node from the provided property.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CreateNamedTypeDeclaration(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Returns a newly created named type declaration node from the provided named type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CreateNamespaceDeclaration(Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationDestination,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Returns a newly created namespace declaration node from the provided namespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddEvent``1(``0,Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds an event into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddField``1(``0,Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a field into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddMethod``1(``0,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a method into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddProperty``1(``0,Microsoft.CodeAnalysis.IPropertySymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a property into destination. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddNamedType``1(``0,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a named type into destination. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddNamespace``1(``0,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a namespace into destination. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddMembers``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds members into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddParameters``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.IParameterSymbol},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds the parameters to destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddAttributes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.AttributeData},System.Nullable{Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds the attributes to destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.RemoveAttribute``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Remove the given attribute from destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.RemoveAttribute``1(``0,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Remove the given attribute from destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.UpdateDeclarationModifiers``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Update the modifiers list for the given declaration node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.UpdateDeclarationAccessibility``1(``0,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Update the accessibility modifiers for the given declaration node, retaining the trivia of the existing modifiers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.UpdateDeclarationType``1(``0,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Update the type for the given declaration node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.UpdateDeclarationMembers``1(``0,System.Collections.Generic.IList{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Replace the existing members with the given newMembers for the given declaration node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddStatements``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds the statements to destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddEventAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a field with the provided signature into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddFieldAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a field with the provided signature into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddMethodAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a method with the provided signature into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddPropertyAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.IPropertySymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a property with the provided signature into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddNamedTypeAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a named type into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddNamedTypeAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a named type into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddNamespaceAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a namespace into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddNamespaceOrTypeAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds a namespace or type into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.AddMembersAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Adds all the provided members into destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CanAddTo(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            <c>true</c> if destination is a location where other symbols can be added to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.CanAddTo(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            <c>true</c> if destination is a location where other symbols can be added to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeGeneration.ICodeGenerationService.FindMostRelevantNameSpaceOrTypeDeclarationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,Microsoft.CodeAnalysis.CodeGeneration.CodeGenerationOptions,System.Threading.CancellationToken)">
            <summary>
            Return the most relevant declaration to namespaceOrType,
            it will first search the context node contained within,
            then the declaration in the same file, then non auto-generated file,
            then all the potential location. Return null if no declaration.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeGeneration.LiteralSpecialValues">
            <summary>
            When we are generating literals, we sometimes want to emit code vs. the numeric literal. This class
            gives the constants for all ones we want to convert
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeGeneration.NullableSyntaxAnnotation">
            <summary>
            Annotation placed on <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>s that the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/> converts to a node. This
            information tracks the original nullable state of the symbol and is used by metadata-as-source to determine if
            it needs to add <c>#nullable</c> directives in the file.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeGeneration.NullableSyntaxAnnotation.Oblivious">
            <summary>
            For <c>string~</c> types.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeGeneration.NullableSyntaxAnnotation.AnnotatedOrNotAnnotated">
            <summary>
            For <c>string!</c> or <c>string?</c> types.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext">
            <summary>
            Context for code refactorings provided by a <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.Document">
            <summary>
            Document corresponding to the <see cref="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.Span"/> to refactor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.Span">
            <summary>
            Text span within the <see cref="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.Document"/> to refactor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.CancellationToken">
            <summary>
            CancellationToken.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Action{Microsoft.CodeAnalysis.CodeActions.CodeAction},System.Threading.CancellationToken)">
            <summary>
            Creates a code refactoring context to be passed into <see cref="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Action{Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a code refactoring context to be passed into <see cref="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.RegisterRefactoring(Microsoft.CodeAnalysis.CodeActions.CodeAction)">
            <summary>
            Add supplied <paramref name="action"/> to the list of refactorings that will be offered to the user.
            </summary>
            <param name="action">The <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that will be invoked to apply the refactoring.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.RegisterRefactoring(Microsoft.CodeAnalysis.CodeActions.CodeAction,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Add supplied <paramref name="action"/> applicable to <paramref name="applicableToSpan"/> to the list of refactorings that will be offered to the user.
            </summary>
            <param name="action">The <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> that will be invoked to apply the refactoring.</param>
            <param name="applicableToSpan">The <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> within original document the <paramref name="action"/> is applicable to.</param>
            <remarks>
            <paramref name="applicableToSpan"/> should represent a logical section within the original document that the <paramref name="action"/> is 
            applicable to. It doesn't have to precisely represent the exact <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> that will get changed.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider">
            <summary>
            Inherit this type to provide source code refactorings.
            Remember to use <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute"/> so the host environment can offer your refactorings in a UI.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext)">
            <summary>
            Computes one or more refactorings for the specified <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.RequestPriority">
            <summary>
            What priority this provider should run at.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/> implementation so that it can be discovered by the host.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.Name">
            <summary>
            The name of the <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/>.  
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.Languages">
            <summary>
            The source languages for which this provider can provide refactorings. See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.#ctor(System.String,System.String[])">
            <summary>
            Attribute constructor used to specify availability of a code refactoring provider.
            </summary>
            <param name="firstLanguage">One language to which the code refactoring provider applies.</param>
            <param name="additionalLanguages">Additional languages to which the code refactoring provider applies. See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOption`1">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOption2`1"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOption2`1">
            <summary>
            Represents a code style option and an associated notification option.  Supports
            being instantiated with T as a <see cref="T:System.Boolean"/> or an <c>enum type</c>.
            
            CodeStyleOption also has some basic support for migration a <see cref="T:System.Boolean"/> option
            forward to an <c>enum type</c> option.  Specifically, if a previously serialized
            bool-CodeStyleOption is then deserialized into an enum-CodeStyleOption then 'false' 
            values will be migrated to have the 0-value of the enum, and 'true' values will be
            migrated to have the 1-value of the enum.
            
            Similarly, enum-type code options will serialize out in a way that is compatible with 
            hosts that expect the value to be a boolean.  Specifically, if the enum value is 0 or 1
            then those values will write back as false/true.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions.QualifyFieldAccess">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyFieldAccess"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions.QualifyPropertyAccess">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyPropertyAccess"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions.QualifyMethodAccess">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyMethodAccess"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions.QualifyEventAccess">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyEventAccess"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions.PreferIntrinsicPredefinedTypeKeywordInDeclaration">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.PreferIntrinsicPredefinedTypeKeywordInDeclaration"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions.PreferIntrinsicPredefinedTypeKeywordInMemberAccess">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.PreferIntrinsicPredefinedTypeKeywordInMemberAccess"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.NotificationOption">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.Name">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Name"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.Severity">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Severity"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.None">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.None"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.Silent">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Silent"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.Suggestion">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Suggestion"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.Warning">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Warning"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption.Error">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Error"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2">
            <summary>
            Offers different notification styles for enforcing
            a code style. Under the hood, it simply maps to <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/>
            </summary>
            <remarks>
            This also supports various properties for databinding.
            </remarks>
            <completionlist cref="T:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Name">
            <summary>
            Name for the notification option.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Severity">
            <summary>
            Diagnostic severity associated with notification option.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.None">
            <summary>
            Notification option to disable or suppress an option with <see cref="F:Microsoft.CodeAnalysis.ReportDiagnostic.Suppress"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Silent">
            <summary>
            Notification option for a silent or hidden option with <see cref="F:Microsoft.CodeAnalysis.ReportDiagnostic.Hidden"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Suggestion">
            <summary>
            Notification option for a suggestion or an info option with <see cref="F:Microsoft.CodeAnalysis.ReportDiagnostic.Info"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Warning">
            <summary>
            Notification option for a warning option with <see cref="F:Microsoft.CodeAnalysis.ReportDiagnostic.Warn"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Error">
            <summary>
            Notification option for an error option with <see cref="F:Microsoft.CodeAnalysis.ReportDiagnostic.Error"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeStyle.CodeStyleHelpers.TryGetCodeStyleValue(System.String,System.String@)">
            <summary>
            Given an editor-config code-style-option, gives back the core value part of the 
            option.  For example, if the option is "true:error" or "true" then "true" will be returned
            in <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeStyle.CodeStyleHelpers.TryGetCodeStyleValueAndOptionalNotification(System.String,Microsoft.CodeAnalysis.CodeStyle.NotificationOption2,System.String@,Microsoft.CodeAnalysis.CodeStyle.NotificationOption2@)">
            <summary>
            Given an editor-config code-style-option, gives back the constituent parts of the 
            option.  For example, if the option is "true:error" then "true" will be returned
            in <paramref name="value"/> and <see cref="F:Microsoft.CodeAnalysis.CodeStyle.NotificationOption2.Error"/> will be returned
            in <paramref name="notification"/>.  Note that users are allowed to not provide
            a NotificationOption, so <paramref name="notification"/> will default to <paramref name="defaultNotification"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.TrueWithSilentEnforcement">
            <remarks>
            When user preferences are not yet set for a style, we fall back to the default value.
            One such default(s), is that the feature is turned on, so that codegen consumes it,
            but with silent enforcement, so that the user is not prompted about their usage.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyFieldAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in field access expressions.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyPropertyAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in property access expressions.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyMethodAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in method access expressions.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.QualifyEventAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in event access expressions.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.PreferIntrinsicPredefinedTypeKeywordInDeclaration">
            <summary>
            This option says if we should prefer keyword for Intrinsic Predefined Types in Declarations
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.CodeStyleOptions2.PreferIntrinsicPredefinedTypeKeywordInMemberAccess">
            <summary>
            This option says if we should prefer keyword for Intrinsic Predefined Types in Member Access Expression
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.ExpressionBodyPreference">
            <remarks>
            Note: the order of this enum is important.  We originally only supported two values,
            and we encoded this as a bool with 'true = WhenPossible' and 'false = never'.  To
            preserve compatibility we map the false value to 0 and the true value to 1.  All new
            values go after these. 
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NamespaceDeclarationPreference.BlockScoped">
            <summary>
            Prefer <c>namespace N { }</c>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.NamespaceDeclarationPreference.FileScoped">
            <summary>
            Prefer <c>namespace N;</c>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.UnusedParametersPreference">
            <summary>
            Preferences for flagging unused parameters.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeStyle.UnusedValuePreference">
            <summary>
            Assignment preference for unused values from expression statements and assignments.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DesignerAttribute.DesignerAttributeData">
            <summary>
            Serialization typed used to pass information to/from OOP and VS.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DesignerAttribute.DesignerAttributeData.Category">
            <summary>
            The category specified in a <c>[DesignerCategory("...")]</c> attribute.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DesignerAttribute.DesignerAttributeData.DocumentId">
            <summary>
            The document this <see cref="F:Microsoft.CodeAnalysis.DesignerAttribute.DesignerAttributeData.Category"/> applies to.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DesignerAttribute.DesignerAttributeData.FilePath">
            <summary>
            Path for this <see cref="F:Microsoft.CodeAnalysis.DesignerAttribute.DesignerAttributeData.DocumentId"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DesignerAttribute.IDesignerAttributeListener">
            <summary>
            Callback the host (VS) passes to the OOP service to allow it to send batch notifications
            about designer attribute info.  There is no guarantee that the host will have done anything
            with this data when the callback returns, only that it will try to inform the project system
            about the designer attribute info in the future.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DesignerAttribute.IRemoteDesignerAttributeDiscoveryService">
            <summary>
            Interface to allow host (VS) to inform the OOP service to start incrementally analyzing and
            reporting results back to the host.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AnalysisKind">
            <summary>
            enum for each analysis kind.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache">
            <summary>
            Provides and caches information about diagnostic analyzers such as <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>, 
            <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> instance, <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s.
            Thread-safe.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache._descriptorsInfo">
            <summary>
            Supported descriptors of each <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>. 
            </summary>
            <remarks>
            Holds on <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> instances weakly so that we don't keep analyzers coming from package references alive.
            They need to be released when the project stops referencing the analyzer.
            
            The purpose of this map is to avoid multiple calls to <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics"/> that might return different values
            (they should not but we need a guarantee to function correctly).
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Returns <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics"/> of given <paramref name="analyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache.GetNonCompilationEndDiagnosticDescriptors(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Returns <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics"/> of given <paramref name="analyzer"/>
            that are not compilation end descriptors.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache.IsCompilationEndAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Returns true if given <paramref name="analyzer"/> has a compilation end descriptor
            that is reported in the Compilation end action.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache.IsTelemetryCollectionAllowed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Determine whether collection of telemetry is allowed for given <paramref name="analyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache.IsAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Project)">
            <summary>
            Return true if the given <paramref name="analyzer"/> is suppressed for the given project.
            NOTE: This API is intended to be used only for performance optimization.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.Language">
            <summary>
            Language name (<see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>) or null if the diagnostic is not associated with source code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.PropertiesForBuildDiagnostic">
            <summary>
            Properties for a diagnostic generated by an explicit build.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.GetTextSpan">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> if it exists, throws otherwise.
            
            Some diagnostic data such as those created from build have original line/column but not <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>.
            In those cases use <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.GetTextSpan(Microsoft.CodeAnalysis.Diagnostics.DiagnosticDataLocation,Microsoft.CodeAnalysis.Text.SourceText)"/> method instead to calculate span from original line/column.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.TryCreate(Microsoft.CodeAnalysis.DiagnosticDescriptor,System.String[],Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Diagnostics.DiagnosticData@)">
            <summary>
            Create a host/VS specific diagnostic with the given descriptor and message arguments for the given project.
            Note that diagnostic created through this API cannot be suppressed with in-source suppression due to performance reasons (see the PERF remark below for details).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.IsBuildDiagnostic">
            <summary>
            Returns true if the diagnostic was generated by an explicit build, not live analysis.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticDataLocation.MappedFilePath">
            <summary>
            Null if path is not mapped and <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticDataLocation.OriginalFilePath"/> contains the actual path.
            Note that the value might be a relative path. In that case <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticDataLocation.OriginalFilePath"/> should be used
            as a base path for path resolution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticMode.Push">
            <summary>
            Push diagnostics.  Roslyn/LSP is responsible for aggregating internal diagnostic notifications and pushing
            those out to either VS or the LSP push diagnostic system.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticMode.Pull">
            <summary>
            Pull diagnostics.  Roslyn/LSP is responsible for aggregating internal diagnostic notifications and
            responding to LSP pull requests for them.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticMode.Default">
            <summary>
            Default mode - when the option is set to default we use a feature flag to determine if we're
            is in <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticMode.Push"/> or <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticMode.Pull"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisScope">
            <summary>
            Scope for analyzing a document for computing local syntax/semantic diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisScope.AdditionalFile">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.AdditionalText"/> corresponding to the <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisScope.TextDocument"/>.
            NOTE: Throws an exception if <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisScope.TextDocument"/> is not an <see cref="T:Microsoft.CodeAnalysis.AdditionalDocument"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer">
            <summary>
            IDE-only document based diagnostic analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <summary>
            it is not allowed one to implement both DocumentDiagnosticAnalzyer and DiagnosticAnalyzer
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer.Priority">
            <summary>
            This lets vsix installed <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer"/> or <see cref="T:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer"/> to
            specify priority of the analyzer. Regular <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> always comes before those 2 different types.
            Priority is ascending order and this only works on HostDiagnosticAnalyzer meaning Vsix installed analyzers in VS.
            This is to support partner teams (such as typescript and F#) who want to order their analyzer's execution order.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Extensions.Filter(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic},System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Filters out the diagnostics with the specified <paramref name="diagnosticIdsToFilter"/>.
            If <paramref name="includeSuppressedDiagnostics"/> is false, filters out suppressed diagnostics.
            If <paramref name="filterSpan"/> is non-null, filters out diagnostics with location outside this span.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.FileContentLoadAnalyzer">
            <summary>
            A dummy singleton analyzer. Its only purpose is to represent file content load failures in maps that are keyed by <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers._hostAnalyzerReferencesMap">
            <summary>
            Key is <see cref="P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Id"/>.
            
            We use the key to de-duplicate analyzer references if they are referenced from multiple places.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers._hostDiagnosticAnalyzersPerLanguageMap">
            <summary>
            Key is the language the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> supports and key for the second map is analyzer reference identity and
            <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> for that assembly reference.
            
            Entry will be lazily filled in.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers._lazyHostDiagnosticAnalyzersPerReferenceMap">
            <summary>
            Key is <see cref="P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Id"/>.
            
            Value is set of <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> that belong to the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>.
            
            We populate it lazily. otherwise, we will bring in all analyzers preemptively
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers._compilerDiagnosticAnalyzerMap">
            <summary>
            Maps <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/> to compiler diagnostic analyzers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers._skippedHostAnalyzers">
            <summary>
            Maps list of analyzer references and <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/> to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.SkippedHostAnalyzersInfo"/>.
            </summary>
            <remarks>
            TODO: https://github.com/dotnet/roslyn/issues/42848
            It is quite common for multiple projects to have the same set of analyzer references, yet we will create
            multiple instances of the analyzer list and thus not share the info.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers.HostAnalyzerReferences">
            <summary>
            List of host <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>s
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers.GetOrCreateHostDiagnosticAnalyzersPerReference(System.String)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="language"/>
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers.CreateDiagnosticAnalyzersPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="project"/> that
            includes both host and project analyzers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers.CreateProjectDiagnosticAnalyzersPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="project"/> that
            has only project analyzers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzers.GetCompilerDiagnosticAnalyzer(System.String)">
            <summary>
            Return compiler <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> for the given language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IWorkspaceVenusSpanMappingService.GetAdjustedDiagnosticSpan(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.Text.TextSpan@,Microsoft.CodeAnalysis.FileLinePositionSpan@,Microsoft.CodeAnalysis.FileLinePositionSpan@)">
            <summary>
            Given the original location of the diagnostic and the mapped line info based on line directives in source,
            apply any necessary adjustments to these diagnostic spans and returns the effective source span for the diagnostic.
            For example, for Venus, we might change the mapped location to be the location in the primary buffer.
            Additionally, if the secondary buffer location is outside visible user code, then the original location is also adjusted to be within visible user code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer">
            <summary>
            IDE-only project based diagnostic analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <summary>
            it is not allowed one to implement both ProjectDiagnosticAnalzyer and DiagnosticAnalyzer
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer.Priority">
            <summary>
            This lets vsix installed <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer"/> or <see cref="T:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer"/> to
            specify priority of the analyzer. Regular <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> always comes before those 2 different types.
            Priority is ascending order and this only works on HostDiagnosticAnalyzer meaning Vsix installed analyzers in VS.
            This is to support partner teams (such as typescript and F#) who want to order their analyzer's execution order.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.SkippedHostAnalyzersInfo">
            <summary>
            Information about analyzers supplied by the host (IDE), which can be completely skipped or its diagnostics partially filtered for the corresponding project
            as project analyzer reference (from NuGet) has equivalent analyzer(s) reporting all or subset of diagnostic IDs reported by these analyzers.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.SkippedHostAnalyzersInfo.SkippedAnalyzers">
            <summary>
            Analyzers supplied by the host (IDE), which can be completely skipped for the corresponding project
            as project analyzer reference has equivalent analyzer(s) reporting all diagnostic IDs reported by these analyzers.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.SkippedHostAnalyzersInfo.FilteredDiagnosticIdsForAnalyzers">
            <summary>
            Analyzer to diagnostic ID map, such that the diagnostics of those IDs reported by the analyzer should be filtered
            for a correspndiong project.
            This includes the analyzers supplied by the host (IDE), such that project's analyzer references (from NuGet)
            has equivalent analyzer(s) reporting subset of diagnostic IDs reported by these analyzers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.WellKnownDiagnosticPropertyNames.Origin">
            <summary>
            Predefined name of diagnostic property which shows in what compilation stage the diagnostic is created. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AdditionalTextWithState">
            <summary>
            An implementation of <see cref="T:Microsoft.CodeAnalysis.AdditionalText"/> for the compiler that wraps a <see cref="T:Microsoft.CodeAnalysis.AdditionalDocumentState"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.AdditionalTextWithState.#ctor(Microsoft.CodeAnalysis.AdditionalDocumentState)">
            <summary>
            Create a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> from a <see cref="T:Microsoft.CodeAnalysis.AdditionalDocumentState"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.AdditionalTextWithState.Path">
            <summary>
            Resolved path of the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.AdditionalTextWithState.GetText(System.Threading.CancellationToken)">
            <summary>
            Retrieves a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> with the contents of this file.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IPragmaSuppressionsAnalyzer">
            <summary>
            Special IDE analyzer to flag unnecessary inline source suppressions,
            i.e. pragma and local SuppressMessageAttribute suppressions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IPragmaSuppressionsAnalyzer.AnalyzeAsync(Microsoft.CodeAnalysis.SemanticModel,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,System.Func{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DiagnosticDescriptor}},System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Analyzes the tree, with an optional span scope, and report unnecessary inline suppressions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticSeverityExtensions.ToReportDiagnostic(Microsoft.CodeAnalysis.DiagnosticSeverity)">
            <summary>
            Returns the equivalent <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> for a <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/> value.
            </summary>
            <param name="diagnosticSeverity">The <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/> value.</param>
            <returns>
            The equivalent <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> for the <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/> value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If <paramref name="diagnosticSeverity"/> is not one of the expected values.
            </exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.ReportDiagnosticExtensions.ToDiagnosticSeverity(Microsoft.CodeAnalysis.ReportDiagnostic)">
            <summary>
            Returns the equivalent <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/> for a <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> value.
            </summary>
            <param name="reportDiagnostic">The <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> value.</param>
            <returns>
            The equivalent <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/> for a <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> value; otherwise,
            <see langword="null"/> if <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity"/> does not contain a direct equivalent for
            <paramref name="reportDiagnostic"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If <paramref name="reportDiagnostic"/> is not one of the expected values.
            </exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.ReportDiagnosticExtensions.WithDefaultSeverity(Microsoft.CodeAnalysis.ReportDiagnostic,Microsoft.CodeAnalysis.DiagnosticSeverity)">
            <summary>
            Applies a default severity to a <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> value.
            </summary>
            <param name="reportDiagnostic">The <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic"/> value.</param>
            <param name="defaultSeverity">The default severity.</param>
            <returns>
            <para>If <paramref name="reportDiagnostic"/> is <see cref="F:Microsoft.CodeAnalysis.ReportDiagnostic.Default"/>, returns
            <paramref name="defaultSeverity"/>.</para>
            <para>-or-</para>
            <para>Otherwise, returns <paramref name="reportDiagnostic"/> if it has a non-default value.</para>
            </returns>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.Capitalization.PascalCase">
            <summary>
            Each word is capitalized
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.Capitalization.CamelCase">
            <summary>
            Every word except the first word is capitalized
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.Capitalization.FirstUpper">
            <summary>
            Only the first word is capitalized
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.Capitalization.AllUpper">
            <summary>
            Every character is capitalized
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.Capitalization.AllLower">
            <summary>
            No characters are capitalized
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.EditorConfigNamingStyleParser._cache">
            <remarks>
            The dictionary we get from the VS editorconfig API uses the same dictionary object if there are no changes, so we can cache based on dictionary
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.EditorConfigNamingStyleParser.NamingRuleSubsetComparer.FirstIsSubset(Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.NamingRule@,Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.NamingRule@)">
            <summary>
            Determines if <paramref name="x"/> matches a subset of the symbols matched by <paramref name="y"/>. The
            implementation determines which properties of <see cref="T:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.NamingRule"/> are considered for this
            evaluation. The subset relation does not necessarily indicate a proper subset.
            </summary>
            <param name="x">The first naming rule.</param>
            <param name="y">The second naming rule.</param>
            <returns><see langword="true"/> if <paramref name="x"/> matches a subset of the symbols matched by
            <paramref name="y"/> on some implementation-defined properties; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.NamingStyleRules.IsInterfaceImplementation(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            This does not handle the case where a method in a base type implicitly implements an
            interface method on behalf of one of its derived types.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.NamingStylePreferences">
            <summary>
            Contains all information related to Naming Style Preferences.
            1. Symbol Specifications
            2. Name Style
            3. Naming Rule (points to Symbol Specification IDs)
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.None">
            <summary>
            Invalid value, analyzer must support at least one or more of the subsequent analysis categories.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SyntaxTreeWithoutSemanticsAnalysis">
            <summary>
            Analyzer reports syntax diagnostics (i.e. registers a SyntaxTree action).
            Note: an <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> that uses this will not work properly if
            it registers a <see cref="M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])"/> and then ends
            up needing to use the <see cref="P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel"/>.  If a
            <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> is needed, use <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticSpanAnalysis"/> or
            <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticDocumentAnalysis"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticSpanAnalysis">
            <summary>
            Analyzer reports semantic diagnostics and also supports incremental span based method body analysis.
            An analyzer can support incremental method body analysis if edits within a method body only affect the diagnostics reported by the analyzer on the edited method body.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticDocumentAnalysis">
            <summary>
            Analyzer reports semantic diagnostics but doesn't support incremental span based method body analysis.
            It needs to re-analyze the whole document for reporting semantic diagnostics even for method body editing scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.ProjectAnalysis">
            <summary>
            Analyzer reports project diagnostics (i.e. registers a Compilation action and/or Compilation end action diagnostics).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer">
            <summary>
            This interface is a marker for all the analyzers that are built in.
            We will record non-fatal-watson if any analyzer with this interface throws an exception.
            
            also, built in analyzer can do things that third-party analyzer (command line analyzer) can't do
            such as reporting all diagnostic descriptors as hidden when it can return different severity on runtime.
            
            or reporting diagnostics ID that is not reported by SupportedDiagnostics.
            
            this interface is used by the engine to allow this special behavior over command line analyzers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer.GetAnalyzerCategory">
            <summary>
            This category will be used to run analyzer more efficiently by restricting scope of analysis
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer.OpenFileOnly(Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            This indicates whether this built-in analyzer will only run on opened files.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer.RequestPriority">
            <summary>
            What priority this provider should run at.  This value is not allowed to be <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority.None"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService">
            <summary>
            Temporarily stores text and streams in memory mapped files.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService.SingleFileThreshold">
            <summary>
            The maximum size in bytes of a single storage unit in a memory mapped file which is shared with other
            storage units.
            </summary>
            <remarks>
            <para>This value was arbitrarily chosen and appears to work well. Can be changed if data suggests
            something better.</para>
            </remarks>
            <seealso cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._weakFileReference"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService.MultiFileBlockSize">
            <summary>
            The size in bytes of a memory mapped file created to store multiple temporary objects.
            </summary>
            <remarks>
            <para>This value was arbitrarily chosen and appears to work well. Can be changed if data suggests
            something better.</para>
            </remarks>
            <seealso cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._weakFileReference"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._gate">
            <summary>
            The synchronization object for accessing the memory mapped file related fields (indicated in the remarks
            of each field).
            </summary>
            <remarks>
            <para>PERF DEV NOTE: A concurrent (but complex) implementation of this type with identical semantics is
            available in source control history. The use of exclusive locks was not causing any measurable
            performance overhead even on 28-thread machines at the time this was written.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._weakFileReference">
            <summary>
            The most recent memory mapped file for creating multiple storage units. It will be used via bump-pointer
            allocation until space is no longer available in it.
            </summary>
            <remarks>
            <para>Access should be synchronized on <see cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._gate"/>.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._name">
            <summary>The name of the current memory mapped file for multiple storage units.</summary>
            <remarks>
            <para>Access should be synchronized on <see cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._gate"/>.</para>
            </remarks>
            <seealso cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._weakFileReference"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._fileSize">
            <summary>The total size of the current memory mapped file for multiple storage units.</summary>
            <remarks>
            <para>Access should be synchronized on <see cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._gate"/>.</para>
            </remarks>
            <seealso cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._weakFileReference"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._offset">
            <summary>
            The offset into the current memory mapped file where the next storage unit can be held.
            </summary>
            <remarks>
            <para>Access should be synchronized on <see cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._gate"/>.</para>
            </remarks>
            <seealso cref="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService._weakFileReference"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.TemporaryStorageService.CreateTemporaryStorage(System.Int64)">
            <summary>
            Allocate shared storage of a specified size.
            </summary>
            <remarks>
            <para>"Small" requests are fulfilled from oversized memory mapped files which support several individual
            storage units. Larger requests are allocated in their own memory mapped files.</para>
            </remarks>
            <param name="size">The size of the shared storage block to allocate.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo"/> describing the allocated block.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo">
             <summary>
             Our own abstraction on top of memory map file so that we can have shared views over mmf files. 
             Otherwise, each view has minimum size of 64K due to requirement forced by windows.
             
             most of our view will have short lifetime, but there are cases where view might live a bit longer such as
             metadata dll shadow copy. shared view will help those cases.
             </summary>
             <remarks>
             <para>Instances of this class should be disposed when they are no longer needed. After disposing this
             instance, it should no longer be used. However, streams obtained through <see cref="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.CreateReadableStream"/>
             or <see cref="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.CreateWritableStream"/> will not be invalidated until they are disposed independently (which
             may occur before or after the <see cref="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo"/> is disposed.</para>
            
             <para>This class and its nested types have familiar APIs and predictable behavior when used in other code,
             but are non-trivial to work on. The implementations of <see cref="T:System.IDisposable"/> adhere to the best
             practices described in
             <see href="http://joeduffyblog.com/2005/04/08/dg-update-dispose-finalization-and-resource-management/">DG
             Update: Dispose, Finalization, and Resource Management</see>. Additional notes regarding operating system
             behavior leveraged for efficiency are given in comments.</para>
             </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo._memoryMappedFile">
            <summary>
            The memory mapped file.
            </summary>
            <remarks>
            <para>It is possible for the file to be disposed prior to the view and/or the streams which use it.
            However, the operating system does not actually close the views which are in use until the file handles
            are closed as well, even if the file is disposed first.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo._weakReadAccessor">
             <summary>
             A weak reference to a read-only view for the memory mapped file.
             </summary>
             <remarks>
             <para>This holds a weak counted reference to current <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"/>, which
             allows additional accessors for the same address space to be obtained up until the point when no
             external code is using it. When the memory is no longer being used by any
             <see cref="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.SharedReadableStream"/> objects, the view of the memory mapped file is unmapped, making the
             process address space it previously claimed available for other purposes. If/when it is needed again, a
             new view is created.</para>
            
             <para>This view is read-only, so it is only used by <see cref="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.CreateReadableStream"/>.</para>
             </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.Name">
            <summary>
            The name of the memory mapped file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.Offset">
            <summary>
            The offset into the memory mapped file of the region described by the current
            <see cref="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.Size">
            <summary>
            The size of the region of the memory mapped file described by the current
            <see cref="T:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.CreateReadableStream">
            <summary>
            Caller is responsible for disposing the returned stream.
            multiple call of this will not increase VM.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.CreateWritableStream">
            <summary>
            Caller is responsible for disposing the returned stream.
            multiple call of this will increase VM.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.RunWithCompactingGCFallback``2(System.Func{``0,``1},``0)">
            <summary>
            Run a function which may fail with an <see cref="T:System.IO.IOException"/> if not enough memory is available to
            satisfy the request. In this case, a full compacting GC pass is forced and the function is attempted
            again.
            </summary>
            <remarks>
            <para><see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)"/> and
            <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)"/> will use a native
            memory map, which can't trigger a GC. In this case, we'd otherwise crash with OOM, so we don't care
            about creating a UI delay with a full forced compacting GC. If it crashes the second try, it means we're
            legitimately out of resources.</para>
            </remarks>
            <typeparam name="TArg">The type of argument to pass to the callback.</typeparam>
            <typeparam name="T">The type returned by the function.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="argument">The argument to pass to the function.</param>
            <returns>The value returned by <paramref name="function"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.TemporaryStorageServiceFactory.MemoryMappedInfo.SharedReadableStream.GetPointer">
            <summary>
            Get underlying native memory directly.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IProjectCacheService">
            <summary>
            Service used to enable recoverable object caches for a given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IProjectCacheHostService">
            <summary>
            Caches recoverable objects
            
            Compilations are put into a conditional weak table.
            
            Recoverable SyntaxTrees implement <see cref="T:Microsoft.CodeAnalysis.Host.ICachedObjectOwner"/> since they are numerous
            and putting them into a conditional weak table greatly increases GC costs in
            clr.dll!PromoteDependentHandle.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IProjectCacheHostService.CacheObjectIfCachingEnabledForKey``1(Microsoft.CodeAnalysis.ProjectId,System.Object,``0)">
            <summary>
            If caching is enabled for <see cref="T:Microsoft.CodeAnalysis.ProjectId"/> key, the instance is added to 
            a conditional weak table.  
            
            It will not be collected until either caching is disabled for the project
            or the owner object is collected.
            
            If caching is not enabled for the project, the instance is added to a fixed-size
            cache.
            </summary>
            <returns>The instance passed in is always returned</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IProjectCacheHostService.CacheObjectIfCachingEnabledForKey``1(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Host.ICachedObjectOwner,``0)">
            <summary>
            If caching is enabled for <see cref="T:Microsoft.CodeAnalysis.ProjectId"/> key, <see cref="P:Microsoft.CodeAnalysis.Host.ICachedObjectOwner.CachedObject"/>
            will be set to instance.
            </summary>
            <returns>The instance passed in is always returned</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IWorkspaceCacheService">
            <summary>
            Workspace service for cache implementations.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Host.IWorkspaceCacheService.CacheFlushRequested">
            <summary>
            May be raised by a Workspace host when available memory is getting low in order to request
            that caches be flushed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.DocumentPropertiesService">
            <summary>
            Extensible document properties specified via a document service.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.DocumentPropertiesService.DiagnosticsLspClientName">
            <summary>
            The LSP client name that should get the diagnostics produced by this document; any other source
            will not show these diagnostics.  For example, razor uses this to exclude diagnostics from the error list
            so that they can handle the final display.
            If null, the diagnostics do not have this special handling.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IDocumentExcerptService">
            <summary>
            excerpt some part of <see cref="T:Microsoft.CodeAnalysis.Document"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IDocumentExcerptService.TryExcerptAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Host.ExcerptMode,System.Threading.CancellationToken)">
            <summary>
            return <see cref="T:Microsoft.CodeAnalysis.Host.ExcerptResult"/> of given <see cref="T:Microsoft.CodeAnalysis.Document"/> and <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>
            
            the result might not be an exact copy of the given source or contains more then given span
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ExcerptMode">
            <summary>
            this mode shows intention not actual behavior. it is up to implementation how to interpret the intention.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ExcerptResult">
            <summary>
            Result of excerpt
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Content">
            <summary>
            excerpt content
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.ExcerptResult.MappedSpan">
            <summary>
            span on <see cref="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Content"/> that given <see cref="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Span"/> got mapped to
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.ExcerptResult.ClassifiedSpans">
            <summary>
            classification information on the <see cref="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Content"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Document">
            <summary>
            <see cref="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Document"/> this excerpt is from
            
            should be same document in <see cref="M:Microsoft.CodeAnalysis.Host.IDocumentExcerptService.TryExcerptAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Host.ExcerptMode,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Span">
            <summary>
            span on <see cref="F:Microsoft.CodeAnalysis.Host.ExcerptResult.Document"/> this excerpt is from
            
            should be same text span in <see cref="M:Microsoft.CodeAnalysis.Host.IDocumentExcerptService.TryExcerptAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Host.ExcerptMode,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IDocumentOperationService">
            <summary>
            TODO: Merge into <see cref="T:Microsoft.CodeAnalysis.Host.DocumentPropertiesService"/>.
            Used by Razor via IVT.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.IDocumentOperationService.CanApplyChange">
            <summary>
            document version of <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)"/>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.IDocumentOperationService.SupportDiagnostics">
            <summary>
            indicates whether this document supports diagnostics or not
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IDocumentService">
            <summary>
            Empty interface just to mark document services.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IDocumentServiceProvider.GetService``1">
            <summary>
            Gets a document specific service provided by the host identified by the service type. 
            If the host does not provide the service, this method returns null.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ISpanMappingService">
             <summary>
             Map spans in a document to other spans even in other document
            
             this will be used by various features if provided to convert span in one document to other spans.
             
             for example, it is used to show spans users expect in a razor file rather than spans in 
             auto generated file that is implementation detail or navigate to the right place rather 
             than the generated file and etc.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.ISpanMappingService.SupportsMappingImportDirectives">
            <summary>
            Whether this span mapping service can handle mapping import directives added to a document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ISpanMappingService.MapSpansAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Map spans in the document to more appropriate locations
            
            in current design, this can NOT map a span to a span that is not backed by a file.
            for example, roslyn supports someone to have a document that is not backed by a file. and current design doesn't allow
            such document to be returned from this API
            for example, span on razor secondary buffer document in roslyn solution mapped to a span on razor cshtml file is possible but
            a span on razor cshtml file to a span on secondary buffer document is not possible since secondary buffer document is not backed by a file
            </summary>
            <param name="document">Document given spans belong to</param>
            <param name="spans">Spans in the document</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Return mapped span. order of result should be same as the given span</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.MappedSpanResult">
            <summary>
            Result of span mapping
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.MappedSpanResult.FilePath">
            <summary>
            Path to mapped file
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.MappedSpanResult.LinePositionSpan">
            <summary>
            LinePosition representation of the Span
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.MappedSpanResult.Span">
            <summary>
            Mapped span
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.EventListenerMetadata">
            <summary>
            MEF metadata class used to find exports declared for a specific <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.EventListenerTracker`1">
            <summary>
            helper type to track whether <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener"/> has been initialized.
            
            currently, this helper only supports services whose lifetime is same as Host (ex, VS)
            </summary>
            <typeparam name="TService">TService for <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener`1"/></typeparam>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.EventListenerTracker`1._eventListenerInitialized">
            <summary>
            Workspace kind this event listener is initialized for
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ExportEventListenerAttribute.#ctor(System.String,System.String[])">
            <summary>
            MEF export attribute for <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener"/>
            </summary>
            <param name="service">
            one of values from <see cref="T:Microsoft.CodeAnalysis.Host.WellKnownEventListeners"/> indicating which service this event listener is for
            </param>
            <param name="workspaceKinds">indicate which workspace kind this event listener is for</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IEventListener">
            <summary>
            provide a way for features to lazily subscribe to a service event for particular workspace
            
            see <see cref="T:Microsoft.CodeAnalysis.Host.WellKnownEventListeners"/> for supported services
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IEventListenerStoppable">
            <summary>
            provide a way for <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener"/> to mark it as stoppable
            
            for example, if the service <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener"/> is used for is a disposable
            service, the service can call Stop when the service go away
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IEventListener`1">
            <summary>
            provide a way for features to lazily subscribe to a service event for particular workspace
            
            see <see cref="T:Microsoft.CodeAnalysis.Host.WellKnownEventListeners"/> for supported services
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IWorkspaceEventListenerService">
            <summary>
            Ensure <see cref="M:Microsoft.CodeAnalysis.Host.IEventListener`1.StartListening(Microsoft.CodeAnalysis.Workspace,`0)"/> is called for the workspace
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.WellKnownEventListeners">
            <summary>
            list of well known <see cref="T:Microsoft.CodeAnalysis.Host.IEventListener"/> types
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.HostLanguageServices">
            <summary>
            Per language services provided by the host environment.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostLanguageServices.WorkspaceServices">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Host.HostWorkspaceServices"/> that originated this language service.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostLanguageServices.Language">
            <summary>
            The name of the language
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostLanguageServices.GetService``1">
            <summary>
            Gets a language specific service provided by the host identified by the service type. 
            If the host does not provide the service, this method returns null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostLanguageServices.GetRequiredService``1">
            <summary>
            Gets a language specific service provided by the host identified by the service type. 
            If the host does not provide the service, this method returns throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostLanguageServices.CompilationFactory">
            <summary>
            A factory for creating compilations instances.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.HostServices">
            <summary>
            Services provided by the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostServices.CreateWorkspaceServices(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Creates a new workspace service. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.HostWorkspaceServices">
            <summary>
            Per workspace services provided by the host environment.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.HostServices">
            <summary>
            The host services this workspace services originated from.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.Workspace">
            <summary>
            The workspace corresponding to this workspace services instantiation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetService``1">
            <summary>
            Gets a workspace specific service provided by the host identified by the service type. 
            If the host does not provide the service, this method returns null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetRequiredService``1">
            <summary>
            Gets a workspace specific service provided by the host identified by the service type. 
            If the host does not provide the service, this method throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The host does not provide the service.</exception>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.PersistentStorage">
            <summary>
            Obsolete.  Roslyn no longer supports a mechanism to perform arbitrary persistence of data.  If such functionality
            is needed, consumers are resonsible for providing it themselves with whatever semantics are needed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.TemporaryStorage">
            <summary>
            A service for storing information in a temporary location that only lasts for the duration of the process.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.TextFactory">
            <summary>
            A factory that constructs <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.SupportedLanguages">
            <summary>
            A list of language names for supported language services.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.IsSupported(System.String)">
            <summary>
            Returns true if the language is supported.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetLanguageServices(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Host.HostLanguageServices"/> for the language name.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if the language isn't supported.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.FindLanguageServices``1(Microsoft.CodeAnalysis.Host.HostWorkspaceServices.MetadataFilter)">
            <summary>
            Finds all language services of the corresponding type across all supported languages that match the filter criteria.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ILanguageService">
            <summary>
            Empty interface just to mark language services.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IWorkspaceService">
            <summary>
            Empty interface just to mark workspace services.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ExportDynamicFileInfoProviderAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider"/> implementation for MEF
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportDynamicFileInfoProviderAttribute.Extensions">
            <summary>
            file extensions this <see cref="T:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider"/> can handle such as cshtml
            
            match will be done by <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.Host.ILanguageService"/> implementation for inclusion in a MEF-based workspace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.ServiceType">
            <summary>
            The assembly qualified name of the service's type.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.Language">
            <summary>
            The language that the service is target for; LanguageNames.CSharp, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.Layer">
            <summary>
            The layer that the service is specified for; ServiceLayer.Default, etc.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Declares a <see cref="T:Microsoft.CodeAnalysis.Host.ILanguageService"/> implementation for inclusion in a MEF-based workspace.
            </summary>
            <param name="type">The type that will be used to retrieve the service from a <see cref="T:Microsoft.CodeAnalysis.Host.HostLanguageServices"/>.</param>
            <param name="language">The language that the service is target for; LanguageNames.CSharp, etc.</param>
            <param name="layer">The layer that the service is specified for; ServiceLayer.Default, etc.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory"/> implementation for inclusion in a MEF-based workspace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.ServiceType">
            <summary>
            The assembly qualified name of the service's type.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.Language">
            <summary>
            The language that the service is target for; LanguageNames.CSharp, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.Layer">
            <summary>
            The layer that the service is specified for; ServiceLayer.Default, etc.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Declares a <see cref="T:Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory"/> implementation for inclusion in a MEF-based workspace.
            </summary>
            <param name="type">The type that will be used to retrieve the service from a <see cref="T:Microsoft.CodeAnalysis.Host.HostLanguageServices"/>.</param>
            <param name="language">The language that the service is target for; LanguageNames.CSharp, etc.</param>
            <param name="layer">The layer that the service is specified for; ServiceLayer.Default, etc.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/> implementation for inclusion in a MEF-based workspace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute.ServiceType">
            <summary>
            The assembly qualified name of the service's type.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute.Layer">
            <summary>
            The layer that the service is specified for; ServiceLayer.Default, etc.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Declares a <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/> implementation for inclusion in a MEF-based workspace.
            </summary>
            <param name="serviceType">The type that will be used to retrieve the service from a <see cref="T:Microsoft.CodeAnalysis.Host.HostWorkspaceServices"/>.</param>
            <param name="layer">The layer that the service is specified for; <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default" />, etc.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory"/> implementation for inclusion in a MEF-based workspace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute.ServiceType">
            <summary>
            The assembly qualified name of the service's type.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute.Layer">
            <summary>
            The layer that the service is specified for; ServiceLayer.Default, etc.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Declares a <see cref="T:Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory"/> implementation for inclusion in a MEF-based workspace.
            </summary>
            <param name="serviceType">The type that will be used to retrieve the service from a <see cref="T:Microsoft.CodeAnalysis.Host.HostWorkspaceServices"/>.</param>
            <param name="layer">The layer or workspace kind that the service is specified for; <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default" />, <see cref="F:Microsoft.CodeAnalysis.WorkspaceKind.MiscellaneousFiles" />etc.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory">
            <summary>
            A factory that creates instances of a specific <see cref="T:Microsoft.CodeAnalysis.Host.ILanguageService"/>.
            
            Implement a <see cref="T:Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory"/> when you want to provide <see cref="T:Microsoft.CodeAnalysis.Host.ILanguageService"/> instances that use other services.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory.CreateLanguageService(Microsoft.CodeAnalysis.Host.HostLanguageServices)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Host.ILanguageService"/> instance.
            </summary>
            <param name="languageServices">The <see cref="T:Microsoft.CodeAnalysis.Host.HostLanguageServices"/> that can be used to access other services.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory">
            <summary>
            A factory that creates instances of a specific <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/>.
            
            Implement a <see cref="T:Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory"/> when you want to provide <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/> instances that use other services.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory.CreateService(Microsoft.CodeAnalysis.Host.HostWorkspaceServices)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/> instance.
            Returns <c>null</c> if the service is not applicable to the given workspace.
            </summary>
            <param name="workspaceServices">The <see cref="T:Microsoft.CodeAnalysis.Host.HostWorkspaceServices"/> that can be used to access other services.</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.Mef.MefHostServices.s_creationHook">
            <summary>
            This delegate allows test code to override the behavior of <see cref="M:Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/>.
            </summary>
            <seealso cref="M:Microsoft.CodeAnalysis.Host.Mef.MefHostServices.TestAccessor.HookServiceCreation(Microsoft.CodeAnalysis.Host.Mef.MefHostServices.CreationHook)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.Mef.MefHostServices.TestAccessor.HookServiceCreation(Microsoft.CodeAnalysis.Host.Mef.MefHostServices.CreationHook)">
            <summary>
            Injects replacement behavior for the <see cref="M:Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> method.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer">
            <summary>
            The layer of an exported service.  
            
            If there are multiple definitions of a service, the <see cref="T:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer"/> is used to determine which is used.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Test">
            <summary>
            Service layer that overrides <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Editor"/>, <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Desktop"/> and <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Host">
            <summary>
            Service layer that overrides <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Editor"/>, <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Desktop"/> and <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Editor">
            <summary>
            Service layer that overrides <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Desktop" /> and <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Desktop">
            <summary>
            Service layer that overrides <see cref="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default">
            <summary>
            The base service layer.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.FileExtensionsMetadata">
            <summary>
            MEF metadata class used to find exports declared for a specific file extensions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ILanguageMetadata">
            <summary>
            This interface is provided purely to enable some shared logic that handles multiple kinds of 
            metadata that share the Language property. It should not be used to find exports via MEF,
            use LanguageMetadata instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.ILanguagesMetadata">
            <summary>
            This interface is provided purely to enable some shared logic that handles multiple kinds of 
            metadata that share the Languages property. It should not be used to find exports via MEF,
            use LanguageMetadata instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.LanguageMetadata">
            <summary>
            MEF metadata class used to find exports declared for a specific language.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.LanguageServiceMetadata">
            <summary>
            MEF metadata class used for finding <see cref="T:Microsoft.CodeAnalysis.Host.ILanguageService"/> and <see cref="T:Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory"/> exports.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.WorkspaceKindMetadata">
            <summary>
            MEF metadata class used to find exports declared for a specific <see cref="T:Microsoft.CodeAnalysis.WorkspaceKind"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.Mef.WorkspaceServiceMetadata">
            <summary>
            MEF metadata class used for finding <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/> and <see cref="T:Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory"/> exports.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IFrameworkAssemblyPathResolver">
            <summary>
            Provides a way to map from an assembly name to the actual path of the .NET Framework 
            assembly with that name in the context of a specified project.  For example, if the 
            assembly name is "System.Data" then a project targeting .NET 2.0 would resolve this
            to a different path than a project targeting .NET 4.5.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IFrameworkAssemblyPathResolver.ResolveAssemblyPath(Microsoft.CodeAnalysis.ProjectId,System.String,System.String)">
            <summary>
            Returns null if the assembly name could not be resolved.
            </summary>
            <param name="fullyQualifiedName">An optional type name for a type that must
            exist in the assembly.</param>
            <param name="projectId">The project context to search within.</param>
            <param name="assemblyName">The name of the assembly to try to resolve.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.MetadataReferenceCache">
            <summary>
            A cache for metadata references.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.MetadataReferenceCache.ReferenceSet">
            <summary>
            A collection of references to the same underlying metadata, each with different properties.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.ChecksumMatchesAsync(System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            <see langword="true"/> if the data we have for the solution with the given <paramref name="name"/> has the
            provided <paramref name="checksum"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.ChecksumMatchesAsync(Microsoft.CodeAnalysis.Project,System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            <see langword="true"/> if the data we have for the given <paramref name="project"/> with the given <paramref
            name="name"/> has the provided <paramref name="checksum"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.ChecksumMatchesAsync(Microsoft.CodeAnalysis.Document,System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            <see langword="true"/> if the data we have for the given <paramref name="document"/> with the given <paramref
            name="name"/> has the provided <paramref name="checksum"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.ReadStreamAsync(System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Reads the stream for the solution with the given <paramref name="name"/>.  If <paramref name="checksum"/>
            is provided, the persisted checksum must match it.  If there is no such stream with that name, or the
            checksums do not match, then <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.ReadStreamAsync(Microsoft.CodeAnalysis.Project,System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Reads the stream for the <paramref name="project"/> with the given <paramref name="name"/>.  If <paramref name="checksum"/>
            is provided, the persisted checksum must match it.  If there is no such stream with that name, or the
            checksums do not match, then <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.ReadStreamAsync(Microsoft.CodeAnalysis.Document,System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Reads the stream for the <paramref name="document"/> with the given <paramref name="name"/>.  If <paramref name="checksum"/>
            is provided, the persisted checksum must match it.  If there is no such stream with that name, or the
            checksums do not match, then <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.WriteStreamAsync(System.String,System.IO.Stream,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Reads the stream for the solution with the given <paramref name="name"/>.  An optional <paramref
            name="checksum"/> can be provided to store along with the data.  This can be used along with ReadStreamAsync
            with future reads to ensure the data is only read back if it matches that checksum.
            <para>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Project,System.String,System.IO.Stream,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Reads the stream for the <paramref name="project"/> with the given <paramref name="name"/>.  An optional
            <paramref name="checksum"/> can be provided to store along with the data.  This can be used along with
            ReadStreamAsync with future reads to ensure the data is only read back if it matches that checksum.
            <para>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Document,System.String,System.IO.Stream,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Reads the stream for the <paramref name="document"/> with the given <paramref name="name"/>.  An optional
            <paramref name="checksum"/> can be provided to store along with the data.  This can be used along with
            ReadStreamAsync with future reads to ensure the data is only read back if it matches that checksum.
            <para>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Storage.ProjectKey,System.String,System.IO.Stream,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Storage.DocumentKey,System.String,System.IO.Stream,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IPersistentStorage">
            <remarks>
            Instances of <see cref="T:Microsoft.CodeAnalysis.Host.IPersistentStorage"/> support both synchronous and asynchronous disposal.  Asynchronous
            disposal should always be preferred as the implementation of synchronous disposal may end up blocking the caller
            on async work.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IPersistentStorage.WriteStreamAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Project,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Document,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if the data was successfully persisted to the storage subsystem.  Subsequent
            calls to read the same keys should succeed if called within the same session.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IPersistentStorageConfiguration">
            <summary>
            Configuration of the <see cref="T:Microsoft.CodeAnalysis.Host.IPersistentStorageService"/> intended to be used to override behavior in tests.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.IPersistentStorageConfiguration.ThrowOnFailure">
            <summary>
            Indicates that the client expects the DB to succeed at all work and that it should not ever gracefully fall over.
            Should not be set in normal host environments, where it is completely reasonable for things to fail
            (for example, if a client asks for a key that hasn't been stored yet).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Host.DefaultPersistentStorageConfiguration.s_invalidPathChars">
            <summary>
            Used to ensure that the path components we generate do not contain any characters that might be invalid in a
            path.  For example, Base64 encoding will use <c>/</c> which is something that we definitely do not want
            errantly added to a path.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IPersistentStorageService">
            <summary>
            Obsolete.  Roslyn no longer supports a mechanism to perform arbitrary persistence of data.  If such functionality
            is needed, consumers are responsible for providing it themselves with whatever semantics are needed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.DynamicFileInfo">
            <summary>
            provides info on the given file
            
            this will be used to provide dynamic content such as generated content from cshtml to workspace
            we acquire this from <see cref="T:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider"/> exposed from external components such as razor for cshtml
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.FilePath">
            <summary>
            The path to the generated file. in future, we will use this to get right options from editorconfig
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.SourceCodeKind">
            <summary>
            return <see cref="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.SourceCodeKind"/> for this file
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.TextLoader">
            <summary>
            return <see cref="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.TextLoader"/> to load content for the dynamic file
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.DesignTimeOnly">
            <summary>
            True if the source code contained in the document is only used in design-time (e.g. for completion),
            but is not passed to the compiler when the containing project is built, e.g. a Razor view.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.DynamicFileInfo.DocumentServiceProvider">
            <summary>
            return <see cref="T:Microsoft.CodeAnalysis.Host.IDocumentServiceProvider"/> for the content it provided
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider">
            <summary>
            Provider for the <see cref="T:Microsoft.CodeAnalysis.Host.DynamicFileInfo"/>
            
            implementer of this service should be pure free-thread meaning it can't switch to UI thread underneath.
            otherwise, we can get into dead lock if we wait for the dynamic file info from UI thread
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider.GetDynamicFileInfoAsync(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            return <see cref="T:Microsoft.CodeAnalysis.Host.DynamicFileInfo"/> for the context given
            </summary>
            <param name="projectId"><see cref="T:Microsoft.CodeAnalysis.ProjectId"/> this file belongs to</param>
            <param name="projectFilePath">full path to project file (ex, csproj)</param>
            <param name="filePath">full path to non source file (ex, cshtml)</param>
            <returns>null if this provider can't handle the given file</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider.RemoveDynamicFileInfoAsync(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            let provider know certain file has been removed
            </summary>
            <param name="projectId"><see cref="T:Microsoft.CodeAnalysis.ProjectId"/> this file belongs to</param>
            <param name="projectFilePath">full path to project file (ex, csproj)</param>
            <param name="filePath">full path to non source file (ex, cshtml)</param>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider.Updated">
            <summary>
            indicate content of a file has updated. the event argument "string" should be same as "filepath" given to <see cref="M:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider.GetDynamicFileInfoAsync(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IWorkspaceStatusService">
            <summary>
            Provides workspace status
            
            this is an work in-progress interface, subject to be changed as we work on prototype.
            
            it can completely removed at the end or new APIs can added and removed as prototype going on
            no one except one in the prototype group should use this interface.
            
            tracking issue - https://github.com/dotnet/roslyn/issues/34415
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Host.IWorkspaceStatusService.StatusChanged">
            <summary>
            Indicate that status has changed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IWorkspaceStatusService.WaitUntilFullyLoadedAsync(System.Threading.CancellationToken)">
            <summary>
            Wait until workspace is fully loaded
            
            unfortunately, some hosts, such as VS, use services (ex, IVsOperationProgressStatusService) that require UI thread to let project system to proceed to next stages.
            what that means is that this method should only be used with either await or JTF.Run, it should be never used with Task.Wait otherwise, it can
            deadlock
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.IWorkspaceStatusService.IsFullyLoadedAsync(System.Threading.CancellationToken)">
            <summary>
            Indicates whether workspace is fully loaded
            
            unfortunately, some hosts, such as VS, use services (ex, IVsOperationProgressStatusService) that require UI thread to let project system to proceed to next stages.
            what that means is that this method should only be used with either await or JTF.Run, it should be never used with Task.Wait otherwise, it can
            deadlock
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ISyntaxTreeFactoryService">
            <summary>
            Factory service for creating syntax trees.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITaskSchedulerProvider">
            <summary>
            A factory that creates either sequential or parallel task schedulers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.IWorkspaceAsynchronousOperationListenerProvider">
            <summary>
            Workspace service that provides <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ISupportDirectMemoryAccess">
            <summary>
            support direct memory access pointer
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage">
            <summary>
            TemporaryStorage can be used to read and write text to a temporary storage location.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITemporaryStorageService">
            <summary>
            This service allows you to access temporary storage.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITemporaryStorageService2">
            <summary>
            This service allows you to access temporary storage.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ITemporaryStorageService2.AttachTemporaryStreamStorage(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Attach to existing <see cref="T:Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage"/> with given name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ITemporaryStorageService2.AttachTemporaryTextStorage(System.String,System.Int64,System.Int64,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Attach to existing <see cref="T:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage"/> with given name.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITemporaryStorageWithName">
            <summary>
            TemporaryStorage can be used to read and write text to a temporary storage location.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.ITemporaryStorageWithName.Name">
            <summary>
            Get name of the temporary storage
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.ITemporaryStorageWithName.Offset">
            <summary>
            Get offset of the temporary storage
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.ITemporaryStorageWithName.Size">
            <summary>
            Get size of the temporary storage
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITemporaryTextStorageWithName">
            <summary>
            Represents a <see cref="T:Microsoft.CodeAnalysis.Host.ITemporaryStorageWithName"/> which is used to hold data for <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.ITemporaryTextStorageWithName.ChecksumAlgorithm">
            <summary>
            Gets the value for the <see cref="P:Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm"/> property for the <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>
            represented by this temporary storage.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Host.ITemporaryTextStorageWithName.Encoding">
            <summary>
            Gets the value for the <see cref="P:Microsoft.CodeAnalysis.Text.SourceText.Encoding"/> property for the <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>
            represented by this temporary storage.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ITemporaryTextStorageWithName.GetChecksum">
            <summary>
            Gets the checksum for the <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> represented by this temporary storage. This is equivalent
            to calling <see cref="M:Microsoft.CodeAnalysis.Text.SourceText.GetChecksum"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ITextFactoryService">
            <summary>
            A factory for creating <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ITextFactoryService.CreateText(System.IO.Stream,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Creates <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> from a stream.
            </summary>
            <param name="stream">The stream to read the text from. Must be readable and seekable. The text is read from the start of the stream.</param>
            <param name="defaultEncoding">
            Specifies an encoding to be used if the actual encoding can't be determined from the stream content (the stream doesn't start with Byte Order Mark).
            If not specified auto-detect heuristics are used to determine the encoding. If these heuristics fail the decoding is assumed to be the system encoding.
            Note that if the stream starts with Byte Order Mark the value of <paramref name="defaultEncoding"/> is ignored.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.IO.InvalidDataException">
            The stream content can't be decoded using the specified <paramref name="defaultEncoding"/>, or
            <paramref name="defaultEncoding"/> is null and the stream appears to be a binary file.
            </exception>
            <exception cref="T:System.IO.IOException">An IO error occurred while reading from the stream.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.ITextFactoryService.CreateText(System.IO.TextReader,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Creates <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> from a reader with given <paramref name="encoding"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to read the text from.</param>
            <param name="encoding">Specifies an encoding for the <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>SourceText. 
            it could be null. but if null is given, it won't be able to calculate checksum</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ISolutionAnalyzerSetterWorkspaceService">
            <summary>
            Available in workspaces that accept changes in solution level analyzers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.WeaklyCachedRecoverableValueSource`1">
            <summary>
            This class is a <see cref="T:Roslyn.Utilities.ValueSource`1"/> that holds onto a value weakly, 
            but can save its value and recover it on demand if needed.
            
            The initial value comes from the <see cref="T:Roslyn.Utilities.ValueSource`1"/> specified in the constructor.
            Derived types implement SaveAsync and RecoverAsync.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.WeaklyCachedRecoverableValueSource`1.SaveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Override this to save the state of the instance so it can be recovered.
            This method will only ever be called once.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.WeaklyCachedRecoverableValueSource`1.RecoverAsync(System.Threading.CancellationToken)">
            <summary>
            Override this method to implement asynchronous recovery semantics.
            This method may be called multiple times.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.WeaklyCachedRecoverableValueSource`1.Recover(System.Threading.CancellationToken)">
            <summary>
            Override this method to implement synchronous recovery semantics.
            This method may be called multiple times.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.WeaklyCachedValueSource`1">
            <summary>
            A value source that caches its value weakly once obtained from its source.
            The source must allow repeatable accesses.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServicesExtensions.GetExtendedLanguageServices(Microsoft.CodeAnalysis.Host.HostWorkspaceServices,System.String)">
            <summary>
            Gets extended host language services, which includes language services from <see cref="M:Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetLanguageServices(System.String)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult">
            <summary>
            This holds onto diagnostics for a specific version of project snapshot
            in a way each kind of diagnostics can be queried fast.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultBuilder">
            <summary>
            We have this builder to avoid creating collections unnecessarily.
            Expectation is that, most of time, most of analyzers doesn't have any diagnostics. so no need to actually create any objects.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap">
            <summary>
            Basically typed tuple.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DiagnosticProvider">
            <summary>
            Provide a way for users to turn on and off analyzing workspace for compiler diagnostics
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DiagnosticProvider.Options.Syntax">
            <summary>
            Include syntax errors
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DiagnosticProvider.Options.Semantic">
            <summary>
            Include semantic errors
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DiagnosticProvider.Options.ScriptSemantic">
            <summary>
            Include script semantic errors
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.AbstractSyntaxComparer.TryComputeWeightedDistance(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Double@)">
            <summary>
            Calculates distance of two nodes based on their significant parts.
            Returns false if the nodes don't have any significant parts and should be compared as a whole.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.Edit`1">
            <summary>
            Represents an edit operation on a tree or a sequence of nodes.
            </summary>
            <typeparam name="TNode">Tree node.</typeparam>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Differencing.Edit`1.OldNode">
            <summary>
            Insert: 
            default(TNode).
            
            Delete: 
            Deleted node.
            
            Move, Update: 
            Node in the old tree/sequence.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Differencing.Edit`1.NewNode">
            <summary>
            Insert: 
            Inserted node.
            
            Delete: 
            default(TNode)
            
            Move, Update:
            Node in the new tree/sequence.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.EditKind.None">
            <summary>
            No change.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.EditKind.Update">
            <summary>
            Node value was updated.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.EditKind.Insert">
            <summary>
            Node was inserted.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.EditKind.Delete">
            <summary>
            Node was deleted.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.EditKind.Move">
            <summary>
            Node changed parent.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.EditKind.Reorder">
            <summary>
            Node changed position within its parent. The parent nodes of the old node and the new node are matching.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.EditScript`1">
            <summary>
            Represents a sequence of tree edits.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.LongestCommonImmutableArraySubsequence`1">
            <summary>
            Calculates Longest Common Subsequence for immutable arrays.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VBuffer">
            <summary>
            Underlying storage for <see cref="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VArray"/>s allocated on <see cref="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VStack"/>.
            </summary>
            <remarks>
            The LCS algorithm allocates <see cref="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VArray"/>s of sizes (3, 2*1 + 1, ..., 2*D + 1), always in this order, 
            where D is at most the sum of lengths of the compared sequences.
            The arrays get pushed on a stack as they are built up, then all consumed in the reverse order (stack pop).
            
            Since the exact length of each array in the above sequence is known we avoid allocating each individual array.
            Instead we allocate a large buffer serving as a a backing storage of a contiguous sequence of arrays 
            corresponding to stack depths <see cref="F:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VBuffer.MinDepth"/> to <see cref="F:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VBuffer.MaxDepth"/>.
            If more storage is needed we chain next large buffer to the previous one in a linked list.
            
            We pool a few of these linked buffers on <see cref="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VStack"/> to conserve allocations.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VBuffer.FirstBufferMaxDepth">
            <summary>
            The max stack depth backed by the fist buffer.
            Size of the buffer for 100 is ~10K. 
            For 150 it'd be 91KB, which would be allocated on LOH.
            The buffers grow by factor of <see cref="F:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VBuffer.GrowFactor"/>, so the next buffer will be allocated on LOH.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence.VBuffer.MaxPooledBufferSize">
            <summary>
            Do not pool segments that are too large.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence`1">
            <summary>
            Calculates Longest Common Subsequence.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence`1.ComputeDistance(`0,System.Int32,`0,System.Int32)">
            <summary>
            Returns a distance [0..1] of the specified sequences.
            The smaller distance the more similar the sequences are.
            </summary>
            <summary>
            Returns a distance [0..1] of the specified sequences.
            The smaller distance the more similar the sequences are.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence`1.ComputeEditPaths(`0,System.Int32,`0,System.Int32)">
             <summary>
             Calculates a list of "V arrays" using Eugene W. Myers O(ND) Difference Algorithm
             </summary>
             <remarks>
             
             The algorithm was inspired by Myers' Diff Algorithm described in an article by Nicolas Butler:
             https://www.codeproject.com/articles/42279/investigating-myers-diff-algorithm-part-of
             The author has approved the use of his code from the article under the Apache 2.0 license.
             
             The algorithm works on an imaginary edit graph for A and B which has a vertex at each point in the grid(i, j), i in [0, lengthA] and j in [0, lengthB].
             The vertices of the edit graph are connected by horizontal, vertical, and diagonal directed edges to form a directed acyclic graph.
             Horizontal edges connect each vertex to its right neighbor. 
             Vertical edges connect each vertex to the neighbor below it.
             Diagonal edges connect vertex (i,j) to vertex (i-1,j-1) if <see cref="M:Microsoft.CodeAnalysis.Differencing.LongestCommonSubsequence`1.ItemsEqual(`0,System.Int32,`0,System.Int32)"/>(sequenceA[i-1],sequenceB[j-1]) is true.
             
             Move right along horizontal edge (i-1,j)-(i,j) represents a delete of sequenceA[i-1].
             Move down along vertical edge (i,j-1)-(i,j) represents an insert of sequenceB[j-1].
             Move along diagonal edge (i-1,j-1)-(i,j) represents an match of sequenceA[i-1] to sequenceB[j-1].
             The number of diagonal edges on the path from (0,0) to (lengthA, lengthB) is the length of the longest common sub.
            
             The function does not actually allocate this graph. Instead it uses Eugene W. Myers' O(ND) Difference Algoritm to calculate a list of "V arrays" and returns it in a Stack. 
             A "V array" is a list of end points of so called "snakes". 
             A "snake" is a path with a single horizontal (delete) or vertical (insert) move followed by 0 or more diagonals (matching pairs).
             
             Unlike the algorithm in the article this implementation stores 'y' indexes and prefers 'right' moves instead of 'down' moves in ambiguous situations
             to preserve the behavior of the original diff algorithm (deletes first, inserts after).
             
             The number of items in the list is the length of the shortest edit script = the number of inserts/edits between the two sequences = D. 
             The list can be used to determine the matching pairs in the sequences (GetMatchingPairs method) or the full editing script (GetEdits method).
             
             The algorithm uses O(ND) time and memory where D is the number of delete/inserts and N is the sum of lengths of the two sequences.
             
             VArrays store just the y index because x can be calculated: x = y + k.
             </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.LongestCommonSubstring">
            <summary>
            Calculates longest common substring using Wagner algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.Match`1.GetTreeEdits">
            <summary>
            Returns an edit script (a sequence of edits) that transform <see cref="P:Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot"/> subtree 
            to <see cref="P:Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot"/> subtree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.Match`1.GetSequenceEdits(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns an edit script (a sequence of edits) that transform a sequence of nodes <paramref name="oldNodes"/>
            to a sequence of nodes <paramref name="newNodes"/>. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldNodes"/> or <paramref name="newNodes"/> is a null reference.</exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.SequenceEdit">
            <summary>
            Represents an edit operation on a sequence of values.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Differencing.SequenceEdit.Kind">
            <summary>
            The kind of edit: <see cref="F:Microsoft.CodeAnalysis.Differencing.EditKind.Delete"/>, <see cref="F:Microsoft.CodeAnalysis.Differencing.EditKind.Insert"/>, or <see cref="F:Microsoft.CodeAnalysis.Differencing.EditKind.Update"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Differencing.SequenceEdit.OldIndex">
            <summary>
            Index in the old sequence, or -1 if the edit is insert.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Differencing.SequenceEdit.NewIndex">
            <summary>
            Index in the new sequence, or -1 if the edit is delete.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Differencing.TreeComparer`1">
            <summary>
            Implements a tree differencing algorithm.
            </summary>
            <remarks>
            Subclasses define relationships among tree nodes, and parameters to the differencing algorithm.
            </remarks>
            <typeparam name="TNode">Tree node.</typeparam>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeEditScript(`0,`0)">
            <summary>
            Returns an edit script that transforms <paramref name="oldRoot"/> to <paramref name="newRoot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeMatch(`0,`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}})">
            <summary>
            Returns a match map of <paramref name="oldRoot"/> descendants to <paramref name="newRoot"/> descendants.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDistance(`0,`0)">
            <summary>
            Calculates the distance [0..1] of two nodes.
            </summary>
            <remarks>
            The more similar the nodes the smaller the distance.
            
            Used to determine whether two nodes of the same label match.
            Even if 0 is returned the nodes might be slightly different.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ValuesEqual(`0,`0)">
            <summary>
            Returns true if the specified nodes have equal values.
            </summary>
            <remarks>
            Called with matching nodes (<paramref name="oldNode"/>, <paramref name="newNode"/>).
            Return true if the values of the nodes are the same, or their difference is not important.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.LabelCount">
            <summary>
            The number of distinct labels used in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetLabel(`0)">
            <summary>
            Returns an integer label corresponding to the given node.
            </summary>
            <remarks>Returned value must be within [0, LabelCount).</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.TiedToAncestor(System.Int32)">
            <summary>
            Returns N > 0 if the node with specified label can't change its N-th ancestor node, zero otherwise.
            </summary>
            <remarks>
            1st ancestor is the node's parent node.
            2nd ancestor is the node's grandparent node.
            etc.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetChildren(`0)">
            <summary>
            May return null if the <paramref name="node"/> is a leaf.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDescendants(`0)">
            <summary>
            Enumerates all descendant nodes of the given node in depth-first prefix order.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.TryGetParent(`0,`0@)">
            <summary>
            Returns a parent for the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.TreesEqual(`0,`0)">
            <summary>
            Return true if specified nodes belong to the same tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetSpan(`0)">
            <summary>
            Returns the position of the node.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.DeclarationKind">
            <devdocs>
            This should contain only language-agnostic declarations. Things like record struct should fall under struct, etc.
            </devdocs>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.DeclarationKind.Class">
            <summary>
            Represents a class declaration, including record class declarations in C#.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.DeclarationKind.Struct">
            <summary>
            Represents a struct declaration, including record struct declarations in C#.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.DeclarationKind.SetAccessor">
            <summary>
            Represents set accessor declaration of a property, including init accessors in C#.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.DocumentEditor">
            <summary>
            An editor for making changes to a document's syntax tree. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.DocumentEditor.CreateAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editing.DocumentEditor"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.DocumentEditor.OriginalDocument">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Document"/> specified when the editor was first created.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.DocumentEditor.SemanticModel">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> of the original document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.DocumentEditor.GetChangedDocument">
            <summary>
            Returns the changed <see cref="T:Microsoft.CodeAnalysis.Document"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the span specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the sub-trees annotated with the <see cref="T:Microsoft.CodeAnalysis.SyntaxAnnotation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the spans specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSyntaxesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSyntaxesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the span specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSyntaxesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the sub-trees annotated with the <see cref="T:Microsoft.CodeAnalysis.SyntaxAnnotation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSyntaxesAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the spans specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSymbolAnnotationAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSymbolAnnotationAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the span specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSymbolAnnotationAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the sub-trees annotated with the <see cref="T:Microsoft.CodeAnalysis.SyntaxAnnotation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsFromSymbolAnnotationAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Adds namespace imports / using directives for namespace references found in the document within the spans specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdderService.AddPotentiallyConflictingImports(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamespaceSymbol},System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.INamespaceSymbol},System.Threading.CancellationToken)">
            <summary>
            Looks at the contents of the document for top level identifiers (or existing extension method calls), and
            blocks off imports that could potentially bring in a name that would conflict with them.
            <paramref name="container"/> is the node that the import will be added to.  This will either be the
            compilation-unit node, or one of the namespace-blocks in the file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.ImportAdderService.IsInsideNamespace(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Checks if the namespace declaration <paramref name="node"/> is contained inside,
            or any of its ancestor namespaces are the same as <paramref name="symbol"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.ImplicitConversion">
            <summary>
            The name assigned to an implicit (widening) conversion.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.ExplicitConversion">
            <summary>
            The name assigned to an explicit (narrowing) conversion.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Addition">
            <summary>
            The name assigned to the Addition operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.BitwiseAnd">
            <summary>
            The name assigned to the BitwiseAnd operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.BitwiseOr">
            <summary>
            The name assigned to the BitwiseOr operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Decrement">
            <summary>
            The name assigned to the Decrement operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Division">
            <summary>
            The name assigned to the Division operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Equality">
            <summary>
            The name assigned to the Equality operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.ExclusiveOr">
            <summary>
            The name assigned to the ExclusiveOr operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.False">
            <summary>
            The name assigned to the False operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.GreaterThan">
            <summary>
            The name assigned to the GreaterThan operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.GreaterThanOrEqual">
            <summary>
            The name assigned to the GreaterThanOrEqual operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Increment">
            <summary>
            The name assigned to the Increment operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Inequality">
            <summary>
            The name assigned to the Inequality operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.LeftShift">
            <summary>
            The name assigned to the LeftShift operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.LessThan">
            <summary>
            The name assigned to the LessThan operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.LessThanOrEqual">
            <summary>
            The name assigned to the LessThanOrEqual operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.LogicalNot">
            <summary>
            The name assigned to the LogicalNot operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Modulus">
            <summary>
            The name assigned to the Modulus operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Multiply">
            <summary>
            The name assigned to the Multiply operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.OnesComplement">
            <summary>
            The name assigned to the OnesComplement operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.RightShift">
            <summary>
            The name assigned to the RightShift operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.Subtraction">
            <summary>
            The name assigned to the Subtraction operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.True">
            <summary>
            The name assigned to the True operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.UnaryNegation">
            <summary>
            The name assigned to the UnaryNegation operator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.OperatorKind.UnaryPlus">
            <summary>
            The name assigned to the UnaryPlus operator.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SolutionEditor">
            <summary>
            An editor for making changes to multiple documents in a solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.SolutionEditor.OriginalSolution">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Solution"/> that was specified when the <see cref="T:Microsoft.CodeAnalysis.Editing.SolutionEditor"/> was constructed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SolutionEditor.GetDocumentEditorAsync(Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.DocumentEditor"/> for the corresponding <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SolutionEditor.GetChangedSolution">
            <summary>
            Returns the changed <see cref="T:Microsoft.CodeAnalysis.Solution"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SymbolEditor">
            <summary>
            An editor for making changes to symbol source declarations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.Create(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editing.SymbolEditor"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.Create(Microsoft.CodeAnalysis.Document)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editing.SymbolEditor"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.SymbolEditor.OriginalSolution">
            <summary>
            The original solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.SymbolEditor.ChangedSolution">
            <summary>
            The solution with the edits applied.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.GetChangedDocuments">
            <summary>
            The documents changed since the <see cref="T:Microsoft.CodeAnalysis.Editing.SymbolEditor"/> was constructed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.GetCurrentSymbolAsync(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Gets the current symbol for a source symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.GetCurrentDeclarationsAsync(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Gets the current declarations for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.GetDeclarations(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the declaration syntax nodes for a given symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.TryGetBestDeclarationForSingleEdit(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Gets the best declaration node for adding members.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction">
            <summary>
            An action that make changes to a declaration node within a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="editor">The <see cref="T:Microsoft.CodeAnalysis.Editing.DocumentEditor"/> to apply edits to.</param>
            <param name="declaration">The declaration to edit.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction">
            <summary>
            An action that make changes to a declaration node within a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="editor">The <see cref="T:Microsoft.CodeAnalysis.Editing.DocumentEditor"/> to apply edits to.</param>
            <param name="declaration">The declaration to edit.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing the definition of one of the symbol's declarations.
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to edit.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing the definition of one of the symbol's declarations.
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to edit.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing the definition of one of the symbol's declarations.
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to edit.</param>
            <param name="location">A location within one of the symbol's declarations.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing the definition of one of the symbol's declarations.
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to edit.</param>
            <param name="location">A location within one of the symbol's declarations.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing the symbol's declaration where the member is also declared.
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to edit.</param>
            <param name="member">A symbol whose declaration is contained within one of the primary symbol's declarations.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing the symbol's declaration where the member is also declared.
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to edit.</param>
            <param name="member">A symbol whose declaration is contained within one of the primary symbol's declarations.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditAllDeclarationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing all the symbol's declarations. 
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to be edited.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditor.EditAllDeclarationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction,System.Threading.CancellationToken)">
            <summary>
            Enables editing all the symbol's declarations. 
            Partial types and methods may have more than one declaration.
            </summary>
            <param name="symbol">The symbol to be edited.</param>
            <param name="editAction">The action that makes edits to the declaration.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The new symbol including the changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.GetBaseOrInterfaceDeclarationReferenceAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)">
            <summary>
            Gets the reference to the declaration of the base or interface type as part of the symbol's declaration. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Changes the base type of the symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)">
            <summary>
            Changes the base type of the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor">
            <summary>
            An editor for making changes to a syntax tree. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.SyntaxEditor.OriginalRoot">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> that was specified when the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor"/> was constructed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editing.SyntaxEditor.Generator">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/> to use to create and change <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>'s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot">
            <summary>
            Returns the changed root node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.TrackNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Makes sure the node is tracked, even if it is not changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Remove the node from the tree.
            </summary>
            <param name="node">The node to remove that currently exists as part of the tree.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Remove the node from the tree.
            </summary>
            <param name="node">The node to remove that currently exists as part of the tree.</param>
            <param name="options">Options that affect how node removal works.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Replace the specified node with a node produced by the function.
            </summary>
            <param name="node">The node to replace that already exists in the tree.</param>
            <param name="computeReplacement">A function that computes a replacement node. 
            The node passed into the compute function includes changes from prior edits. It will not appear as a descendant of the original root.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Replace the specified node with a different node.
            </summary>
            <param name="node">The node to replace that already exists in the tree.</param>
            <param name="newNode">The new node that will be placed into the tree in the existing node's location.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Insert the new nodes before the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.</param>
            <param name="newNodes">The nodes to place before the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Insert the new node before the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.</param>
            <param name="newNode">The node to place before the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Insert the new nodes after the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.</param>
            <param name="newNodes">The nodes to place after the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Insert the new node after the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.</param>
            <param name="newNode">The node to place after the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator">
            <summary>
            A language agnostic factory for creating syntax nodes.
            
            This API can be used to create language specific syntax nodes that are semantically 
            similar between languages.
            
            The trees generated by this API will try to respect user preferences when
            possible.  For example, generating <see cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)"/> 
            will be done in a way such that "this." or "Me." will be simplified according to user
            preference if any <see cref="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" /> 
            overload is called.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace,System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/> for the specified language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/> for the language corresponding to the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/> for the language corresponding to the project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns the node if it is a declaration, the immediate enclosing declaration if one exists, or null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)">
            <summary>
            Returns the enclosing declaration of the specified kind or null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a field declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol)">
            <summary>
            Creates a field declaration matching an existing field symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a field declaration matching an existing field symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a method declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a method declaration matching an existing method symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.OperatorDeclaration(Microsoft.CodeAnalysis.Editing.OperatorKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a method declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.OperatorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a method declaration matching an existing method symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.RefKind)">
            <summary>
            Creates a parameter declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a parameter declaration matching an existing parameter symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a property declaration. The property will have a <c>get</c> accessor if
            <see cref="P:Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsWriteOnly"/> is <see langword="false"/> and will have
            a <c>set</c> accessor if <see cref="P:Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsReadOnly"/> is <see
            langword="false"/>.
            </summary>
            <remarks>
            In C# there is a distinction between passing in <see langword="null"/> for <paramref
            name="getAccessorStatements"/> or <paramref name="setAccessorStatements"/> versus
            passing in an empty list. <see langword="null"/> will produce an auto-property-accessor
            (i.e. <c>get;</c>) whereas an empty list will produce an accessor with an empty block
            (i.e. <c>get { }</c>).
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a property declaration using an existing property symbol as a signature.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an indexer declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an indexer declaration matching an existing indexer symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddEventHandler(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that adds the given handler to the given event.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveEventHandler(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that removes the given handler from the given event.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)">
            <summary>
            Creates an event declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol)">
            <summary>
            Creates an event declaration from an existing event symbol
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a custom event declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a custom event declaration from an existing event symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a constructor declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Create a constructor declaration using 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Converts method, property and indexer declarations into public interface implementations.
            This is equivalent to an implicit C# interface implementation (you can access it via the interface or directly via the named member.)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.String)">
            <summary>
            Converts method, property and indexer declarations into public interface implementations.
            This is equivalent to an implicit C# interface implementation (you can access it via the interface or directly via the named member.)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Converts method, property and indexer declarations into private interface implementations.
            This is equivalent to a C# explicit interface implementation (you can declare it for access via the interface, but cannot call it directly).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.String)">
            <summary>
            Converts method, property and indexer declarations into private interface implementations.
            This is equivalent to a C# explicit interface implementation (you can declare it for access via the interface, but cannot call it directly).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a class declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a struct declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a interface declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(System.String,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an enum declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an enum declaration
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an enum member
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)">
            <summary>
            Creates a delegate declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Creates a declaration matching an existing symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a declaration (method, class, etc) into a declaration with type parameters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.String[])">
            <summary>
            Converts a declaration (method, class, etc) into a declaration with type parameters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Adds a type constraint to a type parameter of a declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Adds a type constraint to a type parameter of a declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Adds a type constraint to a type parameter of a declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a namespace declaration.
            </summary>
            <param name="name">The name of the namespace.</param>
            <param name="declarations">Zero or more namespace or type declarations.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a namespace declaration.
            </summary>
            <param name="name">The name of the namespace.</param>
            <param name="declarations">Zero or more namespace or type declarations.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a namespace declaration.
            </summary>
            <param name="name">The name of the namespace.</param>
            <param name="declarations">Zero or more namespace or type declarations.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a namespace declaration.
            </summary>
            <param name="name">The name of the namespace.</param>
            <param name="declarations">Zero or more namespace or type declarations.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a compilation unit declaration
            </summary>
            <param name="declarations">Zero or more namespace import, namespace or type declarations.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a compilation unit declaration
            </summary>
            <param name="declarations">Zero or more namespace import, namespace or type declarations.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a namespace import declaration.
            </summary>
            <param name="name">The name of the namespace being imported.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(System.String)">
            <summary>
            Creates a namespace import declaration.
            </summary>
            <param name="name">The name of the namespace being imported.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AliasImportDeclaration(System.String,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol)">
            <summary>
            Creates an alias import declaration.
            </summary>
            <param name="aliasIdentifierName">The name of the alias.</param>
            <param name="symbol">The namespace or type to be aliased.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AliasImportDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an alias import declaration.
            </summary>
            <param name="aliasIdentifierName">The name of the alias.</param>
            <param name="name">The namespace or type to be aliased.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Creates an attribute matching existing attribute data.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an attribute argument.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an attribute argument.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Removes all attributes from the declaration, including return attributes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllComments(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Removes comments from leading and trailing trivia, as well
            as potentially removing comments from opening and closing tokens.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the attributes of a declaration, not including the return attributes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the attributes inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of the declaration with the attributes inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of a declaration with the specified attributes added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of a declaration with the specified attributes added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the return attributes from the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of a method declaration with return attributes inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of a method declaration with return attributes inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of a method declaration with return attributes added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of a method declaration node with return attributes added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the attribute arguments for the attribute declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the attribute with the arguments inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the attribute with the arguments added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the namespace imports that are part of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the namespace imports inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of the declaration with the namespace imports inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the namespace imports added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of the declaration with the namespace imports added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the current members of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the members inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of the declaration with the members inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the members added to the end.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a new instance of the declaration with the members added to the end.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the accessibility of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Changes the accessibility of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.DeclarationModifiers"/> for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)">
            <summary>
            Changes the <see cref="T:Microsoft.CodeAnalysis.Editing.DeclarationModifiers"/> for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.DeclarationKind"/> for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the name of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode,System.String)">
            <summary>
            Changes the name of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the type of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Changes the type of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the list of parameters for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Inserts the parameters at the specified index into the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Adds the parameters to the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSwitchSections(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the list of switch sections for the statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertSwitchSections(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Inserts the switch sections at the specified index into the statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddSwitchSections(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Adds the switch sections to the statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the expression associated with the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Changes the expression associated with the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the statements for the body of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Changes the statements for the body of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the accessors for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)">
            <summary>
            Gets the accessor of the specified kind for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the accessors inserted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a new instance of the declaration with the accessors added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the statements for the body of the get-accessor of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Changes the statements for the body of the get-accessor of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the statements for the body of the set-accessor of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Changes the statements for the body of the set-accessor of the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets a list of the base and interface types for the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Adds a base type to the declaration
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Adds an interface type to the declaration
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Replaces the node in the root's tree with the new node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Inserts the new node before the specified declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Inserts the new node before the specified declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Removes the node from the sub tree starting at the root.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Removes the node from the sub tree starting at the root.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Removes all the declarations from the sub tree starting at the root.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia``1(``0)">
            <summary>
            Creates a new instance of the node with the leading and trailing trivia removed and replaced with elastic markers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates statement that allows an expression to execute in a statement context.
            This is typically an invocation or assignment expression.
            </summary>
            <param name="expression">The expression that is to be executed. This is usually a method invocation expression.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that can be used to return a value from a method body.
            </summary>
            <param name="expression">An optional expression that can be returned.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.YieldReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that can be used to yield a value from an iterator method.
            </summary>
            <param name="expression">An expression that can be yielded.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that can be used to throw an exception.
            </summary>
            <param name="expression">An optional expression that can be thrown.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that can be used to throw an exception.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SupportsThrowExpression">
            <summary>
            True if <see cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowExpression(Microsoft.CodeAnalysis.SyntaxNode)"/> can be used
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RequiresLocalDeclarationType">
            <summary>
            <see langword="true"/> if the language requires a <see cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)"/>
            (including <see langword="var"/>) to be stated when making a 
            <see cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)"/>.
            <see langword="false"/> if the language allows the type node to be entirely elided.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Creates a statement that declares a single local variable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Creates a statement that declares a single local variable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that declares a single local variable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that declares a single local variable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an if-statement
            </summary>
            <param name="condition">A condition expression.</param>
            <param name="trueStatements">The statements that are executed if the condition is true.</param>
            <param name="falseStatements">The statements that are executed if the condition is false.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an if statement
            </summary>
            <param name="condition">A condition expression.</param>
            <param name="trueStatements">The statements that are executed if the condition is true.</param>
            <param name="falseStatement">A single statement that is executed if the condition is false.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a switch statement that branches to individual sections based on the value of the specified expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a switch statement that branches to individual sections based on the value of the specified expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a section for a switch statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a single-case section a switch statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a default section for a switch statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement">
            <summary>
            Create a statement that exits a switch statement and continues after it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a statement that represents a using-block pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a statement that represents a using-block pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a statement that represents a using-block pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LockStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a statement that represents a lock-block pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a try-catch or try-catch-finally statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a try-catch or try-catch-finally statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a try-finally statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a catch-clause.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a catch-clause.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a while-loop statement
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ScopeBlock(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a block of statements. Not supported in VB.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            An expression that represents the default value of a type.
            This is typically a null value for reference types or a zero-filled value for value types.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression">
            <summary>
            Creates an expression that denotes the containing method's this-parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression">
            <summary>
            Creates an expression that denotes the containing method's base-parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(System.Object)">
            <summary>
            Creates a literal expression. This is typically numeric primitives, strings or chars.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypedConstantExpression(Microsoft.CodeAnalysis.TypedConstant)">
            <summary>
            Creates an expression for a typed constant.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression">
            <summary>
            Creates an expression that denotes the boolean false literal.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression">
            <summary>
            Creates an expression that denotes the boolean true literal.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression">
            <summary>
            Creates an expression that denotes the null literal.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(System.String)">
            <summary>
            Creates an expression that denotes a simple identifier name.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol})">
            <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.ITypeSymbol[])">
            <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Converts an expression that ends in a name into an expression that ends in a generic name.
            If the expression already ends in a generic name, the new type arguments are used instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Converts an expression that ends in a name into an expression that ends in a generic name.
            If the expression already ends in a generic name, the new type arguments are used instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a name expression that denotes a qualified name. 
            The left operand can be any name expression.
            The right operand can be either and identifier or generic name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GlobalAliasedName(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns a new name node qualified with the 'global' alias ('Global' in VB).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(System.String)">
            <summary>
            Creates a name expression from a dotted name string.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NameExpression(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol)">
            <summary>
            Creates a name that denotes a type or namespace.
            </summary>
            <param name="namespaceOrTypeSymbol">The symbol to create a name for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Creates an expression that denotes a type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)">
            <summary>
            Creates an expression that denotes a type. If addImport is false,
            adds a <see cref="T:Microsoft.CodeAnalysis.Simplification.DoNotAddImportsAnnotation"/> which will prevent any
            imports or usings from being added for the type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Creates an expression that denotes a special type name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes an array type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a nullable type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that denotes a tuple type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an expression that denotes a tuple type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an expression that denotes a tuple type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleElementExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)">
            <summary>
            Creates an expression that denotes a tuple element.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleElementExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Creates an expression that denotes a tuple element.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes an assignment from the right argument to left argument.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a value-type equality test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a reference-type equality test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a value-type inequality test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a reference-type inequality test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a less-than test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a less-than-or-equal test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a greater-than test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a greater-than-or-equal test operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a unary negation operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes an addition operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes an subtraction operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a multiplication operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a division operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a modulo operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a bitwise-and operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a bitwise-or operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a bitwise-not operation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a logical-and operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a logical-or operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a logical not operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a conditional evaluation operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a conditional access operation. Use <see
            cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxNode)"/> and <see
            cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementBindingExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})"/> to generate the <paramref
            name="whenNotNull"/> argument.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a member binding operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementBindingExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that denotes an element binding operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementBindingExpression(Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an expression that denotes an element binding operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a coalesce operation. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a member access expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)">
            <summary>
            Creates a member access expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an array creation expression for a single dimensional array of specified size.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an array creation expression for a single dimensional array with specified initial element values.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an object creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an object creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an object creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an object creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates a invocation expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates a invocation expression
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(System.String,Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a node that is an argument to an invocation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a node that is an argument to an invocation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a node that is an argument to an invocation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that access an element of an array or indexer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])">
            <summary>
            Creates an expression that access an element of an array or indexer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that evaluates to the type at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes an is-type-check operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Creates an expression that denotes an is-type-check operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes an try-cast operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Creates an expression that denotes an try-cast operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a type cast operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a type cast operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a type conversion operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that denotes a type conversion operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that declares a value returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that declares a void returning lambda expression
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that declares a value returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that declares a void returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that declares a single parameter value returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that declares a single parameter void returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that declares a single parameter value returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that declares a single parameter void returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that declares a zero parameter value returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an expression that declares a zero parameter void returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that declares a zero parameter value returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an expression that declares a zero parameter void returning lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a lambda parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Creates a lambda parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AwaitExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an await expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParentheses(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Wraps with parens.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NameOfExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates an nameof expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Creates an tuple expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParseExpression(System.String)">
            <summary>
            Parses an expression from string
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.ReferenceType">
            <summary>
            Has the reference type constraint (i.e. 'class' constraint in C#)
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.ValueType">
            <summary>
            Has the value type constraint (i.e. 'struct' constraint in C#)
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.Constructor">
            <summary>
            Has the constructor constraint (i.e. 'new' constraint in C#)
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal">
            <summary>
            Internal extensions to <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/>.
            
            This interface is available in the shared CodeStyle and Workspaces layer to allow
            sharing internal generator methods between them. Once the methods are ready to be
            made public APIs, they can be moved to <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Creates a statement that declares a single local variable with an optional initializer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that declares a single local variable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.AddParentheses(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Wraps with parens.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.YieldReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a statement that can be used to yield a value from an iterator method.
            </summary>
            <param name="expression">An expression that can be yielded.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.RequiresLocalDeclarationType">
            <summary>
            <see langword="true"/> if the language requires a "TypeExpression"
            (including <see langword="var"/>) to be stated when making a 
            <see cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)"/>.
            <see langword="false"/> if the language allows the type node to be entirely elided.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal.Type(Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)">
            <summary>
            Produces an appropriate TypeSyntax for the given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>.  The <paramref name="typeContext"/>
            flag controls how this should be created depending on if this node is intended for use in a type-only
            context, or an expression-level context.  In the former case, both C# and VB will create QualifiedNameSyntax
            nodes for dotted type names, whereas in the latter case both languages will create MemberAccessExpressionSyntax
            nodes.  The final stringified result will be the same in both cases.  However, the structure of the trees
            will be substantively different, which can impact how the compilation layers analyze the tree and how
            transformational passes affect it.
            </summary>
            <remarks>
            Passing in the right value for <paramref name="typeContext"/> is necessary for correctness and for use
            of compilation (and other) layers in a supported fashion.  For example, if a QualifiedTypeSyntax is
            sed in a place the compiler would have parsed out a MemberAccessExpression, then it is undefined behavior
            what will happen if that tree is passed to any other components.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.AbstractEmbeddedLanguagesProvider">
            <summary>
            Abstract implementation of the C# and VB embedded language providers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.FallbackEmbeddedLanguage">
            <summary>
            A 'fallback' embedded language that can classify normal escape sequences in 
            C# or VB strings if no other embedded languages produce results.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.IEmbeddedLanguage">
            <summary>
            Services related to a specific embedded language.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.IEmbeddedLanguage.Classifier">
            <summary>
            A optional classifier that can produce <see cref="T:Microsoft.CodeAnalysis.Classification.ClassifiedSpan"/>s for an embedded language string.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.IEmbeddedLanguagesProvider">
            <summary>
            Service that returns all the embedded languages supported.  Each embedded language can expose
            individual language services through the <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.IEmbeddedLanguage"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedDiagnostic">
            <summary>
            Represents an error in a embedded language snippet.  The error contains the message to show 
            a user as well as the span of the error.  This span is in actual user character coordinates.
            For example, if the user has the string "...\\p{0}..." then the span of the error would be 
            for the range of characters for '\\p{0}' (even though the regex engine would only see the \\ 
            translated as a virtual char to the single \ character.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSeparatedSyntaxNodeList`3.Item(System.Int32)">
            <summary>
            Retrieves only nodes, skipping the separator tokens
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxNode`2">
            <summary>
            Root of the embedded language syntax hierarchy.  EmbeddedSyntaxNodes are very similar to 
            Roslyn Red-Nodes in concept, though there are differences for ease of implementation.
            
            Similarities:
            1. Fully representative of the original source.  All source VirtualChars are contained
               in the Regex nodes.
            2. Specific types for Nodes, Tokens and Trivia.
            3. Uniform ways of deconstructing Nodes (i.e. ChildCount + ChildAt).
            
            Differences:
            Note: these differences are not required, and can be changed if felt to be valuable.
            1. No parent pointers.  These have not been needed yet.
            2. No Update methods.  These have not been needed yet.
            3. No direct ways to get Positions/Spans of node/token/trivia.  Instead, that information can
               be acquired from the VirtualChars contained within those constructs.  This does mean that
               an empty node (for example, an empty RegexSequenceNode) effect has no way to simply ascertain
               its location.  So far that hasn't been a problem.
            4. No null nodes.  Haven't been needed so far, and it keeps things extremely simple.  For 
               example where Roslyn might have chosen an optional null child, the Regex hierarchy just
               has multiple nodes.  For example there are distinct nodes to represent the very similar
               {a}   {a,}    {a,b}    constructs.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxNode`2.ToString">
            <summary>
            Returns the string representation of this node, not including its leading and trailing trivia.
            </summary>
            <returns>The string representation of this node, not including its leading and trailing trivia.</returns>
            <remarks>The length of the returned string is always the same as Span.Length</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxNode`2.ToFullString">
            <summary>
            Returns full string representation of this node including its leading and trailing trivia.
            </summary>
            <returns>The full string representation of this node including its leading and trailing trivia.</returns>
            <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxNode`2.WriteTo(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Writes the node to a stringbuilder.
            </summary>
            <param name="leading">If false, leading trivia will not be added</param>
            <param name="trailing">If false, trailing trivia will not be added</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxToken`1.Value">
            <summary>
            Returns the value of the token. For example, if the token represents an integer capture,
            then this property would return the actual integer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxToken`1.WriteTo(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Writes the token to a stringbuilder.
            </summary>
            <param name="leading">If false, leading trivia will not be added</param>
            <param name="trailing">If false, trailing trivia will not be added</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxTrivia`1">
            <summary>
            Trivia on an <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxToken`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxTrivia`1.Diagnostics">
            <summary>
            A place for diagnostics to be stored during parsing.  Not intended to be accessed 
            directly.  These will be collected and aggregated into <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.Common.EmbeddedSyntaxTree`3.Diagnostics"/>
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.AbstractVirtualCharService.IsLegalBraceEscape(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.Text.TextSpan@)">
            <summary>
            Returns <see langword="true"/> if the next two characters at <c>tokenText[index]</c> are <c>{{</c> or
            <c>}}</c>.  If so, <paramref name="span"/> will contain the span of those two characters (based on <paramref
            name="tokenText"/> starting at <paramref name="offset"/>).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.AbstractVirtualCharService.TryConvertSimpleDoubleQuoteString(Microsoft.CodeAnalysis.SyntaxToken,System.String,System.String,System.Boolean)">
            <summary>
            Helper to convert simple string literals that escape quotes by doubling them.  This is 
            how normal VB literals and c# verbatim string literals work.
            </summary>
            <param name="startDelimiter">The start characters string.  " in VB and @" in C#</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.IVirtualCharService">
             <summary>
             Helper service that takes the raw text of a string token and produces the individual
             characters that raw string token represents (i.e. with escapes collapsed).  The difference
             between this and the result from token.ValueText is that for each collapsed character
             returned the original span of text in the original token can be found.  i.e. if you had the
             following in C#:
            
             "G\u006fo"
            
             Then you'd get back:
            
             'G' -> [0, 1) 'o' -> [1, 7) 'o' -> [7, 1)
            
             This allows for embedded language processing that can refer back to the users' original code
             instead of the escaped value we're processing.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.IVirtualCharService.TryConvertToVirtualChars(Microsoft.CodeAnalysis.SyntaxToken)">
             <summary>
             Takes in a string token and return the <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/>s corresponding to each
             char of the tokens <see cref="P:Microsoft.CodeAnalysis.SyntaxToken.ValueText"/>.  In other words, for each char
             in ValueText there will be a VirtualChar in the resultant array.  Each VirtualChar will
             specify what char the language considers them to represent, as well as the span of text
             in the original <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> that the language created that char from. 
            
             For most chars this will be a single character span.  i.e. 'c' -> 'c'.  However, for
             escapes this may be a multi character span.  i.e. 'c' -> '\u0063'
            
             If the token is not a string literal token, or the string literal has any diagnostics on
             it, then <see langword="default"/> will be returned.   Additionally, because a
             VirtualChar can only represent a single char, while some escape sequences represent
             multiple chars, <see langword="default"/> will also be returned in those cases. All
             these cases could be relaxed in the future.  But they greatly simplify the
             implementation.
            
             If this function succeeds, certain invariants will hold.  First, each character in the
             sequence of characters in <paramref name="token"/>.ValueText will become a single
             VirtualChar in the result array with a matching <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/> property.
             Similarly, each VirtualChar's <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Span"/> will abut each other, and
             the union of all of them will cover the span of the token's <see
             cref="P:Microsoft.CodeAnalysis.SyntaxToken.Text"/>
             *not* including the start and quotes.
            
             In essence the VirtualChar array acts as the information explaining how the <see
             cref="P:Microsoft.CodeAnalysis.SyntaxToken.Text"/> of the token between the quotes maps to each character in the
             token's <see cref="P:Microsoft.CodeAnalysis.SyntaxToken.ValueText"/>.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.IVirtualCharService.TryGetEscapeCharacter(Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar,System.Char@)">
            <summary>
            Produces the appropriate escape version of <paramref name="ch"/> to be placed in a
            normal string literal.  For example if <paramref name="ch"/> is the <c>tab</c>
            character, then this would produce <c>t</c> as <c>\t</c> is what would go into a string
            literal.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/> provides a uniform view of a language's string token characters regardless if they
            were written raw in source, or are the production of a language escape sequence.  For example, in C#, in a
            normal <c>""</c> string a <c>Tab</c> character can be written either as the raw tab character (value <c>9</c> in
            ASCII),  or as <c>\t</c>.  The format is a single character in the source, while the latter is two characters
            (<c>\</c> and <c>t</c>).  <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/> will represent both, providing the raw <see cref="T:System.Char"/>
            value of <c>9</c> as well as what <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> in the original <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> they occupied.
            </summary>
            <remarks>
            A core consumer of this system is the Regex parser.  That parser wants to work over an array of characters,
            however this array of characters is not the same as the array of characters a user types into a string in C# or
            VB. For example In C# someone may write: @"\z".  This should appear to the user the same as if they wrote "\\z"
            and the same as "\\\u007a".  However, as these all have wildly different presentations for the user, there needs
            to be a way to map back the characters it sees ( '\' and 'z' ) back to the  ranges of characters the user wrote.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune">
            <summary>
            The value of this <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/> as a <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/> if such a represention is possible.
            <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/>s can represent Unicode codepoints that can appear in a <see cref="T:System.String"/> except for
            unpaired surrogates.  If an unpaired high or low surrogate character is present, this value will be <see
            cref="P:System.Text.Rune.ReplacementChar"/>.  The value of this character can be retrieved from
            <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.SurrogateChar"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.SurrogateChar">
            <summary>
            The unpaired high or low surrogate character that was encountered that could not be represented in <see
            cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/>.  If <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/> is not <see cref="P:System.Text.Rune.ReplacementChar"/>, this will be <c>0</c>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Span">
            <summary>
            The span of characters in the original <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> that represent this <see
            cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Create(System.Text.Rune,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/> from the provided <paramref name="rune"/>.  This operation cannot
            fail.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Create(System.Char,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/> from an unpaired high or low surrogate character.  This will throw
            if <paramref name="surrogateChar"/> is not actually a surrogate character. The resultant <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/>
            value will be <see cref="P:System.Text.Rune.ReplacementChar"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Value">
            <summary>
            Retrieves the scaler value of this character as an <see cref="T:System.Int32"/>.  If this is an unpaired surrogate
            character, this will be the value of that surrogate.  Otherwise, this will be the value of our <see
            cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar.Rune"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence">
             <summary>
             Represents the individual characters that raw string token represents (i.e. with escapes collapsed).  
             The difference between this and the result from token.ValueText is that for each collapsed character
             returned the original span of text in the original token can be found.  i.e. if you had the
             following in C#:
            
             "G\u006fo"
            
             Then you'd get back:
            
             'G' -> [0, 1) 'o' -> [1, 7) 'o' -> [7, 1)
            
             This allows for embedded language processing that can refer back to the user's original code
             instead of the escaped value we're processing.
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.Chunk">
            <summary>
            Abstraction over a contiguous chunk of <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/>s.  This
            is used so we can expose <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar"/>s over an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>
            or over a <see cref="T:System.String"/>.  The latter is especially useful for reducing
            memory usage in common cases of string tokens without escapes.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.ImmutableArrayChunk">
            <summary>
            Thin wrapper over an actual <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            This will be the common construct we generate when getting the
            <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.Chunk"/> for a string token that has escapes in it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.StringChunk">
            <summary>
            Represents a <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.Chunk"/> on top of a normal
            string.  This is the common case of the type of the sequence we would
            create for a normal string token without any escapes in it.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.StringChunk._underlyingData">
            <summary>
            The underlying string that we're returning virtual chars from.  Note:
            this will commonly include things like quote characters.  Clients who
            do not want that should then ask for an appropriate <see cref="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.GetSubSequence(Microsoft.CodeAnalysis.Text.TextSpan)"/>
            back that does not include those characters.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence._leafCharacters">
            <summary>
            The actual characters that this <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence"/> is a portion of.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence._span">
            <summary>
            The portion of <see cref="F:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence._leafCharacters"/> that is being exposed.  This span 
            is `[inclusive, exclusive)`.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence.FromBounds(Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence,Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence)">
            <summary>
            Combines two <see cref="T:Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualCharSequence"/>s, producing a final
            sequence that points at the same underlying data, but spans from the 
            start of <paramref name="chars1"/> to the end of <paramref name="chars2"/>.
            </summary>  
        </member>
        <member name="P:Microsoft.CodeAnalysis.Extensions.IErrorReportingService.HostDisplayName">
            <summary>
            Name of the host to be used in error messages (e.g. "Visual Studio").
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.IErrorReportingService.ShowGlobalErrorInfo(System.String,Microsoft.CodeAnalysis.Telemetry.TelemetryFeatureName,System.Exception,Microsoft.CodeAnalysis.Extensions.InfoBarUI[])">
             <summary>
             Show global error info.
            
             this kind error info should be something that affects whole roslyn such as
             background compilation is disabled due to memory issue and etc
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Extensions.IInfoBarService.ShowInfoBar(System.String,Microsoft.CodeAnalysis.Extensions.InfoBarUI[])">
            <summary>
            Show global info bar
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo.Name">
            <summary>
            The name to pattern match against, and to show in a final presentation layer.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo.NameSuffix">
            <summary>
            An optional suffix to be shown in a presentation layer appended to <see cref="F:Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo.Name"/>.
            Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo.ContainerDisplayName">
            <summary>
            Container of the symbol that can be shown in a final presentation layer. 
            For example, the container of a type "KeyValuePair" might be 
            "System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;".  This can 
            then be shown with something like "type System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;"
            to indicate where the symbol is located.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo.FullyQualifiedContainerName">
            <summary>
            Dotted container name of the symbol, used for pattern matching.  For example
            The fully qualified container of a type "KeyValuePair" would be 
            "System.Collections.Generic.Dictionary" (note the lack of type parameters).
            This way someone can search for "D.KVP" and have the "D" part of the pattern
            match against this.  This should not be shown in a presentation layer.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.DeclaredSymbolInfo.InheritanceNames">
            <summary>
            The names directly referenced in source that this type inherits from.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.DependentProjectsFinder">
            <summary>
            Provides helper methods for finding dependent projects across a solution that a given symbol can be referenced within.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.DependentProjectsFinder.GetDependentProjectsWorkerAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            This method computes the dependent projects that need to be searched for references of the given <paramref name="symbol"/>.
            This computation depends on the given symbol's visibility:
                1) Public: Dependent projects include the symbol definition project and all the referencing projects.
                2) Internal: Dependent projects include the symbol definition project and all the referencing projects that have internals access to the definition project.
                3) Private: Dependent projects include the symbol definition project and all the referencing submission projects (which are special and can reference private fields of the previous submission).
            
            We perform this computation in two stages:
                1) Compute all the dependent projects (submission + non-submission) and their InternalsVisibleTo semantics to the definition project.
                2) Filter the above computed dependent projects based on symbol visibility.
            Dependent projects computed in stage (1) are cached to avoid recomputation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.DependentProjectsFinder.GetSymbolOrigination(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Returns a pair of data bout where <paramref name="symbol"/> originates from.  It's <see
            cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/> for both source and metadata symbols, and an optional <see cref="T:Microsoft.CodeAnalysis.Project"/> if this
            was a symbol from source.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder">
            <summary>
            Provides helper methods for finding dependent types (derivations, implementations, etc.) across a solution. This
            is effectively a graph walk between INamedTypeSymbols walking down the inheritance hierarchy to find related
            types based either on <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.BaseType"/> or <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.
            </summary>
            <remarks>
            While walking up the inheritance hierarchy is trivial (as the information is directly contained on the <see
            cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/>'s themselves), walking down is complicated.  The general way this works is by using
            out-of-band indices that are built that store this type information in a weak manner.  Specifically, for both
            source and metadata types we have indices that map between the base type name and the inherited type name. i.e.
            for the case <c>class A { } class B : A { }</c> the index stores a link saying "There is a type 'A' somewhere
            which has derived type called 'B' somewhere".  So when the index is examined for the name 'A', it will say
            'examine types called 'B' to see if they're an actual match'.
            <para/>
            These links are then continually traversed to get the full set of results.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.DescendInheritanceTreeAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Func{Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.INamedTypeSymbol},System.Boolean},System.Func{Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Walks down a <paramref name="type"/>'s inheritance tree looking for more <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>'s
            that match the provided <paramref name="typeMatches"/> predicate.
            </summary>
            <param name="shouldContinueSearching">Called when a new match is found to check if that type's inheritance
            tree should also be walked down.  Can be used to stop the search early if a type could have no types that
            inherit from it that would match this search.</param>
            <param name="transitive">If this search after finding the direct inherited types that match the provided
            predicate, or if the search should continue recursively using those types as the starting point.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.PropagateTemporaryResults(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.INamedTypeSymbol},System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.INamedTypeSymbol},System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.INamedTypeSymbol},System.Boolean,System.Func{Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean})">
            <summary>
            Moves all the types in <paramref name="tempBuffer"/> to <paramref name="result"/>.  If these are types we
            haven't seen before, and the caller says we <paramref name="shouldContinueSearching"/> on them, then add
            them to <paramref name="typesToSearchFor"/> for the next round of searching.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.FindDocumentsAsync(Microsoft.CodeAnalysis.Project,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken,System.String[])">
            <summary>
            Finds all the documents in the provided project that contain the requested string
            values
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.FindDocumentsWithGlobalSuppressMessageAttributeAsync(Microsoft.CodeAnalysis.Project,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken)">
            <summary>
            Finds all the documents in the provided project that contain a global attribute in them.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.CollectMatchingReferences">
            <summary>
            If the `node` implicitly matches the `symbol`, then it will be added to `locations`.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.FindReferencesInDocumentInsideGlobalSuppressionsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Find references to a symbol inside global suppressions.
            For example, consider a field 'Field' defined inside a type 'C'.
            This field's documentation comment ID is 'F:C.Field'
            A reference to this field inside a global suppression would be as following:
                [assembly: SuppressMessage("RuleCategory", "RuleId', Scope = "member", Target = "~F:C.Field")]
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.ValidateAndSplitDocumentationCommentId(System.String,System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Validate and split a documentation comment ID into a prefix and complete symbol ID. For the
            <paramref name="docCommentId"/> <c>~M:C.X(System.String)</c>, the <paramref name="prefix"/> would be
            <c>~M:</c> and <paramref name="id"/> would be <c>C.X(System.String)</c>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.SplitIdAndArguments(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Split a full documentation symbol ID into the core symbol ID and optional parameter list. For the
            <paramref name="id"/> <c>C.X(System.String)</c>, the <paramref name="idPartBeforeArguments"/> would be
            <c>C.X</c> and <paramref name="arguments"/> would be <c>(System.String)</c>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.ValidateAndSplitDocumentationCommentId(System.String,System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
             <summary>
             Validate and split symbol documentation comment ID.
             For example, "~M:C.X(System.String)" represents the documentation comment ID of a method named 'X'
             that takes a single string-typed parameter and is contained in a type named 'C'.
            
             We divide the ID into 3 groups:
             1. Prefix:
                 - Starts with an optional '~'
                 - Followed by a single capital letter indicating the symbol kind (for example, 'M' indicates method symbol)
                 - Followed by ':'
             2. Core symbol ID, which is its fully qualified name before the optional parameter list and return type (i.e. before the '(' or '[' tokens)
             3. Optional parameter list and/or return type that begins with a '(' or '[' tokens.
            
             For the above example, "~M:" is the prefix, "C.X" is the core symbol ID and "(System.String)" is the parameter list.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.ConstructorSymbolReferenceFinder.AddReferencesInDocumentWorkerAsync(Microsoft.CodeAnalysis.IMethodSymbol,System.String,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation},System.Threading.CancellationToken)">
            <summary>
            Finds references to <paramref name="symbol"/> in this <paramref name="document"/>, but
            only if it referenced though <paramref name="name"/> (which might be the actual name
            of the type, or a global alias to it).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation.Node">
            <summary>
            The actual node that we found the reference on.  Normally the 'Name' portion
            of any piece of syntax.  Might also be something like a 'foreach' statement node
            when finding results for something like GetEnumerator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation.Location">
            <summary>
            The location we want want to return through the FindRefs API.  The location contains
            additional information (like if this was a Write, or if it was Implicit).  This value
            also has a <see cref="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Location"/> property.  Importantly, this value
            is not necessarily the same location you would get by calling <see cref="F:Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation.Node"/>.<see
            cref="M:Microsoft.CodeAnalysis.SyntaxNode.GetLocation"/>.  Instead, this location is where we want to navigate
            the user to.  A case where this can be different is with an indexer reference.  The <see
            cref="F:Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation.Node"/> will be the node for the full 'ElementAccessExpression', whereas the 
            location we will take the user to will be the zero-length position immediately preceding
            the `[` character.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.Finders.ILanguageServiceReferenceFinder">
            <summary>
            Extensibility interface to allow individual languages to extend the 'Find References' service. 
            Languages can use this to provide specialized cascading logic between symbols that 'Find 
            References' is searching for.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.Finders.IReferenceFinder">
            <summary>
            Extensibility interface to allow extending the IFindReferencesService service.  Implementations
            must be thread-safe as the methods on this interface may be called on multiple threads
            simultaneously.  Implementations should also respect the provided cancellation token and
            should try to cancel themselves quickly when requested.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.IReferenceFinder.DetermineGlobalAliasesAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)">
            <summary>
            Determines what, if any, global alias names could potentially map this symbol in this project.
            Note that this result is allowed to return global aliases that don't actually map to this symbol.
            For example, given symbol <c>A.X</c> and <c>global alias G = B.X</c>, <c>G</c> might be returned
            in a search for <c>A.X</c> because they both end in <c>X</c>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.IReferenceFinder.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Called by the find references search engine when a new symbol definition is found.
            Implementations can then choose to request more symbols be searched for.  For example, an
            implementation could choose for the find references search engine to cascade to
            constructors when searching for standard types.
            
            Implementations of this method must be thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.IReferenceFinder.DetermineDocumentsToSearchAsync(Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.HashSet{System.String},Microsoft.CodeAnalysis.Project,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Called by the find references search engine to determine which documents in the supplied
            project need to be searched for references.  Only projects returned by
            DetermineProjectsToSearch will be passed to this method.
            
            Implementations should endeavor to keep the list of returned documents as small as
            possible to keep search time down to a minimum.  Returning the entire list of documents
            in a project is not recommended (unless, of course, there is reasonable reason to
            believe there are references in every document).
            
            Implementations of this method must be thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.IReferenceFinder.FindReferencesInDocumentAsync(Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.HashSet{System.String},Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Called by the find references search engine to determine the set of reference locations
            in the provided document.  Only documents returned by DetermineDocumentsToSearch will be
            passed to this method. 
            
            Implementations of this method must be thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.NamedTypeSymbolReferenceFinder.AddDocumentsToSearchAsync(System.String,Microsoft.CodeAnalysis.Project,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken)">
            <summary>
            Looks for documents likely containing <paramref name="throughName"/> in them.  That name will either be the actual
            name of the named type we're looking for, or it might be a global alias to it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.NamedTypeSymbolReferenceFinder.AddNonAliasReferencesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation},System.Threading.CancellationToken)">
            <summary>
            Finds references to <paramref name="symbol"/> in this <paramref name="document"/>, but
            only if it referenced though <paramref name="name"/> (which might be the actual name
            of the type, or a global alias to it).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.Finders.NamespaceSymbolReferenceFinder.AddReferencesAsync(Microsoft.CodeAnalysis.INamespaceSymbol,System.String,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.FindSymbols.Finders.FinderLocation},System.Threading.CancellationToken)">
            <summary>
            Finds references to <paramref name="symbol"/> in this <paramref name="document"/>, but
            only if it referenced though <paramref name="name"/> (which might be the actual name
            of the type, or a global alias to it).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.Finders.ReferenceFinders.DefaultReferenceFinders">
            <summary>
            The list of common reference finders.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.NoOpFindReferencesProgress">
            <summary>
            A does-nothing version of the <see cref="T:Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress"/>. Useful for
            clients that have no need to report progress as they work.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.BidirectionalSymbolSet">
            <summary>
            Symbol set used when <see cref="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.UnidirectionalHierarchyCascade"/> is <see
            langword="false"/>.  This symbol set will cascade up *and* down the inheritance hierarchy for all symbols we
            are searching for.  This is the symbol set used for features like 'Rename', where all cascaded symbols must
            be updated in order to keep the code compiling.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.BidirectionalSymbolSet._allSymbols">
            <summary>
            When we're cascading in both direction, we can just keep all symbols in a single set.  We'll always be
            examining all of them to go in both up and down directions in every project we process.  Any time we
            add a new symbol to it we'll continue to cascade in both directions looking for more.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine._scheduler">
            <summary>
            Scheduler to run our tasks on.  If we're in <see cref="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.Explicit"/> mode, we'll
            run all our tasks concurrently.  Otherwise, we will run them serially using <see cref="F:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.s_exclusiveScheduler"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine._symbolToGroup">
            <summary>
            Mapping from symbols (unified across metadata/retargeting) and the set of symbols that was produced for 
            them in the case of linked files across projects.  This allows references to be found to any of the unified
            symbols, while the user only gets a single reported group back that corresponds to that entire set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.ReportGroupsAsync(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},System.Threading.CancellationToken)">
            <summary>
            Notify the caller of the engine about the definitions we've found that we're looking for.  We'll only notify
            them once per symbol group, but we may have to notify about new symbols each time we expand our symbol set
            when we walk into a new project.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.NonCascadingSymbolSet">
            <summary>
            A symbol set used when the find refs caller does not want cascading.  This is a trivial impl that basically
            just wraps the initial symbol provided and doesn't need to do anything beyond that.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet">
            <summary>
            Represents the set of symbols that the engine is searching for.  While the find-refs engine is passed an
            initial symbol to find results for, the engine will often have to 'cascade' that symbol to many more symbols
            that clients will also need.  This includes:
            <list type="number">
            <item>Cascading to all linked symbols for the requested symbol.  This ensures a unified set of results for a
            particular symbol, regardless of what project context it was originally found in.</item>
            <item>Symbol specific cascading.  For example, when searching for a named type, references to that named
            type will be found through its constructors.</item>
            <item>Cascading up and down the inheritance hierarchy for members (e.g. methods, properties, events). This
            is controllable through the <see cref="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.UnidirectionalHierarchyCascade"/>
            option.</item>
            </list>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.GetAllSymbols">
            <summary>
            Get a copy of all the symbols in the set.  Cannot be called concurrently with <see
            cref="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.InheritanceCascadeAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.InheritanceCascadeAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)">
            <summary>
            Update the set of symbols in this set with any appropriate symbols in the inheritance hierarchy brought
            in within <paramref name="project"/>.  For example, given a project 'A' with interface <c>interface IGoo
            { void Goo(); }</c>, and a project 'B' with class <c>class Goo : IGoo { public void Goo() { } }</c>,
            then initially the symbol set will only contain IGoo.Goo.  However, when project 'B' is processed, this
            will add Goo.Goo is added to the set as well so that references to it can be found.
            </summary>
            <remarks>
            This method is non threadsafe as it mutates the symbol set instance.  As such, it should only be
            called serially.  <see cref="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.GetAllSymbols"/> should not be called concurrently with this.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.DetermineInitialSearchSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Determines the initial set of symbols that we should actually be finding references for given a request
            to find refs to <paramref name="symbol"/>.  This will include any symbols that a specific <see
            cref="T:Microsoft.CodeAnalysis.FindSymbols.Finders.IReferenceFinder"/> cascades to, as well as all the linked symbols to those across any
            multi-targetting/shared-project documents.  This will not include symbols up or down the inheritance
            hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.AddDownSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.FindSymbols.MetadataUnifyingSymbolHashSet,System.Collections.Generic.Stack{Microsoft.CodeAnalysis.ISymbol},System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds all the symbols 'down' the inheritance hierarchy of <paramref name="symbol"/> in the given
            project.  The symbols found are added to <paramref name="seenSymbols"/>.  If <paramref name="seenSymbols"/> did not
            contain that symbol, then it is also added to <paramref name="workQueue"/> to allow fixed point
            algorithms to continue.
            </summary>
            <remarks><paramref name="projects"/> will always be a single project.  We just pass this in as a set to
            avoid allocating a fresh set every time this calls into FindMemberImplementationsArrayAsync.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.SymbolSet.AddUpSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.FindSymbols.MetadataUnifyingSymbolHashSet,System.Collections.Generic.Stack{Microsoft.CodeAnalysis.ISymbol},System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds all the symbols 'up' the inheritance hierarchy of <paramref name="symbol"/> in the solution.  The
            symbols found are added to <paramref name="seenSymbols"/>.  If <paramref name="seenSymbols"/> did not contain that symbol,
            then it is also added to <paramref name="workQueue"/> to allow fixed point algorithms to continue.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.UnidirectionalSymbolSet">
            <summary>
            Symbol set used when <see cref="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.UnidirectionalHierarchyCascade"/> is <see
            langword="true"/>.  This symbol set will only cascade in a uniform direction once it walks either up or down
            from the initial set of symbols. This is the symbol set used for features like 'Find Refs', where we only
            want to return location results for members that could feasible actually end up calling into that member at
            runtime.  See the docs of <see cref="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.UnidirectionalHierarchyCascade"/> for more
            information on this.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.UnidirectionalSymbolSet._upSymbols">
            <summary>
            When we're doing a unidirectional find-references, the initial set of up-symbols can never change.
            That's because we have computed the up set entirely up front, and no down symbols can produce new
            up-symbols (as going down then up would not be unidirectional).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.AssociatePropertyReferencesWithSpecificAccessor">
            <summary>
            When searching for property, associate specific references we find to the relevant
            accessor symbol (if there is one).  For example, in C#, this would result in:
            
                P = 0;     // A reference to the P.set accessor
                var v = P; // A reference to the P.get accessor
                P++;       // A reference to P.get and P.set accessors
                nameof(P); // A reference only to P.  Not associated with a particular accessor.
                
            The default for this is false.  With that default, all of the above references
            are associated with the property P and not the accessors.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.Cascade">
            <summary>
            Whether or not we should cascade from the original search symbol to new symbols as we're
            doing the find-references search.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.Explicit">
            <summary>
            Whether or not this find ref operation was explicitly invoked or not.  If explicit invoked, the find
            references operation may use more resources to get the results faster.
            </summary>
            <remarks>
            Features that run automatically should consider setting this to <see langword="false"/> to avoid
            unnecessarily impacting the user while they are doing other work.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.UnidirectionalHierarchyCascade">
             <summary>
             When cascading if we should only travel in a consistent direction away from the starting symbol.  For
             example, starting on a virtual method, this would cascade upwards to implemented interface methods, and
             downwards to overridden methods.  However, it would not then travel back down to other implementations of
             those interface methods.  This is useful for cases where the client only wants references that could lead to
             this symbol actually being called into at runtime.
             </summary>
             <remarks>
             There are cases where a client will not want this behavior.  An example of that is 'Rename'.  In rename,
             there is a implicit link between members in a hierarchy with the same name (and appropriate signature).  For example, in:
            
             <code>
             interface I { void Goo(); }
             class C1 : I { public void Goo() { } }
             class C2 : I { public void Goo() { } }
             </code>
             
             If <c>C1.Goo</c> is renamed, this will need to rename <c>C2.Goo</c> as well to keep the code properly
             compiling.  So, by default 'Rename' will cascade to all of these so it can appropriately update them.  This
             option is the more relevant with knowing if a particular reference would actually result in a call to the
             original member, not if it has a relation to the original member.
             </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions.GetFeatureOptionsForStartingSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the appropriate options for a given symbol for the specific 'Find References' feature.  This should
            not be used for other features (like 'Rename').  For the 'Find References' feature, if the user starts
            searching on an accessor, then we want to give results associated with the specific accessor.  Otherwise, if
            they search on a property, then associate everything with the property.  We also only want to travel an
            inheritance hierarchy unidirectionally so that we only see potential references that could actually reach
            this particular member.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.NoOpStreamingFindReferencesProgress">
            <summary>
            A does-nothing version of the <see cref="T:Microsoft.CodeAnalysis.FindSymbols.IStreamingFindReferencesProgress"/>. Useful for
            clients that have no need to report progress as they work.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.StreamingFindReferencesProgressAdapter">
            <summary>
            Wraps an <see cref="T:Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress"/> into an <see cref="T:Microsoft.CodeAnalysis.FindSymbols.IStreamingFindReferencesProgress"/>
            so it can be used from the new streaming find references APIs.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress">
            <summary>
            Reports the progress of the FindReferences operation.  Note: these methods may be called on
            any thread.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.SymbolGroup">
            <summary>
            Represents a group of <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>s that should be treated as a single entity for
            the purposes of presentation in a Find UI.  For example, when a symbol is defined in a file
            that is linked into multiple project contexts, there will be several unique symbols created
            that we search for.  Placing these in a group allows the final consumer to know that these 
            symbols can be merged together.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SymbolGroup.Symbols">
            <summary>
            All the symbols in the group.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.IStreamingFindReferencesProgress">
            <summary>
            Reports the progress of the FindReferences operation.  Note: these methods may be called on
            any thread.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol">
            <summary>
            Represents a single result of the call to the synchronous
            IFindReferencesService.FindReferences method. Finding the references to a symbol will result
            in a set of definitions being returned (containing at least the symbol requested) as well as
            any references to those definitions in the source. Multiple definitions may be found due to
            how C# and VB allow a symbol to be both a definition and a reference at the same time (for
            example, a method which implements an interface method).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.Definition">
            <summary>
            The symbol definition that these are references to.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.LocationsArray">
            <summary>
            Same as <see cref="P:Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.Locations"/> but exposed as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> for performance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.Locations">
            <summary>
            The set of reference locations in the solution.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation">
            <summary>
            Information about a reference to a symbol.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Document">
            <summary>
            The document that the reference was found in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Alias">
            <summary>
            If the symbol was bound through an alias, then this is the alias that was used.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Location">
            <summary>
            The actual source location for a given symbol.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsImplicit">
            <summary>
            Indicates if this is an implicit reference to the definition.  i.e. the definition wasn't
            explicitly stated in the source code at this position, but it was still referenced. For
            example, this can happen with special methods like GetEnumerator that are used
            implicitly by a 'for each' statement.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsWrittenTo">
            <summary>
            Indicates if this is a location where the reference is written to.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.SymbolUsageInfo">
            <summary>
            Symbol usage info for this reference.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.AdditionalProperties">
            <summary>
            Additional properties for this reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.ContainingStringLocation">
            <summary>
            If this reference location is within a string literal, then this property
            indicates the location of the containing string literal token.
            Otherwise, <see cref="P:Microsoft.CodeAnalysis.Location.None"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.IAliasSymbol,Microsoft.CodeAnalysis.Location,System.Boolean,Microsoft.CodeAnalysis.SymbolUsageInfo,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},Microsoft.CodeAnalysis.CandidateReason)">
            <summary>
            Creates a reference location with the given properties.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.Location)">
            <summary>
            Creates a reference location within a string literal.
            For example, location inside the target string of a global SuppressMessageAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsCandidateLocation">
            <summary>
            Indicates if this was not an exact reference to a location, but was instead a possible
            location that was found through error tolerance.  For example, a call to a method like
            "Goo()" could show up as an error tolerance location to a method "Goo(int i)" if no
            actual "Goo()" method existed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchKind.Exact">
            <summary>
            Use an case-sensitive comparison when searching for matching items.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchKind.ExactIgnoreCase">
            <summary>
            Use a case-insensitive comparison when searching for matching items.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchKind.Fuzzy">
            <summary>
            Use a fuzzy comparison when searching for matching items. Fuzzy matching allows for 
            a certain amount of misspellings, missing words, etc. See <see cref="T:Roslyn.Utilities.SpellChecker"/> for 
            more details.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchKind.Custom">
            <summary>
            Search term is matched in a custom manner (i.e. with a user provided predicate).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchQuery.Name">
            <summary>The name being searched for.  Is null in the case of custom predicate searching..  But 
            can be used for faster index based searching when it is available.</summary> 
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchQuery.Kind">
            <summary>The kind of search this is.  Faster index-based searching can be used if the 
             SearchKind is not <see cref="F:Microsoft.CodeAnalysis.FindSymbols.SearchKind.Custom"/>.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SearchQuery._predicate">
            <summary>The predicate to fall back on if faster index searching is not possible.</summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.StreamingProgressCollector">
            <summary>
            Collects all the <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> definitions and <see cref="T:Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation"/> 
            references that are reported independently and packages them up into the final list
            of <see cref="T:Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol" />.  This is used by the old non-streaming Find-References
            APIs to return all the results at the end of the operation, as opposed to broadcasting
            the results as they are found.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo">
            <summary>
            Contains information about a call from one symbol to another.  The symbol making the call is
            stored in CallingSymbol and the symbol that the call was made to is stored in CalledSymbol.
            Whether or not the call is direct or indirect is also stored.  A direct call is a call that
            does not go through any other symbols in the inheritance hierarchy of CalledSymbol, while an
            indirect call does go through the inheritance hierarchy.  For example, calls through a base
            member that this symbol overrides, or through an interface member that this symbol
            implements will be considered 'indirect'. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol">
            <summary>
            The symbol that is calling the symbol being called.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations">
            <summary>
            The locations inside the calling symbol where the called symbol is referenced.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol">
            <summary>
            The symbol being called.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect">
            <summary>
            True if the CallingSymbol is directly calling CalledSymbol.  False if it is calling a
            symbol in the inheritance hierarchy of the CalledSymbol.  For example, if the called
            symbol is a class method, then an indirect call might be through an interface method that
            the class method implements.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSymbolAtPosition(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Obsolete.  Use <see cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSymbolAtPositionAsync(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSymbolAtPositionAsync(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Finds the symbol that is associated with a position in the text of a document.
            </summary>
            <param name="semanticModel">The semantic model associated with the document.</param>
            <param name="position">The character position within the document.</param>
            <param name="workspace">A workspace to provide context.</param>
            <param name="cancellationToken">A CancellationToken.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDefinitionAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Finds the definition symbol declared in source code for a corresponding reference symbol. 
            Returns null if no such symbol can be found in the specified solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSimilarSymbols``1(``0,Microsoft.CodeAnalysis.Compilation,System.Threading.CancellationToken)">
            <summary>
            Finds symbols in the given compilation that are similar to the specified symbol.
            
            A found symbol may be the exact same symbol instance if the compilation is the origin of the specified symbol, 
            or it may be a different symbol instance if the compilation is not the originating compilation.
            
            Multiple symbols may be returned if there are ambiguous matches.
            No symbols may be returned if the compilation does not define or have access to a similar symbol.
            </summary>
            <param name="symbol">The symbol to find corresponding matches for.</param>
            <param name="compilation">A compilation to find the corresponding symbol within. The compilation may or may not be the origin of the symbol.</param>
            <param name="cancellationToken">A CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindLinkedSymbolsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            If <paramref name="symbol"/> is declared in a linked file, then this function returns all the symbols that
            are defined by the same symbol's syntax in the all projects that the linked file is referenced from.
            <para/>
            In order to be returned the other symbols must have the same <see cref="P:Microsoft.CodeAnalysis.ISymbol.Name"/> and <see
            cref="P:Microsoft.CodeAnalysis.ISymbol.Kind"/> as <paramref name="symbol"/>.  This matches general user intuition that these are all
            the 'same' symbol, and should be examined, regardless of the project context and <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> they
            originally started with.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesServerCallback">
            <summary>
            Callback object we pass to the OOP server to hear about the result 
            of the FindReferencesEngine as it executes there.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindCallersAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Finds all the callers of a specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindCallersAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken)">
            <summary>
            Finds all the callers of a specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDeclarationsAsync(Microsoft.CodeAnalysis.Project,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Find the declared symbols from either source, referenced projects or metadata assemblies with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDeclarationsAsync(Microsoft.CodeAnalysis.Project,System.String,System.Boolean,Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the declared symbols from either source, referenced projects or metadata assemblies with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution,System.Func{System.String,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with a matching name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution,System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with a matching name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project,System.Func{System.String,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with a matching name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project,System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with a matching name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution,System.String,System.Boolean,Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project,System.String,System.Boolean,Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsWithPatternAsync(Microsoft.CodeAnalysis.Solution,System.String,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified pattern. This pattern is matched
            using heuristics that may change from release to release. So, the set of symbols matched by a given
            pattern may change between releases. For example, new symbols may be matched by a pattern and/or
            symbols previously matched by a pattern no longer are. However, the set of symbols matched by a
            specific release will be consistent for a specific pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsWithPatternAsync(Microsoft.CodeAnalysis.Solution,System.String,Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified pattern. This pattern is matched
            using heuristics that may change from release to release. So, the set of symbols matched by a given
            pattern may change between releases. For example, new symbols may be matched by a pattern and/or
            symbols previously matched by a pattern no longer are. However, the set of symbols matched by a
            specific release will be consistent for a specific pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsWithPatternAsync(Microsoft.CodeAnalysis.Project,System.String,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified pattern. This pattern is matched
            using heuristics that may change from release to release. So, the set of symbols matched by a given
            pattern may change between releases. For example, new symbols may be matched by a pattern and/or
            symbols previously matched by a pattern no longer are. However, the set of symbols matched by a
            specific release will be consistent for a specific pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsWithPatternAsync(Microsoft.CodeAnalysis.Project,System.String,Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)">
            <summary>
            Find the symbols for declarations made in source with the specified pattern. This pattern is matched
            using heuristics that may change from release to release. So, the set of symbols matched by a given
            pattern may change between releases. For example, new symbols may be matched by a pattern and/or
            symbols previously matched by a pattern no longer are. However, the set of symbols matched by a
            specific release will be consistent for a specific pattern.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Finds all references to a symbol throughout a solution
            </summary>
            <param name="symbol">The symbol to find references to.</param>
            <param name="solution">The solution to find references within.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken)">
            <summary>
            Finds all references to a symbol throughout a solution
            </summary>
            <param name="symbol">The symbol to find references to.</param>
            <param name="solution">The solution to find references within.</param>
            <param name="documents">A set of documents to be searched. If documents is null, then that means "all documents".</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Document},System.Threading.CancellationToken)">
            <summary>
            Finds all references to a symbol throughout a solution
            </summary>
            <param name="symbol">The symbol to find references to.</param>
            <param name="solution">The solution to find references within.</param>
            <param name="progress">An optional progress object that will receive progress
            information as the search is undertaken.</param>
            <param name="documents">An optional set of documents to be searched. If documents is null, then that means "all documents".</param>
            <param name="cancellationToken">An optional cancellation token.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypesAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol},System.Threading.CancellationToken)">
            <summary>
            Verifies that all pairs of named types in equivalentTypesWithDifferingAssemblies are equivalent forwarded types.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypeAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.Compilation},System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if <paramref name="candidate"/> was forwarded to <paramref name="forwardedTo"/> in
            <paramref name="forwardedTo"/>'s <see cref="T:Microsoft.CodeAnalysis.Compilation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindOverridesAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Find symbols for members that override the specified member symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindOverridesArrayAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindOverridesAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>
            <remarks>
            Use this overload to avoid boxing the result into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementedInterfaceMembersAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Find symbols for declarations that implement members of the specified interface symbol
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementedInterfaceMembersArrayAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementedInterfaceMembersAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>
            <remarks>
            Use this overload to avoid boxing the result into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedClassesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds all the derived classes of the given type. Implementations of an interface are not considered
            "derived", but can be found with <see cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>.
            </summary>
            <param name="type">The symbol to find derived types of.</param>
            <param name="solution">The solution to search in.</param>
            <param name="projects">The projects to search. Can be null to search the entire solution.</param>
            <param name="cancellationToken"></param>
            <returns>The derived types of the symbol. The symbol passed in is not included in this list.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedClassesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds the derived classes of the given type. Implementations of an interface are not considered
            "derived", but can be found with <see cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>.
            </summary>
            <param name="type">The symbol to find derived types of.</param>
            <param name="solution">The solution to search in.</param>
            <param name="transitive">If the search should stop at immediately derived classes, or should continue past that.</param>
            <param name="projects">The projects to search. Can be null to search the entire solution.</param>
            <param name="cancellationToken"></param>
            <returns>The derived types of the symbol. The symbol passed in is not included in this list.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedClassesArrayAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedClassesArrayAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>
            <remarks> Use this overload to avoid boxing the result into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedInterfacesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds the derived interfaces of the given interfaces.
            </summary>
            <param name="type">The symbol to find derived types of.</param>
            <param name="solution">The solution to search in.</param>
            <param name="transitive">If the search should stop at immediately derived interfaces, or should continue past that.</param>
            <param name="projects">The projects to search. Can be null to search the entire solution.</param>
            <returns>The derived interfaces of the symbol. The symbol passed in is not included in this list.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedInterfacesArrayAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDerivedInterfacesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>
            <remarks> Use this overload to avoid boxing the result into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds the accessible <see langword="class"/> or <see langword="struct"/> types that implement the given
            interface.
            </summary>
            <param name="type">The symbol to find derived types of.</param>
            <param name="solution">The solution to search in.</param>
            <param name="transitive">If the search should stop at immediately derived interfaces, or should continue past that.</param>
            <param name="projects">The projects to search. Can be null to search the entire solution.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsArrayAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.Solution,System.Boolean,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>
            <remarks> Use this overload to avoid boxing the result into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <summary>
            Finds all the accessible symbols that implement an interface or interface member.  For an <see
            cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> this will be both immediate and transitive implementations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindMemberImplementationsArrayAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.IImmutableSet{Microsoft.CodeAnalysis.Project},System.Threading.CancellationToken)"/>
            <remarks>
            Use this overload to avoid boxing the result into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTree.ISymbolTreeInfoCacheService.TryGetSourceSymbolTreeInfoAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)">
            <summary>
            Returns null if the info cannot be retrieved from the cache.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTree.ISymbolTreeInfoCacheService.TryGetMetadataSymbolTreeInfoAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.PortableExecutableReference,System.Threading.CancellationToken)">
            <summary>
            Returns null if the info cannot be retrieved from the cache.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo._nodes">
            <summary>
            The list of nodes that represent symbols. The primary key into the sorting of this 
            list is the name. They are sorted case-insensitively with the <see cref="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.s_totalComparer" />.
            Finding case-sensitive matches can be found by binary searching for something that 
            matches insensitively, and then searching around that equivalence class for one that 
            matches.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo._inheritanceMap">
            <summary>
            Inheritance information for the types in this assembly.  The mapping is between
            a type's simple name (like 'IDictionary') and the simple metadata names of types 
            that implement it or derive from it (like 'Dictionary').
            
            Note: to save space, all names in this map are stored with simple ints.  These
            ints are the indices into _nodes that contain the nodes with the appropriate name.
            
            This mapping is only produced for metadata assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo._receiverTypeNameToExtensionMethodMap">
            <summary>
            Maps the name of receiver type name to its <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ExtensionMethodInfo" />.
            <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ParameterTypeInfo"/> for the definition of simple/complex methods.
            For non-array simple types, the receiver type name would be its metadata name, e.g. "Int32".
            For any array types with simple type as element, the receiver type name would be just "ElementTypeName[]", e.g. "Int32[]" for int[][,]
            For non-array complex types, the receiver type name is "".
            For any array types with complex type as element, the receier type name is "[]"
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo._spellCheckerTask">
            <summary>
            The task that produces the spell checker we use for fuzzy match queries.
            We use a task so that we can generate the <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo"/> 
            without having to wait for the spell checker construction to finish.
            
            Features that don't need fuzzy matching don't want to incur the cost of 
            the creation of this value.  And the only feature which does want fuzzy
            matching (add-using) doesn't want to block waiting for the value to be
            created.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.FuzzyFindAsync(Roslyn.Utilities.AsyncLazy{Microsoft.CodeAnalysis.IAssemblySymbol},System.String,System.Threading.CancellationToken)">
            <summary>
            Finds symbols in this assembly that match the provided name in a fuzzy manner.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.FindAsync(Roslyn.Utilities.AsyncLazy{Microsoft.CodeAnalysis.IAssemblySymbol},System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get all symbols that have a name matching the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.FindNodeIndices(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.Node},System.String,Microsoft.CodeAnalysis.Utilities.StringSliceComparer)">
            <summary>
            Gets all the node indices with matching names per the <paramref name="comparer" />.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.BinarySearch(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.Node},System.String)">
            <summary>
            Searches for a name in the ordered list that matches per the <see cref="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.s_caseInsensitiveComparer" />.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.s_metadataIdToInfo">
            <summary>
            Cache the symbol tree infos for assembly symbols that share the same underlying metadata. Generating symbol
            trees for metadata can be expensive (in large metadata cases).  And it's common for us to have many threads
            to want to search the same metadata simultaneously. As such, we use an AsyncLazy to compute the value that
            can be shared among all callers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.FirstEntityHandleProvider">
            <summary>
            Used to produce the simple-full-name components of a type from metadata.
            The name is 'simple' in that it does not contain things like backticks,
            generic arguments, or nested type + separators.  Instead just hte name
            of the type, any containing types, and the component parts of its namespace
            are added.  For example, for the type "X.Y.O`1.I`2, we will produce [X, Y, O, I]
            
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.BuilderNode">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.BuilderNode"/>s are produced when initially creating our indices.
            They store Names of symbols and the index of their parent symbol.  When we
            produce the final <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo"/> though we will then convert
            these to <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.Node"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.Node.Name">
            <summary>
            The Name of this Node.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.Node.ParentIndex">
            <summary>
            Index in <see cref="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo._nodes"/> of the parent Node of this Node.
            Value will be <see cref="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.RootNodeParentIndex"/> if this is the 
            Node corresponding to the root symbol.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ParameterTypeInfo.Name">
            <summary>
            This is the type name of the parameter when <see cref="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ParameterTypeInfo.IsComplexType"/> is false. 
            For array types, this is just the elemtent type name.
            e.g. `int` for `int[][,]` 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ParameterTypeInfo.IsArray">
            <summary>
            Indicate if the type of parameter is any kind of array.
            This is relevant for both simple and complex types. For example:
            - array of simple type like int[], int[][], int[][,], etc. are all ultimately represented as "int[]" in index.
            - array of complex type like T[], T[][], etc are all represented as "[]" in index, 
              in contrast to just "" for non-array types.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ParameterTypeInfo.IsComplexType">
            <summary>
            Similar to <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.ExtensionMethodInfo"/>, we divide extension methods into simple 
            and complex categories for filtering purpose. Whether a method is simple is determined based on if we 
            can determine it's receiver type easily with a pure text matching. For complex methods, we will need to
            rely on symbol to decide if it's feasible.
            
            Simple types include:
            - Primitive types
            - Types which is not a generic method parameter
            - By reference type of any types above
            - Array types with element of any types above
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ExtensionMethodInfo.Name">
            <summary>
            Name of the extension method. 
            This can be used to retrive corresponding symbols via <see cref="M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(System.String)"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.ExtensionMethodInfo.FullyQualifiedContainerName">
            <summary>
            Fully qualified name for the type that contains this extension method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GetInfoForMetadataReferenceAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.PortableExecutableReference,Microsoft.CodeAnalysis.Checksum,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Produces a <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo"/> for a given <see cref="T:Microsoft.CodeAnalysis.PortableExecutableReference"/>.
            Note:  will never return null;
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.MetadataDefinition.ReceiverTypeInfo">
            <summary>
            Only applies to member kind. Represents the type info of the first parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.LoadOrCreateSpellCheckerAsync(Microsoft.CodeAnalysis.Host.HostWorkspaceServices,Microsoft.CodeAnalysis.Storage.SolutionKey,Microsoft.CodeAnalysis.Checksum,Microsoft.CodeAnalysis.Storage.StorageDatabase,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.Node})">
            <summary>
            Loads the SpellChecker for a given assembly symbol (metadata or project).  If the
            info can't be loaded, it will be created (and persisted if possible).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.TryLoadOrCreateAsync``1(Microsoft.CodeAnalysis.Host.HostWorkspaceServices,Microsoft.CodeAnalysis.Storage.SolutionKey,Microsoft.CodeAnalysis.Checksum,Microsoft.CodeAnalysis.Storage.StorageDatabase,System.Boolean,System.Func{System.Threading.Tasks.Task{``0}},System.String,System.Func{Roslyn.Utilities.ObjectReader,``0},System.Threading.CancellationToken)">
            <summary>
            Generalized function for loading/creating/persisting data.  Used as the common core
            code for serialization of SymbolTreeInfos and SpellCheckers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.s_projectToSourceChecksum">
            <summary>
            Cache of project to the checksum for it so that we don't have to expensively recompute
            this each time we get a project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.ExtensionMethodInfo.ReceiverTypeNameToExtensionMethodMap">
            <summary>
            Name of the extension method's receiver type to the index of its DeclaredSymbolInfo in `_declarationInfo`.
            
            For simple types, the receiver type name is it's metadata name. All predefined types are converted to its metadata form.
            e.g. int => Int32. For generic types, type parameters are ignored.
            
            For complex types, the receiver type name is "".
            
            For any kind of array types, it's "{element's receiver type name}[]".
            e.g. 
            int[][,] => "Int32[]"
            T (where T is a type parameter) => ""
            T[,] (where T is a type parameter) => "T[]"
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.IdentifierInfo.ProbablyContainsIdentifier(System.String)">
            <summary>
            Returns true when the identifier is probably (but not guaranteed) to be within the
            syntax tree.  Returns false when the identifier is guaranteed to not be within the
            syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.IdentifierInfo.ProbablyContainsEscapedIdentifier(System.String)">
            <summary>
            Returns true when the identifier is probably (but not guaranteed) escaped within the
            text of the syntax tree.  Returns false when the identifier is guaranteed to not be
            escaped within the text of the syntax tree.  An identifier that is not escaped within
            the text can be found by searching the text directly.  An identifier that is escaped can
            only be found by parsing the text and syntactically interpreting any escaping
            mechanisms found in the language ("\uXXXX" or "@XXXX" in C# or "[XXXX]" in Visual
            Basic).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.LiteralInfo.ProbablyContainsStringValue(System.String)">
            <summary>
            Returns true when the identifier is probably (but not guaranteed) to be within the
            syntax tree.  Returns false when the identifier is guaranteed to not be within the
            syntax tree.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.s_projectStringTable">
            <summary>
            String interning table so that we can share many more strings in our DeclaredSymbolInfo
            buckets.  Keyed off a Project instance so that we share all these strings as we create
            the or load the index items for this a specific Project.  This helps as we will generally 
            be creating or loading all the index items for the documents in a Project at the same time.
            Once this project is let go of (which happens with any solution change) then we'll dump
            this string table.  The table will have already served its purpose at that point and 
            doesn't need to be kept around further.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.DeclaredSymbolInfoSet">
            <summary>
            Same as <see cref="P:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.DeclaredSymbolInfos"/>, just stored as a set for easy containment checks.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetGlobalAliases(System.String,System.Int32)">
            <summary>
            Gets the set of global aliases that point to something with the provided name and arity.
            For example of there is <c>global alias X = A.B.C&lt;int&gt;</c>, then looking up with
            <c>name="C"</c> and arity=1 will return <c>X</c>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.AbstractFormattingService">
            <summary>
            Base implementation of C# and VB formatting services.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Formatter">
            <summary>
            Formats whitespace in documents or syntax trees.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.Formatter.Annotation">
            <summary>
            The annotation used to mark portions of a syntax tree to be formatted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetDefaultFormattingRules(Microsoft.CodeAnalysis.Document)">
            <summary>
            Gets the formatting rules that would be applied if left unspecified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetDefaultFormattingRules(Microsoft.CodeAnalysis.Workspace,System.String)">
            <summary>
            Gets the formatting rules that would be applied if left unspecified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in a document.
            </summary>
            <param name="document">The document to format.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in an area of a document corresponding to a text span.
            </summary>
            <param name="document">The document to format.</param>
            <param name="span">The span of the document's text to format.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in areas of a document corresponding to multiple non-overlapping spans.
            </summary>
            <param name="document">The document to format.</param>
            <param name="spans">The spans of the document's text to format.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in areas of a document corresponding to annotated nodes.
            </summary>
            <param name="document">The document to format.</param>
            <param name="annotation">The annotation used to find on nodes to identify spans to format.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in areas of a syntax tree corresponding to annotated nodes.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="annotation">The annotation used to find nodes to identify spans to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted tree's root node.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace of a syntax tree.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted tree's root node.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in areas of a syntax tree identified by a span.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="span">The span within the node's full span to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted tree's root node.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in areas of a syntax tree identified by multiple non-overlapping spans.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="spans">The spans within the node's full span to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted tree's root node.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Determines the changes necessary to format the whitespace of a syntax tree.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The changes necessary to format the tree.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Determines the changes necessary to format the whitespace of a syntax tree.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="span">The span within the node's full span to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The changes necessary to format the tree.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Determines the changes necessary to format the whitespace of a syntax tree.
            </summary>
            <param name="node">The root node of a syntax tree to format.</param>
            <param name="spans">The spans within the node's full span to format.</param>
            <param name="workspace">A workspace used to give the formatting context.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The changes necessary to format the tree.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Formatter.OrganizeImportsAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Organizes the imports in the document.
            </summary>
            <param name="document">The document to organize.</param>
            <param name="cancellationToken">The cancellation token that the operation will observe.</param>
            <returns>The document with organized imports. If the language does not support organizing imports, or if no changes were made, this method returns <paramref name="document"/>.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.FormattingBehaviorOptions">
            <summary>
            Solution-wide formatting options.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingBehaviorOptions.PreferredWrappingColumn">
            <summary>
            Default value of 120 was picked based on the amount of code in a github.com diff at 1080p.
            That resolution is the most common value as per the last DevDiv survey as well as the latest
            Steam hardware survey.  This also seems to a reasonable length default in that shorter
            lengths can often feel too cramped for .NET languages, which are often starting with a
            default indentation of at least 16 (for namespace, class, member, plus the final construct
            indentation).
            
            TODO: Currently the option has no storage and always has its default value. See https://github.com/dotnet/roslyn/pull/30422#issuecomment-436118696.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingBehaviorOptions.AllowDisjointSpanMerging">
            <summary>
            TODO: Currently the option has no storage and always has its default value. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.FormattingOptions">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.Formatting.FormattingOptions2"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingOptions.UseTabs">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.Formatting.FormattingOptions2.UseTabs"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingOptions.TabSize">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.Formatting.FormattingOptions2.TabSize"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentationSize">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.Formatting.FormattingOptions2.IndentationSize"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingOptions.SmartIndent">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Formatting.FormattingBehaviorOptions.SmartIndent"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Formatting.FormattingOptions.NewLine">
            <inheritdoc cref="F:Microsoft.CodeAnalysis.Formatting.FormattingOptions2.NewLine"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.IFormattingService.FormatAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Formats the whitespace in areas of a document corresponding to multiple non-overlapping spans.
            </summary>
            <param name="document">The document to format.</param>
            <param name="spans">The spans of the document's text to format. If null, the entire document should be formatted.</param>
            <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The formatted document.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule">
            <summary>
            Provide a custom formatting operation provider that can intercept/filter/replace default formatting operations.
            </summary>
            <remarks>All methods defined in this class can be called concurrently. Must be thread-safe.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule.AddSuppressOperations(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.SuppressOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextSuppressOperationAction@)">
            <summary>
            Returns SuppressWrappingIfOnSingleLineOperations under a node either by itself or by
            filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule.AddAnchorIndentationOperations(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.AnchorIndentationOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextAnchorIndentationOperationAction@)">
            <summary>
            returns AnchorIndentationOperations under a node either by itself or by filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule.AddIndentBlockOperations(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextIndentBlockOperationAction@)">
            <summary>
            returns IndentBlockOperations under a node either by itself or by filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule.AddAlignTokensOperations(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.AlignTokensOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextAlignTokensOperationAction@)">
            <summary>
            returns AlignTokensOperations under a node either by itself or by filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule.GetAdjustNewLinesOperation(Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.Formatting.Rules.NextGetAdjustNewLinesOperation@)">
            <summary>
            returns AdjustNewLinesOperation between two tokens either by itself or by filtering/replacing a operation returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule.GetAdjustSpacesOperation(Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.Formatting.Rules.NextGetAdjustSpacesOperation@)">
            <summary>
            returns AdjustSpacesOperation between two tokens either by itself or by filtering/replacing a operation returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.CompatAbstractFormattingRule.AddSuppressOperationsSlow(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.SuppressOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextSuppressOperationAction@)">
            <summary>
            Returns SuppressWrappingIfOnSingleLineOperations under a node either by itself or by
            filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.CompatAbstractFormattingRule.AddAnchorIndentationOperationsSlow(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.AnchorIndentationOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextAnchorIndentationOperationAction@)">
            <summary>
            returns AnchorIndentationOperations under a node either by itself or by filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.CompatAbstractFormattingRule.AddIndentBlockOperationsSlow(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextIndentBlockOperationAction@)">
            <summary>
            returns IndentBlockOperations under a node either by itself or by filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.CompatAbstractFormattingRule.AddAlignTokensOperationsSlow(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.AlignTokensOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Formatting.Rules.NextAlignTokensOperationAction@)">
            <summary>
            returns AlignTokensOperations under a node either by itself or by filtering/replacing operations returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.CompatAbstractFormattingRule.GetAdjustNewLinesOperationSlow(Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.Formatting.Rules.NextGetAdjustNewLinesOperation@)">
            <summary>
            returns AdjustNewLinesOperation between two tokens either by itself or by filtering/replacing a operation returned by NextOperation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.CompatAbstractFormattingRule.GetAdjustSpacesOperationSlow(Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.Formatting.Rules.NextGetAdjustSpacesOperation@)">
            <summary>
            returns AdjustSpacesOperation between two tokens either by itself or by filtering/replacing a operation returned by NextOperation
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOperation">
            <summary>
            indicate how many lines are needed between two tokens
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOption">
             <summary>
             Options for <see cref="T:Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOperation"/>.
            
             <list type="bullet">
               <item>
                 <term><see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOption.PreserveLines"/></term>
                 <description>the operation will leave lineBreaks as it is if original lineBreaks are equal or greater than given lineBreaks</description>
               </item>
               <item>
                 <term><see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOption.ForceLines"/></term>
                 <description>the operation will force existing lineBreaks to the given lineBreaks</description>
               </item>
             </list>
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOperation">
            <summary>
            indicate how many spaces are needed between two spaces
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption">
            <summary>
            Options for <see cref="T:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOperation"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.PreserveSpaces">
            <summary>
            Preserve spaces as it is
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.DefaultSpacesIfOnSingleLine">
            <summary>
            <see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.DefaultSpacesIfOnSingleLine"/> means a default space operation created by the formatting
            engine by itself. It has its own option kind to indicates that this is an operation
            generated by the engine itself. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.ForceSpacesIfOnSingleLine">
            <summary>
            <see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.ForceSpacesIfOnSingleLine"/> means forcing the specified spaces between two tokens if two
            tokens are on a single line. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.ForceSpaces">
            <summary>
            <see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.ForceSpaces"/> means forcing the specified spaces regardless of positions of two tokens.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption.DynamicSpaceToIndentationIfOnSingleLine">
            <summary>
            If two tokens are on a single line, second token will be placed at current indentation if possible
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AlignTokensOperation">
            <summary>
            align first tokens on lines among the given tokens to the base token
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AlignTokensOption">
            <summary>
            option to control <see cref="T:Microsoft.CodeAnalysis.Formatting.Rules.AlignTokensOperation"/> behavior
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.AnchorIndentationOperation">
            <summary>
            preserve relative spaces between anchor token and first tokens on lines within the given text span 
            as long as it doesn't have explicit line operations associated with them
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateAnchorIndentationOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            create anchor indentation region around start and end token
            start token will act as anchor token and right after anchor token to end of end token will become anchor region
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateAnchorIndentationOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            create anchor indentation region more explicitly by providing all necessary information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateSuppressOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption)">
            <summary>
            create suppress region around start and end token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateSuppressOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption)">
            <summary>
            create suppress region around the given text span
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateIndentBlockOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Int32,Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption)">
            <summary>
            create indent block region around the start and end token with the given indentation delta added to the existing indentation at the position of the start token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateIndentBlockOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Text.TextSpan,System.Int32,Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption)">
            <summary>
            create indent block region around the given text span with the given indentation delta added to the existing indentation at the position of the start token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateRelativeIndentBlockOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Int32,Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption)">
            <summary>
            create indent block region around the start and end token with the given indentation delta added to the column of the base token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateRelativeIndentBlockOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Text.TextSpan,System.Int32,Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption)">
            <summary>
            create indent block region around the given text span with the given indentation delta added to the column of the base token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateAlignTokensOperation(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.Formatting.Rules.AlignTokensOption)">
            <summary>
            instruct the engine to try to align first tokens on the lines among the given tokens to be aligned to the base token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateAdjustNewLinesOperation(System.Int32,Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOption)">
            <summary>
            instruct the engine to try to put the give lines between two tokens
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.CreateAdjustSpacesOperation(System.Int32,Microsoft.CodeAnalysis.Formatting.Rules.AdjustSpacesOption)">
            <summary>
            instruct the engine to try to put the given spaces between two tokens
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.GetSuppressOperations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions)">
            <summary>
            return SuppressOperation for the node provided by the given formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.GetAnchorIndentationOperations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions)">
            <summary>
            return AnchorIndentationOperation for the node provided by the given formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.GetIndentBlockOperations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions)">
            <summary>
            return IndentBlockOperation for the node provided by the given formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.GetAlignTokensOperations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions)">
            <summary>
            return AlignTokensOperation for the node provided by the given formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.GetAdjustNewLinesOperation(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions)">
            <summary>
            return AdjustNewLinesOperation for the node provided by the given formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.Rules.FormattingOperations.GetAdjustSpacesOperation(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.AbstractFormattingRule},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions)">
            <summary>
            return AdjustSpacesOperation for the node provided by the given formatting rules
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation">
            <summary>
            set indentation level for the given text span. it can be relative, absolute or dependent to other tokens
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption">
            <summary>
            Options for <see cref="T:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption.RelativeToFirstTokenOnBaseTokenLine">
            <summary>
            This indentation will be a delta to the first token in the line in which the base token is present
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption.RelativePosition">
            <summary>
            <see cref="P:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation.IndentationDeltaOrPosition"/> will be interpreted as delta of its enclosing indentation
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption.AbsolutePosition">
            <summary>
            <see cref="P:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation.IndentationDeltaOrPosition"/> will be interpreted as absolute position
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption.RelativePositionMask">
            <summary>
            Mask for relative position options
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption.PositionMask">
            <summary>
            Mask for position options.
            </summary>
            <remarks>
            Each <see cref="T:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation"/> specifies one of the position options to indicate the primary
            behavior for the operation.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOption.IndentIfConditionOfAnchorToken">
            <summary>
            Increase the <see cref="P:Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation.IndentationDeltaOrPosition"/> if the block is part of a
            condition of the anchor token. For example:
            
            <code>
            if (value is
                { // This open brace token is part of a condition of the 'if' token.
                    Length: 2
                })
            </code>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOperation">
            <summary>
            suppress formatting operations within the given text span
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption">
             <summary>
             Options for <see cref="T:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOperation"/>.
            
             <list type="bullet">
               <item>
                 <term><see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption.NoWrappingIfOnSingleLine"/></term>
                 <description>no wrapping if given tokens are on same line</description>
               </item>
               <item>
                 <term><see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption.NoWrapping"/></term>
                 <description>no wrapping regardless of relative positions of two tokens</description>
               </item>
               <item>
                 <term><see cref="F:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption.NoSpacing"/></term>
                 <description>no spacing regardless of relative positions of two tokens</description>
               </item>
             </list>
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.Rules.SuppressOption.DisableFormatting">
            <summary>
            Completely disable formatting within a span.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.ContextIntervalTree`2">
            <summary>
            a tweaked version of our interval tree to meet the formatting engine's need
            
            it now has an ability to return a smallest span that contains a position rather than
            all Intersecting or overlapping spans
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.FormattingContext">
            <summary>
            this class maintain contextual information such as 
            indentation of current position, based token to follow in current position and etc.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.FormattingContext.AnchorData">
            <summary>
            data that will be used in an interval tree related to Anchor.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.FormattingContext.IndentationData">
            <summary>
            data that will be used in an interval tree related to indentation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.SuppressSpacingData">
            <summary>
            data that will be used in an interval tree related to suppressing spacing operations.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.SuppressWrappingData">
            <summary>
            data that will be used in an interval tree related to suppressing wrapping operations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractAggregatedFormattingResult.Rewriter(System.Collections.Generic.Dictionary{System.ValueTuple{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.Formatting.TriviaData},System.Threading.CancellationToken)">
            <summary>
            rewrite the node with the given trivia information in the map
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.FormatSummary">
            <summary>
            return summary for current formatting work
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.OperationApplier">
            <summary>
            this actually applies formatting operations to trivia between two tokens
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.AbstractFormattingResult.FormattedSpan">
            <summary>
            span in the tree to format
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractFormattingResult.Rewriter(System.Collections.Generic.Dictionary{System.ValueTuple{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.Formatting.TriviaData},System.Threading.CancellationToken)">
            <summary>
            rewrite the tree info root node with the trivia information in the map
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.AbstractTriviaDataFactory.Whitespace">
            <summary>
            represents a general trivia between two tokens. slightly more expensive than others since it
            needs to calculate stuff unlike other cases
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.NodeOperations">
            <summary>
            this collector gathers formatting operations that are based on a node
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.TokenData">
            <summary>
            it represents a token that is inside of token stream not also outside of token stream
            
            it uses an index to navigate previous and after tokens in the stream to make navigation faster. and regular
            Previous/NextToken for tokens outside of the stream.
            
            this object is supposed to be live very short but created a lot of time. that is why it is struct. 
            (same reason why SyntaxToken is struct - to reduce heap allocation)
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.TokenPairWithOperations">
            <summary>
            it holds onto space and wrapping operation need to run between two tokens.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.TokenStream">
            <summary>
            This class takes care of tokens consumed in the formatting engine.
            
            It will maintain information changed compared to original token information. and answers
            information about tokens.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.TokenStream.Changes">
            <summary>
            Thread-safe collection that holds onto changes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.TokenStream.GetColumn(Microsoft.CodeAnalysis.Formatting.TokenData,System.Func{Microsoft.CodeAnalysis.Formatting.TokenData,Microsoft.CodeAnalysis.Formatting.TokenData,Microsoft.CodeAnalysis.Formatting.TriviaData})">
            <summary>
            Get column of the token 
            * column means text position on a line where all tabs are converted to spaces that first position on a line becomes 0
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.TreeData">
            <summary>
            this provides information about the syntax tree formatting service is formatting.
            this provides necessary abstraction between different kinds of syntax trees so that ones that contain
            actual text or cache can answer queries more efficiently.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.TriviaData">
            <summary>
            it holds onto trivia information between two tokens
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticIds.FormattingDiagnosticId">
            <summary>
            This is the ID reported for formatting diagnostics.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticIds.FormatDocumentControlDiagnosticId">
            <summary>
            This special diagnostic can be suppressed via <c>#pragma</c> to prevent the formatter from making changes to
            code formatting within the span where the diagnostic is suppressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.FormattingOptions2">
            <summary>
            Formatting options stored in editorconfig.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.IFormattingResult">
            <summary>
            Contains changes that can be either applied to different targets such as a buffer or a tree
            or examined to be used in other places such as quick fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.#cctor">
            <summary>
            set up space string caches
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.Formatter`1">
            <summary>
            format the trivia at the line column and put changes to the changes
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.WhitespaceAppender`1">
            <summary>
            create whitespace for the delta at the line column and put changes to the changes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.Succeeded">
            <summary>
            return whether this formatting succeeded or not
            for example, if there is skipped tokens in one of trivia between tokens
            we consider formatting this region is failed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.IsWhitespace(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            check whether given trivia is whitespace trivia or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.IsEndOfLine(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            check whether given trivia is end of line trivia or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.LineContinuationFollowedByWhitespaceComment(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            true if previoustrivia is _ and nextTrivia is a Visual Basic comment
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.IsVisualBasicComment(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            check whether given trivia is a Comment in VB or not
            It is never reachable in C# since it follows a test for
            LineContinuation Character.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.IsNullOrWhitespace(System.String)">
            <summary>
            check whether given string is either null or whitespace
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.IsWhitespace(System.Char)">
            <summary>
            check whether given char is whitespace
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.IsNewLine(System.Char)">
            <summary>
            check whether given char is new line char
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.CreateWhitespace(System.String)">
            <summary>
            create whitespace trivia
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.CreateEndOfLine">
            <summary>
            create end of line trivia
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.GetLineColumnRuleBetween(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.Formatting.LineColumnDelta,System.Boolean,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            return line column rule for the given two trivia
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.Format(Microsoft.CodeAnalysis.Formatting.LineColumn,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.SyntaxTrivia},System.Threading.CancellationToken)">
            <summary>
            format the given trivia at the line column position and put result to the changes list
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.Format(Microsoft.CodeAnalysis.Formatting.LineColumn,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            format the given trivia at the line column position and put text change result to the changes list
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.ContainsImplicitLineBreak(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            returns true if the trivia contains a Line break
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.GetOverallLineColumnRuleBetween(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.Formatting.LineColumnDelta,System.Boolean,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            get line column rule between two trivia
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.GetTokensAtEdgeOfStructureTrivia(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxToken@,Microsoft.CodeAnalysis.SyntaxToken@)">
            <summary>
            if the given trivia is the very first or the last trivia between two normal tokens and
            if the trivia is structured trivia, get one token that belongs to the structured trivia and one belongs to the normal token stream
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.ContainsOnlyWhitespace(System.Int32,System.Int32)">
            <summary>
            check whether string between start and end position only contains whitespace
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.FirstLineBlank">
            <summary>
            check whether first line between two tokens contains only whitespace
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.AbstractTriviaFormatter.GetTrailingLinesAtEndOfTrivia1(Microsoft.CodeAnalysis.Formatting.LineColumn)">
            <summary>
            return 0 or 1 based on line column of the trivia1's end point
            this is based on our structured trivia's implementation detail that some structured trivia can have
            one new line at the end of the trivia
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumn.Line">
            <summary>
            absolute line number from first token
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumn.Column">
            <summary>
            absolute column from beginning of a line
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumn.WhitespaceOnly">
            <summary>
            there is only whitespace on this line
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumnDelta.Lines">
            <summary>
            relative line number between calls
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumnDelta.Spaces">
            <summary>
            relative spaces between calls
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumnDelta.WhitespaceOnly">
            <summary>
            there is only whitespace in this space
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Formatting.LineColumnDelta.ForceUpdate">
            <summary>
            force text change regardless line and space changes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Indentation.AbstractIndentationService`1.ShouldUseTokenIndenter(Microsoft.CodeAnalysis.Indentation.AbstractIndentationService{`0}.Indenter,Microsoft.CodeAnalysis.SyntaxToken@)">
            <summary>
            Returns <see langword="true"/> if the language specific <see
            cref="T:Microsoft.CodeAnalysis.Indentation.ISmartTokenFormatter"/> should be deferred to figure out indentation.  If so, it
            will be asked to <see cref="M:Microsoft.CodeAnalysis.Indentation.ISmartTokenFormatter.FormatTokenAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)"/> the resultant
            <paramref name="token"/> provided by this method.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Indentation.IndentationResult">
            <summary>
            An indentation result represents where the indent should be placed.  It conveys this through
            a pair of values.  A position in the existing document where the indent should be relative,
            and the number of columns after that the indent should be placed at.  
            
            This pairing provides flexibility to the implementor to compute the indentation results in
            a variety of ways.  For example, one implementation may wish to express indentation of a 
            newline as being four columns past the start of the first token on a previous line.  Another
            may wish to simply express the indentation as an absolute amount from the start of the 
            current line.  With this tuple, both forms can be expressed, and the implementor does not
            have to convert from one to the other.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Indentation.IndentationResult.BasePosition">
            <summary>
            The base position in the document that the indent should be relative to.  This position
            can occur on any line (including the current line, or a previous line).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Indentation.IndentationResult.Offset">
            <summary>
            The number of columns the indent should be at relative to the BasePosition's column.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Indentation.IIndentationService.GetIndentation(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle,System.Threading.CancellationToken)">
            <summary>
            Determines the desired indentation of a given line.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Indentation.IInferredIndentationService">
            <summary>
            Gets the correct indentation to be used for the document. Depending on the host, there may be smarts to compensate for lack of an editorconfig if there
            isn't one present.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.AbstractDeclaredSymbolInfoFactoryService`9.GetReceiverTypeName(`5)">
            <summary>
            Get the name of the target type of specified extension method declaration. 
            The node provided must be an extension method declaration,  i.e. calling `TryGetDeclaredSymbolInfo()` 
            on `node` should return a `DeclaredSymbolInfo` of kind `ExtensionMethod`. 
            If the return value is null, then it means this is a "complex" method (as described at <see cref="T:Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.ExtensionMethodInfo"/>).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.AbstractSemanticFactsService.GetCollidableSymbols(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Retrieves all symbols that could collide with a symbol at the specified location.
            A symbol can possibly collide with the location if it is available to that location and/or
            could cause a compiler error if its name is re-used at that location.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServices.ISemanticFacts.SupportsImplicitInterfaceImplementation">
            <summary>
            True if this language supports implementing an interface by signature only. If false,
            implementations must specific explicitly which symbol they're implementing.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServices.ISemanticFacts.ExposesAnonymousFunctionParameterNames">
            <summary>
            True if anonymous functions in this language have signatures that include named
            parameters that can be referenced later on when the function is invoked.  Or, if the
            anonymous function is simply a signature that will be assigned to a delegate, and the
            delegate's parameter names are used when invoking.  
            
            For example, in VB one can do this: 
            
            dim v = Sub(x as Integer) Blah()
            v(x:=4)
            
            However, in C# that would need to be:
            
            Action&lt;int&gt; v = (int x) => Blah();
            v(obj:=4)
            
            Note that in VB one can access 'x' outside of the declaration of the anonymous type.
            While in C# 'x' can only be accessed within the anonymous type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISemanticFacts.IsWrittenTo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            True if a write is performed to the given expression.  Note: reads may also be performed
            to the expression as well.  For example, "++a".  In this expression 'a' is both read from
            and written to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISemanticFacts.IsOnlyWrittenTo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            True if a write is performed to the given expression.  Note: unlike IsWrittenTo, this
            will not return true if reads are performed on the expression as well.  For example,
            "++a" will return 'false'.  However, 'a' in "out a" or "a = 1" will return true.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISemanticFacts.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel@)">
            <summary>
            return speculative semantic model for supported node. otherwise, it will return null
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISemanticFacts.GetAliasNameSet(Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            get all alias names defined in the semantic model
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.IHeaderFactsExtensions.IsOnTypeHeader(Microsoft.CodeAnalysis.LanguageServices.IHeaderFacts,Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Checks if the position is on the header of a type (from the start of the type up through it's name).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.AbstractHeaderFacts.TryGetAncestorForLocation``1(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)">
            <summary>
            Tries to get an ancestor of a Token on current position or of Token directly to left:
            e.g.: tokenWithWantedAncestor[||]tokenWithoutWantedAncestor
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.IHeaderFacts.IsOnTypeHeader(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Boolean,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            <paramref name="fullHeader"/> controls how much of the type header should be considered. If <see
            langword="false"/> only the span up through the type name will be considered.  If <see langword="true"/>
            then the span through the base-list will be considered.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts">
             <summary>
             Contains helpers to allow features and other algorithms to run over C# and Visual Basic code in a uniform fashion.
             It should be thought of a generalized way to apply type-pattern-matching and syntax-deconstruction in a uniform
             fashion over the languages. Helpers in this type should only be one of the following forms:
             <list type="bullet">
             <item>
             'IsXXX' where 'XXX' exactly matches one of the same named syntax (node, token, trivia, list, etc.) constructs that 
             both C# and VB have. For example 'IsSimpleName' to correspond to C# and VB's SimpleNameSyntax node.  These 'checking' 
             methods should never fail.  For non leaf node types this should be implemented as a typecheck ('is' in C#, 'typeof ... is'
             in VB).  For leaf nodes, this should be implemented by deffering to <see cref="T:Microsoft.CodeAnalysis.LanguageServices.ISyntaxKinds"/> to check against the 
             raw kind of the node.
             </item>
             <item>
             'GetPartsOfXXX(SyntaxNode node, out SyntaxNode/SyntaxToken part1, ...)' where 'XXX' one of the same named Syntax constructs
             that both C# and VB have, and where the returned parts correspond to the members those nodes have in common across the 
             languages.  For example 'GetPartsOfQualifiedName(SyntaxNode node, out SyntaxNode left, out SyntaxToken dotToken, out SyntaxNode right)'
             VB.  These functions should throw if passed a node that the corresponding 'IsXXX' did not return <see langword="true"/> for.
             For nodes that only have a single child, 'GetPartsOfXXX' is not not needed and can be replaced with the easier to use
             'GetXXXOfYYY' to get that single child.
             </item>
             <item>
             'GetXxxOfYYY' where 'XXX' matches the name of a property on a 'YYY' syntax construct that both C# and VB have.  For
             example 'GetExpressionOfMemberAccessExpression' corresponding to MemberAccessExpressionsyntax.Expression in both C# and
             VB.  These functions should throw if passed a node that the corresponding 'IsYYY' did not return <see langword="true"/> for.
             For nodes that only have a single child, these functions can stay here.  For nodes with multiple children, these should migrate
             to <see cref="T:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsExtensions"/> and be built off of 'GetPartsOfXXX'.
             </item>
             <item>
             Absolutely trivial questions that relate to syntax and can be asked sensibly of each language.  For example,
             if certain constructs (like 'patterns') are supported in that language or not.
             </item>
             </list>
            
             <para>Importantly, avoid:</para>
            
             <list type="bullet">
             <item>
             Functions that attempt to blur the lines between similar constructs in the same language.  For example, a QualifiedName
             is not the same as a MemberAccessExpression (despite A.B being representable as either depending on context). 
             Features that need to handle both should make it clear that they are doing so, showing that they're doing the right
             thing for the contexts each can arise in (for the above example in 'type' vs 'expression' contexts).
             </item>
             <item>
             Functions which are effectively specific to a single feature are are just trying to find a place to place complex
             feature logic in a place such that it can run over VB or C#.  For example, a function to determine if a position
             is on the 'header' of a node.  a 'header' is a not a well defined syntax concept that can be trivially asked of
             nodes in either language.  It is an excapsulation of a feature (or set of features) level idea that should be in
             its own dedicated service.
             </item>
             <item>
             Functions that mutate or update syntax constructs for example 'WithXXX'.  These should be on SyntaxGenerator or
             some other feature specific service.
             </item>
             <item>
             Functions that a single item when one language may allow for multiple.  For example 'GetIdentifierOfVariableDeclarator'.
             In VB a VariableDeclarator can itself have several names, so calling code must be written to check for that and handle
             it apropriately.  Functions like this make it seem like that doesn't need to be considered, easily allowing for bugs
             to creep in.
             </item>
             <item>
             Abbreviating or otherwise changing the names that C# and VB share here.  For example use 'ObjectCreationExpression'
             not 'ObjectCreation'.  This prevents accidental duplication and keeps consistency with all members.
             </item>
             </list>
             </summary>
             <remarks>
             Many helpers in this type currently violate the above 'dos' and 'do nots'.  They should be removed and either 
             inlined directly into the feature that needs if (if only a single feature), or moved into a dedicated service
             for that purpose if needed by multiple features.
             </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.SyntaxToken)">
             <summary>
             Returns 'true' if this a 'reserved' keyword for the language.  A 'reserved' keyword is a
             identifier that is always treated as being a special keyword, regardless of where it is
             found in the token stream.  Examples of this are tokens like <see langword="class"/> and
             <see langword="Class"/> in C# and VB respectively.
            
             Importantly, this does *not* include contextual keywords.  If contextual keywords are
             important for your scenario, use <see cref="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.SyntaxToken)"/> or <see
             cref="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsExtensions.IsReservedOrContextualKeyword(Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,Microsoft.CodeAnalysis.SyntaxToken)"/>.  Also, consider using
             <see cref="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsExtensions.IsWord(Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,Microsoft.CodeAnalysis.SyntaxToken)"/> if all you need is the ability to know
             if this is effectively any identifier in the language, regardless of whether the language
             is treating it as a keyword or not.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.SyntaxToken)">
             <summary>
             Returns <see langword="true"/> if this a 'contextual' keyword for the language.  A
             'contextual' keyword is a identifier that is only treated as being a special keyword in
             certain *syntactic* contexts.  Examples of this is 'yield' in C#.  This is only a
             keyword if used as 'yield return' or 'yield break'.  Importantly, identifiers like <see
             langword="var"/>, <see langword="dynamic"/> and <see langword="nameof"/> are *not*
             'contextual' keywords.  This is because they are not treated as keywords depending on
             the syntactic context around them.  Instead, the language always treats them identifiers
             that have special *semantic* meaning if they end up not binding to an existing symbol.
            
             Importantly, if <paramref name="token"/> is not in the syntactic construct where the
             language thinks an identifier should be contextually treated as a keyword, then this
             will return <see langword="false"/>.
            
             Or, in other words, the parser must be able to identify these cases in order to be a
             contextual keyword.  If identification happens afterwards, it's not contextual.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            The set of identifiers that have special meaning directly after the `#` token in a
            preprocessor directive.  For example `if` or `pragma`.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetLeftSideOfDot(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Get the node on the left side of the dot if given a dotted expression.
            </summary>
            <param name="allowImplicitTarget">
            In VB, we have a member access expression with a null expression, this may be one of the
            following forms:
                1) new With { .a = 1, .b = .a      .a refers to the anonymous type
                2) With obj : .m                   .m refers to the obj type
                3) new T() With { .a = 1, .b = .a  'a refers to the T type
            If `allowImplicitTarget` is set to true, the returned node will be set to approperiate node, otherwise, it will return null.
            This parameter has no affect on C# node.
            </param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetStandaloneExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the containing expression that is actually a language expression and not just typed
            as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side
            of qualified names and member access expressions are not language expressions, yet the
            containing qualified names or member access expressions are indeed expressions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetRootConditionalAccessExpression(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Call on the `.y` part of a `x?.y` to get the entire `x?.y` conditional access expression.  This also works
            when there are multiple chained conditional accesses.  For example, calling this on '.y' or '.z' in
            `x?.y?.z` will both return the full `x?.y?.z` node.  This can be used to effectively get 'out' of the RHS of
            a conditional access, and commonly represents the full standalone expression that can be operated on
            atomically.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetExpressionOfMemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Returns the expression node the member is being accessed off of.  If <paramref name="allowImplicitTarget"/>
            is <see langword="false"/>, this will be the node directly to the left of the dot-token.  If <paramref name="allowImplicitTarget"/>
            is <see langword="true"/>, then this can return another node in the tree that the member will be accessed
            off of.  For example, in VB, if you have a member-access-expression of the form ".Length" then this
            may return the expression in the surrounding With-statement.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsSimpleArgument(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            True if this is an argument with just an expression and nothing else (i.e. no ref/out,
            no named params, no omitted args).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsMethodBody(Microsoft.CodeAnalysis.SyntaxNode)">
             <summary>
             Returns true for nodes that represent the body of a method.
            
             For VB this will be
             MethodBlockBaseSyntax.  This will be true for things like constructor, method, operator
             bodies as well as accessor bodies.  It will not be true for things like sub() function()
             lambdas.
            
             For C# this will be the BlockSyntax or ArrowExpressionSyntax for a
             method/constructor/deconstructor/operator/accessor.  It will not be included for local
             functions.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsTypeCharacter(System.Char)">
            <summary>
            Returns true if the given character is a character which may be included in an
            identifier to specify the type of a variable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsScopeBlock(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            A block that has no semantics other than introducing a new scope. That is only C# BlockSyntax.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsExecutableBlock(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            A node that contains a list of statements. In C#, this is BlockSyntax and SwitchSectionSyntax.
            In VB, this includes all block statements such as a MultiLineIfBlockSyntax.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.IsStatementContainer(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            A node that can host a list of statements or a single statement. In addition to
            every "executable block", this also includes C# embedded statement owners.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetMemberBodySpanForSpeculativeBinding(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>, return the <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> representing the span of the member body
            it is contained within. This <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> is used to determine whether speculative binding should be
            used in performance-critical typing scenarios. Note: if this method fails to find a relevant span, it returns
            an empty <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> at position 0.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.TryGetBindableParent(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Returns the parent node that binds to the symbols that the IDE prefers for features like Quick Info and Find
            All References. For example, if the token is part of the type of an object creation, the parenting object
            creation expression is returned so that binding will return constructor symbols.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetNameForArgument(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>, that represents and argument return the string representation of
            that arguments name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetNameForAttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>, that represents an attribute argument return the string representation of
            that arguments name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsExtensions.SpansPreprocessorDirective(Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Determines if there is preprocessor trivia *between* any of the <paramref name="tokens"/>
            provided.  The <paramref name="tokens"/> will be deduped and then ordered by position.
            Specifically, the first token will not have it's leading trivia checked, and the last
            token will not have it's trailing trivia checked.  All other trivia will be checked to
            see if it contains a preprocessor directive.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsExtensions.GetStatementContainer(Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the statement container node for the statement <paramref name="node"/>.
            </summary>
            <param name="syntaxFacts">The <see cref="T:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts"/> implementation.</param>
            <param name="node">The statement.</param>
            <returns>The statement container for <paramref name="node"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsExtensions.GetRootStandaloneExpression(Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Similar to <see cref="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetStandaloneExpression(Microsoft.CodeAnalysis.SyntaxNode)"/>, this gets the containing
            expression that is actually a language expression and not just typed as an ExpressionSyntax for convenience.
            However, this goes beyond that that method in that if this expression is the RHS of a conditional access
            (i.e. <c>a?.b()</c>) it will also return the root of the conditional access expression tree.
            <para/> The intuition here is that this will give the topmost expression node that could realistically be
            replaced with any other expression.  For example, with <c>a?.b()</c> technically <c>.b()</c> is an
            expression.  But that cannot be replaced with something like <c>(1 + 1)</c> (as <c>a?.(1 + 1)</c> is not
            legal).  However, in <c>a?.b()</c>, then <c>a</c> itself could be replaced with <c>(1 + 1)?.b()</c> to form
            a legal expression.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServices.ISyntaxKinds">
            <summary>
            Provides a uniform view of SyntaxKinds over C# and VB for constructs they have
            in common.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServices.ISyntaxKinds.MultiLineCommentTrivia">
            <summary>
            Gets the syntax kind for a multi-line comment.
            </summary>
            <value>
            The raw syntax kind for a multi-line comment; otherwise, <see langword="null"/> if the language does not
            support multi-line comments.
            </value>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServices.ISyntaxKindsService">
            <summary>
            Provides a uniform view of SyntaxKinds over C# and VB for constructs they have
            in common.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServices.ITypeInferenceService">
            <summary>
            Helper service for telling you what type can be inferred to be viable in a particular
            location in code.  This is useful for features that are starting from code that doesn't bind,
            but would like to know type that code should be in the location that it can be found in.  For
            example:
            
              int i = Here(); 
            
            If 'Here()' doesn't bind, then this class can be used to say that it is currently in a
            location whose type has been inferred to be 'int' from the surrounding context.  Note: this
            is simply a best effort guess.  'byte/short/etc.' as well as any user convertible types to
            int would also be valid here, however 'int' seems the most reasonable when considering user
            intuition.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServices.ISymbolDeclarationService.GetDeclarations(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Given a symbol in source, returns the syntax nodes that compromise its declarations.
            This differs from symbol.Locations in that Locations returns a list of ILocations that
            normally correspond to the name node of the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.AggregateLogger">
            <summary>
            a logger that aggregate multiple loggers
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.EmptyLogger">
            <summary>
            a logger that doesn't do anything
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.EtwLogger">
            <summary>
            A logger that publishes events to ETW using an EventSource.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.FileLogger">
            <summary>
            A logger that publishes events to a log file.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.FileLogger._taskQueue">
            <summary>
            Task queue to serialize all the IO to the log file.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.HistogramLogAggregator">
            <summary>
            Defines a log aggregator to create a histogram
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.InteractionClass">
            <summary>
            An interaction class defines how much time is expected to reach a time point, the response 
            time point being the most commonly used. The interaction classes correspond to human perception,
            so, for example, all interactions in the Fast class are perceived as fast and roughly feel like 
            they have the same performance. By defining these interaction classes, we can describe 
            performance using adjectives that have a precise, consistent meaning.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.KeyValueLogMessage">
            <summary>
            LogMessage that creates key value map lazily
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.KeyValueLogMessage.Create(System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Internal.Log.KeyValueLogMessage"/> with default <see cref="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Information"/>, since
            KV Log Messages are by default more informational and should be logged as such. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.LogType">
            <summary>
            Type of log it is making.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogType.Trace">
            <summary>
            Log some traces of an activity (default)
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogType.UserAction">
            <summary>
            Log an user explicit action
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.PiiValue">
            <summary>
            Represents telemetry data that's classified as personally identifiable information.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource">
            <summary>
            This EventSource exposes our events to ETW.
            RoslynEventSource GUID is {bf965e67-c7fb-5c5b-d98f-cdf68f8154c2}.
            
            When updating this class, use the following to also update Main\Source\Test\Performance\Log\RoslynEventSourceParser.cs:
            Main\Tools\Source\TraceParserGen\bin\Debug\TraceParserGen.exe Microsoft.CodeAnalysis.Workspaces.dll -eventsource:RoslynEventSource
            
            Use this command to register the ETW manifest on any machine where you need to decode events in xperf/etlstackbrowse:
            "\\clrmain\tools\managed\etw\eventRegister\bin\Debug\eventRegister.exe" Microsoft.CodeAnalysis.Workspaces.dll
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource.LogInformationalBlock(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Object,System.Threading.CancellationToken)">
            <summary>
            Logs an informational block with given <paramref name="entity"/>'s <see cref="M:System.Object.ToString"/> representation as the message
            and specified <paramref name="functionId"/>.
            On dispose of the returned disposable object, it logs the 'tick' count between the start and end of the block.
            Unlike other logging methods on <see cref="T:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource"/>, this method does not check
            if the specified <paramref name="functionId"/> was explicitly enabled.
            Instead it checks if the <see cref="T:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource"/> was enabled at <see cref="F:System.Diagnostics.Tracing.EventLevel.Informational"/> level.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource.LogInformationalBlock(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs an informational message block with the given <paramref name="message"/>> and specified <paramref name="functionId"/>.
            On dispose of the returned disposable object, it logs the 'tick' count between the start and end of the block.
            Unlike other logging methods on <see cref="T:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource"/>, this method does not check
            if the specified <paramref name="functionId"/> was explicitly enabled.
            Instead it checks if the <see cref="T:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource"/> was enabled at <see cref="F:System.Diagnostics.Tracing.EventLevel.Informational"/> level.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource.LogBlock">
            <summary>
            This tracks the logged message. On instantiation, it logs 'Started block' with other event data.
            On dispose, it logs 'Ended block' with the same event data so we can track which block started and ended when looking at logs.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource.LogBlock.s_lastUniqueBlockId">
            <summary>
            next unique block id that will be given to each LogBlock
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.RoslynEventSource.LogBlock.GetNextUniqueBlockId">
            <summary>
            return next unique pair id
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.TraceLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.CodeAnalysis.Internal.Log.ILogger"/> that produce timing debug output. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.EmptyLogBlock">
            <summary>
            no op log block
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.FunctionId">
            <summary>
            Enum to uniquely identify each function location.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.ILogger">
            <summary>
            logger interface actual logger should implements
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.ILogger.IsEnabled(Microsoft.CodeAnalysis.Internal.Log.FunctionId)">
            <summary>
            answer whether it is enabled or not for the specific function id
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.ILogger.Log(Microsoft.CodeAnalysis.Internal.Log.FunctionId,Microsoft.CodeAnalysis.Internal.Log.LogMessage)">
            <summary>
            log a specific event with context message
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.ILogger.LogBlockStart(Microsoft.CodeAnalysis.Internal.Log.FunctionId,Microsoft.CodeAnalysis.Internal.Log.LogMessage,System.Int32,System.Threading.CancellationToken)">
            <summary>
            log a start event with context message
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.ILogger.LogBlockEnd(Microsoft.CodeAnalysis.Internal.Log.FunctionId,Microsoft.CodeAnalysis.Internal.Log.LogMessage,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            log an end event
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.Logger">
            <summary>
            provide a way to log activities to various back end such as etl, code marker and etc
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.Logger.s_lastUniqueBlockId">
            <summary>
            next unique block id that will be given to each LogBlock
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.SetLogger(Microsoft.CodeAnalysis.Internal.Log.ILogger)">
            <summary>
            give a way to explicitly set/replace the logger
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.GetLogger">
            <summary>
            ensure we have a logger by putting one from workspace service if one is not there already.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.String,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a specific event with a simple context message which should be very cheap to create
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{System.String},Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a specific event with a context message that will only be created when it is needed.
            the messageGetter should be cheap to create. in another word, it shouldn't capture any locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log``1(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,System.String},``0,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a specific event with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log``2(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,``1,System.String},``0,``1,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a specific event with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log``3(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,``1,``2,System.String},``0,``1,``2,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a specific event with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log``4(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,``1,``2,``3,System.String},``0,``1,``2,``3,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a specific event with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.Log(Microsoft.CodeAnalysis.Internal.Log.FunctionId,Microsoft.CodeAnalysis.Internal.Log.LogMessage)">
            <summary>
            log a specific event with a context message.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.GetNextUniqueBlockId">
            <summary>
            return next unique pair id
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            simplest way to log a start and end pair
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.String,System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            simplest way to log a start and end pair with a simple context message which should be very cheap to create
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{System.String},System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a start and end pair with a context message that will only be created when it is needed.
            the messageGetter should be cheap to create. in another word, it shouldn't capture any locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock``1(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,System.String},``0,System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a start and end pair with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock``2(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,``1,System.String},``0,``1,System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a start and end pair with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock``3(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,``1,``2,System.String},``0,``1,``2,System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a start and end pair with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock``4(Microsoft.CodeAnalysis.Internal.Log.FunctionId,System.Func{``0,``1,``2,``3,System.String},``0,``1,``2,``3,System.Threading.CancellationToken,Microsoft.CodeAnalysis.Internal.Log.LogLevel)">
            <summary>
            log a start and end pair with a context message that requires some arguments to be created when requested.
            given arguments will be passed to the messageGetter so that it can create the context message without requiring lifted locals
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.Logger.LogBlock(Microsoft.CodeAnalysis.Internal.Log.FunctionId,Microsoft.CodeAnalysis.Internal.Log.LogMessage,System.Threading.CancellationToken)">
            <summary>
            log a start and end pair with a context message.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.Logger.RoslynLogBlock">
            <summary>
            This tracks the logged message. On instantiation, it logs 'Started block' with other event data.
            On dispose, it logs 'Ended block' with the same event data so we can track which block started and ended when looking at logs.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.LogLevel">
            <summary>
            Defines logging severity levels. Each logger may choose to report differently based on the level of the message being logged.
            
            Copied from Microsoft.Extensions.Logging https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel
            
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages. These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Information">
            <summary>
            Logs that track the general flow of the application. These logs should have long-term value.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.Critical">
            <summary>
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.LogLevel.None">
            <summary>
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.LogMessage">
            <summary>
            log message that can generate string lazily
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Internal.Log.LogMessage.FreeCore">
            <summary>
            Logger will call this to return LogMessage to its pool
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Internal.Log.AbstractLogAggregator`1">
            <summary>
            helper class to aggregate some numeric value log in client side
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Maximum">
            <summary>
            maximum value
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Minimum">
            <summary>
            minimum value
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Median">
            <summary>
            middle value of the total data set
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Mean">
            <summary>
            average value of the total data set
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Mode">
            <summary>
            most frequent value in the total data set
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Range">
            <summary>
            difference between max and min value
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Internal.Log.StatisticResult.Count">
            <summary>
            number of data points in the total data set
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Notification.GlobalOperationRegistration.Done">
            <summary>
            Used to indicate that the global operation completed fully.  The only effect this has is how this operation
            will be logged when <see cref="M:Microsoft.CodeAnalysis.Notification.GlobalOperationRegistration.Dispose"/> is called. If this has been called, then <see cref="M:Microsoft.CodeAnalysis.Notification.GlobalOperationRegistration.Dispose"/>
            will log that we completed without cancellation.  If this has not been called, then <see cref="M:Microsoft.CodeAnalysis.Notification.GlobalOperationRegistration.Dispose"/>
            will log that we were canceled.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Notification.IGlobalOperationNotificationService.Started">
            <summary>
            raised when global operation is started
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Notification.IGlobalOperationNotificationService.Stopped">
            <summary>
            raised when global operation is stopped
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Notification.IGlobalOperationNotificationService.Start(System.String)">
            <summary>
            start new global operation
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.DocumentOptionSet">
            <summary>
            An <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet"/> that comes from <see cref="M:Microsoft.CodeAnalysis.Document.GetOptionsAsync(System.Threading.CancellationToken)"/>. It behaves just like a normal
            <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet"/> but remembers which language the <see cref="T:Microsoft.CodeAnalysis.Document"/> is, so you don't have to
            pass that information redundantly when calling <see cref="M:Microsoft.CodeAnalysis.Options.DocumentOptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption{``0})"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.DocumentOptionSet.WithChangedOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption{``0},``0)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.DocumentOptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.DocumentOptionSet.WithChangedOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption2{``0},``0)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.DocumentOptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.GlobalOptionService.GetSerializableOptionsSnapshot(System.Collections.Immutable.ImmutableHashSet{System.String},Microsoft.CodeAnalysis.Options.IOptionService)">
            <summary>
            Gets force computed serializable options with prefetched values for all the registered options applicable to the given <paramref name="languages"/> by quering the option persisters.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IDocumentOptions">
            <summary>
            Returned from a <see cref="T:Microsoft.CodeAnalysis.Options.IDocumentOptionsProvider"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IDocumentOptions.TryGetDocumentOption(Microsoft.CodeAnalysis.Options.OptionKey,System.Object@)">
            <summary>
            Attempts to fetch the value for the given option.
            </summary>
            <param name="option"></param>
            <param name="value">The value returned. May be null even if the function returns true as "null" may be valid value for some options.</param>
            <returns>True if this provider had a specific value for this option. False to indicate other providers should be queried.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IDocumentOptionsProvider">
            <summary>
            Implemented to provide options that apply to specific documents, like from .editorconfig files.
            </summary>
            <remarks>
            This is passed to <see cref="M:Microsoft.CodeAnalysis.Options.IOptionService.RegisterDocumentOptionsProvider(Microsoft.CodeAnalysis.Options.IDocumentOptionsProvider)"/> to activate it
            for a workspace. This instance then lives around for the lifetime of the workspace.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IDocumentOptionsProvider.GetOptionsForDocumentAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Fetches a <see cref="T:Microsoft.CodeAnalysis.Options.IDocumentOptions"/> for the given document. Any asynchronous work (looking for config files, etc.)
            should be done here. Can return a null-valued task to mean there is no options being provided for this document.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IDocumentOptionsProviderFactory">
            <summary>
            A MEF-exported factory which produces <see cref="T:Microsoft.CodeAnalysis.Options.IDocumentOptionsProvider"/>s for <see cref="T:Microsoft.CodeAnalysis.Workspace"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService">
            <summary>
            Provides services for reading and writing options.
            This will provide support for options at the global level (i.e. shared among
            all workspaces/services).
            
            In general you should not import this type directly, and should instead get an
            <see cref="T:Microsoft.CodeAnalysis.Options.IOptionService"/> from <see cref="P:Microsoft.CodeAnalysis.Workspace.Services"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.Option{``0})">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.Option2{``0})">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption{``0},System.String)">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption2{``0},System.String)">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetOption(Microsoft.CodeAnalysis.Options.OptionKey)">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetOptions(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Options.OptionKey})">
            <summary>
            Gets the current values of specified options.
            All options are read atomically.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.SetOptions(Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Applies a set of options.
            If any option changed its value invokes registered option persisters, updates current solutions of all registered workspaces and triggers <see cref="E:Microsoft.CodeAnalysis.Options.IGlobalOptionService.OptionChanged"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.SetGlobalOption(Microsoft.CodeAnalysis.Options.OptionKey,System.Object)">
            <summary>
            Sets and persists the value of a global option.
            Sets the value of a global option.
            Invokes registered option persisters.
            Triggers <see cref="E:Microsoft.CodeAnalysis.Options.IGlobalOptionService.OptionChanged"/>.
            Does not update any workspace (since this option is not a solution option).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.SetGlobalOptions(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Options.OptionKey},System.Collections.Immutable.ImmutableArray{System.Object})">
            <summary>
            Atomically sets the values of specified global options. The option values are persisted.
            Triggers <see cref="E:Microsoft.CodeAnalysis.Options.IGlobalOptionService.OptionChanged"/>.
            Does not update any workspace (since this option is not a solution option).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetSerializableOptionsSnapshot(System.Collections.Immutable.ImmutableHashSet{System.String},Microsoft.CodeAnalysis.Options.IOptionService)">
            <summary>
            Gets force computed serializable options snapshot with prefetched values for the registered options applicable to the given <paramref name="languages"/> by quering the option persisters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetRegisteredOptions">
            <summary>
            Returns the set of all registered options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.TryMapEditorConfigKeyToOption(System.String,System.String,Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2@,Microsoft.CodeAnalysis.Options.OptionKey@)">
            <summary>
            Map an <strong>.editorconfig</strong> key to a corresponding <see cref="T:Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2"/> and
            <see cref="T:Microsoft.CodeAnalysis.Options.OptionKey"/> that can be used to read and write the value stored in an <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet"/>.
            </summary>
            <param name="key">The <strong>.editorconfig</strong> key.</param>
            <param name="language">The language to use for the <paramref name="optionKey"/>, if the matching option has
            <see cref="P:Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage"/> set.</param>
            <param name="storageLocation">The <see cref="T:Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2"/> for the key.</param>
            <param name="optionKey">The <see cref="T:Microsoft.CodeAnalysis.Options.OptionKey"/> for the key and language.</param>
            <returns><see langword="true"/> if a matching option was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.GetRegisteredSerializableOptions(System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Returns the set of all registered serializable options applicable for the given <paramref name="languages"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.RefreshOption(Microsoft.CodeAnalysis.Options.OptionKey,System.Object)">
            <summary>
            Refreshes the stored value of a serialized option. This should only be called from serializers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.RegisterWorkspace(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Registers a workspace with the option service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.UnregisterWorkspace(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Unregisters a workspace from the option service.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IOptionPersister">
            <summary>
            Exportable by a host to specify the save and restore behavior for a particular set of
            values.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionPersisterProvider.GetOrCreatePersisterAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Options.IOptionPersister"/>. If the persister does not already exist, it is created.
            </summary>
            <remarks>
            This method is safe for concurrent use from any thread. No guarantees are made regarding the use of the UI
            thread.
            </remarks>
            <param name="cancellationToken">A cancellation token the operation may observe.</param>
            <returns>The option persister.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IOptionService">
            <summary>
            Provides services for reading and writing options.  This will provide support for
            customizations workspaces need to perform around options.  Note that 
            <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/> options will normally still be offered through 
            implementations of this.  However, implementations may customize things differently 
            depending on their needs.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.Option{``0})">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.Option2{``0})">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption{``0},System.String)">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption2{``0},System.String)">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetOption(Microsoft.CodeAnalysis.Options.OptionKey)">
            <summary>
            Gets the current value of the specific option.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetOptions">
            <summary>
            Fetches an immutable set of all current options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetSerializableOptionsSnapshot(System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Gets a serializable option set snapshot with force computed values for all registered serializable options applicable for the given <paramref name="languages"/> by quering the option persisters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.SetOptions(Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Applies a set of options.
            </summary>
            <param name="optionSet">New options to set.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetRegisteredOptions">
            <summary>
            Returns the set of all registered options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.TryMapEditorConfigKeyToOption(System.String,System.String,Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2@,Microsoft.CodeAnalysis.Options.OptionKey@)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Options.IGlobalOptionService.TryMapEditorConfigKeyToOption(System.String,System.String,Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2@,Microsoft.CodeAnalysis.Options.OptionKey@)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetRegisteredSerializableOptions(System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Returns the set of all registered serializable options applicable for the given <paramref name="languages"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.RegisterDocumentOptionsProvider(Microsoft.CodeAnalysis.Options.IDocumentOptionsProvider)">
            <summary>
            Registers a provider that can modify the result of <see cref="M:Microsoft.CodeAnalysis.Document.GetOptionsAsync(System.Threading.CancellationToken)"/>. Providers registered earlier are queried first
            for options, and the first provider to give a value wins.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.GetUpdatedOptionSetForDocumentAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet"/> that applies to a specific document, given that document and the global options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.RegisterWorkspace(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Registers a workspace with the option service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IOptionService.UnregisterWorkspace(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Unregisters a workspace from the option service.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IWorkspaceOptionService">
            <summary>
            Interface used for exposing functionality from the option service that we don't want to 
            ever be public.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.Option2`1">
            <summary>
            An global option. An instance of this class can be used to access an option value from an OptionSet.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option2`1.Feature">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Feature"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option2`1.Group">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Group"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option2`1.Name">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Name"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option2`1.DefaultValue">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.DefaultValue"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option2`1.Type">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Type"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option2`1.StorageLocations">
            <summary>
            Storage locations for the option.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.OptionKey">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.Options.OptionKey2"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionKey.Option">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionKey2.Option"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionKey.Language">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionKey2.Language"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService">
            <summary>
            Wraps an underlying <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/> and exposes its data to workspace
            clients.  Also takes the <see cref="E:Microsoft.CodeAnalysis.Options.IGlobalOptionService.OptionChanged"/> notifications
            and forwards them along using the same <see cref="T:Roslyn.Utilities.TaskQueue"/> used by the
            <see cref="T:Microsoft.CodeAnalysis.Workspace"/> this is connected to.  i.e. instead of synchronously just passing
            along the underlying events, these will be enqueued onto the workspace's eventing queue.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService._gate">
            <summary>
            Gate guarding <see cref="F:Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService._eventHandlers"/> and <see cref="F:Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService._documentOptionsProviders"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.OptionSet._lazyAnalyzerConfigOptions">
            <summary>
            Map from language name to the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions"/> wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption(Microsoft.CodeAnalysis.Options.OptionKey)">
            <summary>
            Gets the value of the option, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.OptionKey)">
            <summary>
            Gets the value of the option cast to type <typeparamref name="T"/>, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption(Microsoft.CodeAnalysis.Options.OptionKey2)">
            <summary>
            Gets the value of the option, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.OptionKey2)">
            <summary>
            Gets the value of the option cast to type <typeparamref name="T"/>, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.Option{``0})">
            <summary>
            Gets the value of the option, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.Option2{``0})">
            <summary>
            Gets the value of the option, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption{``0},System.String)">
            <summary>
            Gets the value of the option, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.GetOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption2{``0},System.String)">
            <summary>
            Gets the value of the option, or the default value if not otherwise set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption(Microsoft.CodeAnalysis.Options.OptionKey,System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption(Microsoft.CodeAnalysis.Options.OptionKey2,System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption``1(Microsoft.CodeAnalysis.Options.Option{``0},``0)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption``1(Microsoft.CodeAnalysis.Options.Option2{``0},``0)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption{``0},System.String,``0)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption``1(Microsoft.CodeAnalysis.Options.PerLanguageOption2{``0},System.String,``0)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet" /> that contains the changed value.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.OptionStorageLocation">
            <summary>
            The base type of all types that specify where options are stored.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.Option`1">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.Options.Option2`1"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option`1.Feature">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Feature"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option`1.Group">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Group"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option`1.Name">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Name"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option`1.DefaultValue">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.DefaultValue"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option`1.Type">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Type"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Option`1.StorageLocations">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.Option2`1.StorageLocations"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.PerLanguageOption`1">
            <inheritdoc cref="T:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption`1.Feature">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Feature"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption`1.Group">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Group"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption`1.Name">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Name"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption`1.Type">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Type"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption`1.DefaultValue">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.DefaultValue"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption`1.StorageLocations">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.StorageLocations"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1">
            <summary>
            An option that can be specified once per language.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.Feature">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Feature"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.Group">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Group"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.Name">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Name"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.Type">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Type"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.DefaultValue">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Options.OptionDefinition.DefaultValue"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1.StorageLocations">
            <summary>
            Storage locations for the option.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.PredefinedDocumentOptionsProviderNames.EditorConfig">
            <summary>
            The name of the providers for .editorconfig. Both the current and legacy providers will use this name, so that way any other clients can
            order relative to the pair. The two factories are unordered themselves because only one ever actually gives a real provider.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Providers.ExportOptionProviderAttribute.Language">
            <summary>
            Optional source language for language specific option providers.  See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.
            This will be empty string for language agnostic option providers.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.Providers.ExportOptionProviderAttribute.IsGlobal">
            <summary>
            True if the option is a client global option provided by <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.Providers.ExportGlobalOptionProviderAttribute">
            <summary>
            Global client-only options.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.Providers.ExportSolutionOptionProviderAttribute">
            <summary>
            Options that are part of the solution snapshot.
            Some of these options may be configurable per document via editorconfig.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.SerializableOptionSet">
            <summary>
            Serializable implementation of <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet"/> for <see cref="P:Microsoft.CodeAnalysis.Solution.Options"/>.
            It contains prepopulated fetched option values for all serializable options and values, and delegates to <see cref="T:Microsoft.CodeAnalysis.Options.SerializableOptionSet.WorkspaceOptionSet"/> for non-serializable values.
            It ensures a contract that values are immutable from this instance once observed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._workspaceOptionSet">
            <summary>
            Fallback option set for non-serializable options. See comments on <see cref="T:Microsoft.CodeAnalysis.Options.SerializableOptionSet.WorkspaceOptionSet"/> for more details.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._serializableOptionValues">
            <summary>
            Prefetched option values applicable for <see cref="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._languages"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._changedOptionKeysSerializable">
            <summary>
            Set of changed options in this option set which are serializable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._changedOptionKeysNonSerializable">
            <summary>
            Set of changed options in this option set which are non-serializable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._languages">
            <summary>
            Set of languages referenced in <see cref="F:Microsoft.CodeAnalysis.Options.SerializableOptionSet._serializableOptionValues"/>.  Cached
            only so we can shortcircuit <see cref="M:Microsoft.CodeAnalysis.Options.SerializableOptionSet.UnionWithLanguages(System.Collections.Immutable.ImmutableHashSet{System.String})"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.SerializableOptionSet.UnionWithLanguages(System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Returns an option set with all the serializable option values prefetched for given <paramref name="languages"/>,
            while also retaining all the explicitly changed option values in this option set for any language.
            Note: All the provided <paramref name="languages"/> must be <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteSupportedLanguages.IsSupported(System.String)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.SerializableOptionSet.GetChangedOptions">
            <summary>
            Gets a list of all the options that were changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.SerializableOptionSet.WorkspaceOptionSet">
            <summary>
            An implementation of <see cref="T:Microsoft.CodeAnalysis.Options.OptionSet"/> for non-serializable options that are defined in VS layers.
            It fetches values it doesn't know about to the workspace's option service. It ensures a contract
            that values are immutable from this instance once observed.
            TODO: Remove this type once we move all the options from the VS layers into Workspaces/Features, so the entire
                  option set is serializable and becomes pure data snapshot for options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.SerializableOptionSet.WorkspaceOptionSet.GetChangedOptions">
            <summary>
            Gets a list of all the options that were changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.FeatureFlagStorageLocation">
            <summary>
            Specifies that the option is stored in feature flag storage.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.EditorConfigStorageLocation`1">
            <summary>
            Specifies that an option should be read from an .editorconfig file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.EditorConfigStorageLocation`1.GetEditorConfigStringValue(`0,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Gets the editorconfig string representation for this storage location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2.GetEditorConfigString(System.Object,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Gets the editorconfig string representation for this storage location. The result is a complete line of the
            <strong>.editorconfig</strong> file, such as the following:
            <code>
            dotnet_sort_system_directives_first = true
            </code>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2.GetEditorConfigStringValue(System.Object,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Gets the editorconfig string representation for this storage location. The result only includes the value
            for the <strong>.editorconfig</strong> entry.
            </summary>
            <seealso cref="M:Microsoft.CodeAnalysis.Options.IEditorConfigStorageLocation2.GetEditorConfigString(System.Object,Microsoft.CodeAnalysis.Options.OptionSet)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IOption2">
            <summary>
            Internal base option type that is available in both the Workspaces layer and CodeStyle layer.
            Its definition in Workspaces layer sub-types "IOption" and its definition in CodeStyle layer
            explicitly defines all the members from "IOption" type as "IOption" is not available in CodeStyle layer.
            This ensures that all the sub-types of <see cref="T:Microsoft.CodeAnalysis.Options.IOption2"/> in either layer see an identical
            set of interface members.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IOptionWithGroup">
            <summary>
            Group/sub-feature associated with an <see cref="T:Microsoft.CodeAnalysis.Options.IOption2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.IOptionWithGroup.Group">
            <summary>
            Group/sub-feature for this option.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.LocalUserProfileStorageLocation">
            <summary>
            Specifies that the option should be stored into the user's local registry hive.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.OptionGroup">
            <summary>
            Group/sub-feature associated with an option.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionGroup.Description">
            <summary>
            A localizable resource description string for the option group.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionGroup.Priority">
            <summary>
            Relative priority of the option group with respect to other option groups within the same feature.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Feature">
            <summary>
            Feature this option is associated with.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Group">
            <summary>
            Optional group/sub-feature for this option.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Name">
            <summary>
            The name of the option.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionDefinition.DefaultValue">
            <summary>
            The default value of the option.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionDefinition.Type">
            <summary>
            The type of the option value.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Options.OptionDefinition.IsPerLanguage">
            <summary>
            Flag indicating if this is a per-language option or a language specific option.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.OptionStorageLocation2">
            <summary>
            The base type of all types that specify where options are stored.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.ILanguageSpecificOption">
            <summary>
            Marker interface for language specific options.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.ILanguageSpecificOption`1">
            <summary>
            Marker interface for language specific options.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IPerLanguageOption">
            <summary>
            Marker interface for <see cref="T:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.IPerLanguageOption`1">
            <summary>
            Marker interface for <see cref="T:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.RoamingProfileStorageLocation">
            <summary>
            Specifies that the option should be stored into a roamed profile across machines.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.RoamingProfileStorageLocation.#ctor(System.Func{System.String,System.String})">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Options.RoamingProfileStorageLocation"/> that has different key names for different languages.
            </summary>
            <param name="keyNameFromLanguageName">A function that maps from a <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/> value to the key name.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Packaging.IPackageInstallerService.TryGetPackageSources">
            <summary>
            Attempts to get the package sources applicable to the workspace.  Note: this call is made on a best effort
            basis.  If the results are not available (for example, they have not been computed, and doing so would
            require switching to the UI thread), then an empty array can be returned.
            </summary>
            <returns>
            <para>A collection of package sources.</para>
            </returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher">
            <summary>
            The pattern matcher is not thread-safe.  Do not use the pattern matcher across mutiple threads concurrently.  It
            also keeps an internal cache of data for speeding up operations.  As such, it should be disposed when done to
            release the cached data back. and release the matcher appropriately once you no longer need it. Also, while the
            pattern matcher is culture aware, it uses the culture specified in the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.AllLowerCamelCaseMatcher">
            <summary>
            Encapsulated matches responsible for matching an all lowercase pattern against
            a candidate using CamelCase matching. i.e. this code is responsible for finding the
            match between "cofipro" and "CodeFixProvider". 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.AllLowerCamelCaseMatcher.TryMatch(Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{Microsoft.CodeAnalysis.Text.TextSpan}@,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan}@)">
            <summary>
            Returns null if no match was found, 1 if a contiguous match was found, 2 if a 
            match as found that starts at the beginning of the candidate, and 3 if a contiguous
            match was found that starts at the beginning of the candidate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.AllLowerCamelCaseMatcher.UpdateBestResultIfBetter(Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.CamelCaseResult,System.Nullable{Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.CamelCaseResult}@,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{Microsoft.CodeAnalysis.Text.TextSpan}@)">
            <summary>
            Updates the currently stored 'best result' if the current result is better.
            Returns 'true' if no further work is required and we can break early, or 
            'false' if we need to keep on going.
            
            If 'weight' is better than 'bestWeight' and matchSpanToAdd is not null, then
            matchSpanToAdd will be added to matchedSpansInReverse.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.#ctor(System.Boolean,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Construct a new PatternMatcher using the specified culture.
            </summary>
            <param name="culture">The culture to use for string searching and comparison.</param>
            <param name="includeMatchedSpans">Whether or not the matching parts of the candidate should be supplied in results.</param>
            <param name="allowFuzzyMatching">Whether or not close matches should count as matches.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.MatchPatternSegment(System.String,Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.PatternSegment@,Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{Microsoft.CodeAnalysis.PatternMatching.PatternMatch}@,System.Boolean)">
            <summary>
            Internal helper for MatchPatternInternal
            </summary>
            <remarks>
            PERF: Designed to minimize allocations in common cases.
            If there's no match, then null is returned.
            If there's a single match, or the caller only wants the first match, then it is returned (as a Nullable)
            If there are multiple matches, and the caller wants them all, then a List is allocated.
            </remarks>
            <param name="candidate">The word being tested.</param>
            <param name="segment">The segment of the pattern to check against the candidate.</param>
            <param name="matches">The result array to place the matches in.</param>
            <param name="fuzzyMatch">If a fuzzy match should be performed</param>
            <returns>If there's only one match, then the return value is that match. Otherwise it is null.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.PartStartsWith(System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.Globalization.CompareOptions)">
            <summary>
            Do the two 'parts' match? i.e. Does the candidate part start with the pattern part?
            </summary>
            <param name="candidate">The candidate text</param>
            <param name="candidatePart">The span within the <paramref name="candidate"/> text</param>
            <param name="pattern">The pattern text</param>
            <param name="patternPart">The span within the <paramref name="pattern"/> text</param>
            <param name="compareOptions">Options for doing the comparison (case sensitive or not)</param>
            <returns>True if the span identified by <paramref name="candidatePart"/> within <paramref name="candidate"/> starts with
            the span identified by <paramref name="patternPart"/> within <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.PartStartsWith(System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.String,System.Globalization.CompareOptions)">
            <summary>
            Does the given part start with the given pattern?
            </summary>
            <param name="candidate">The candidate text</param>
            <param name="candidatePart">The span within the <paramref name="candidate"/> text</param>
            <param name="pattern">The pattern text</param>
            <param name="compareOptions">Options for doing the comparison (case sensitive or not)</param>
            <returns>True if the span identified by <paramref name="candidatePart"/> within <paramref name="candidate"/> starts with <paramref name="pattern"/></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.PatternSegment">
            <summary>
            First we break up the pattern given by dots.  Each portion of the pattern between the
            dots is a 'Segment'.  The 'Segment' contains information about the entire section of 
            text between the dots, as well as information about any individual 'Words' that we 
            can break the segment into.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.TextChunk">
            <summary>
            Information about a chunk of text from the pattern.  The chunk is a piece of text, with 
            cached information about the character spans within in.  Character spans separate out
            capitalized runs and lowercase runs.  i.e. if you have AAbb, then there will be two 
            character spans, one for AA and one for BB.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.TextChunk.PatternHumps">
            <summary>
            Character spans separate out
            capitalized runs and lowercase runs.  i.e. if you have AAbb, then there will be two 
            character spans, one for AA and one for BB.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PatternMatching.PatternMatcher.SimplePatternMatcher.AddMatches(System.String,Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{Microsoft.CodeAnalysis.PatternMatching.PatternMatch}@)">
            <summary>
            Determines if a given candidate string matches under a multiple word query text, as you
            would find in features like Navigate To.
            </summary>
            <returns>If this was a match, a set of match types that occurred while matching the
            patterns. If it was not a match, it returns null.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.PatternMatching.PatternMatch.IsCaseSensitive">
            <summary>
            True if this was a case sensitive match.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.PatternMatching.PatternMatch.Kind">
            <summary>
            The type of match that occurred.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.PatternMatching.PatternMatch.MatchedSpans">
            <summary>
            The spans in the original text that were matched.  Only returned if the 
            pattern matcher is asked to collect these spans.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind">
            <summary>
            Note(cyrusn): this enum is ordered from strongest match type to weakest match type.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.Exact">
            <summary>
            The candidate string matched the pattern exactly.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.Prefix">
            <summary>
            The pattern was a prefix of the candidate string.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.NonLowercaseSubstring">
            <summary>
            The pattern was a substring of the candidate string, but in a way that wasn't a CamelCase match.  The
            pattern had to have at least one non lowercase letter in it, and the match needs to be case sensitive.
            This will match 'savedWork' against 'FindUnsavedWork'.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.StartOfWordSubstring">
            <summary>
            The pattern was a substring of the candidate string, starting at a word within that candidate.  The pattern
            can be all lowercase here.  This will match 'save' or 'Save' in 'FindSavedWork'
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.CamelCaseExact">
            <summary>
            All camel-humps in the pattern matched a camel-hump in the candidate.  All camel-humps
            in the candidate were matched by a camel-hump in the pattern.
            
            Example: "CFPS" matching "CodeFixProviderService"
            Example: "cfps" matching "CodeFixProviderService"
            Example: "CoFiPrSe" matching "CodeFixProviderService"
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.CamelCasePrefix">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern matched the first camel-hump in the candidate.  There was no gap in the camel-
             humps in the candidate that were matched.
            
             Example: "CFP" matching "CodeFixProviderService"
             Example: "cfp" matching "CodeFixProviderService"
             Example: "CoFiPRo" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.CamelCaseNonContiguousPrefix">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern matched the first camel-hump in the candidate.  There was at least one gap in 
             the camel-humps in the candidate that were matched.
            
             Example: "CP" matching "CodeFixProviderService"
             Example: "cp" matching "CodeFixProviderService"
             Example: "CoProv" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.CamelCaseSubstring">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern did not match the first camel-hump in the pattern.  There was no gap in the camel-
             humps in the candidate that were matched.
            
             Example: "FP" matching "CodeFixProviderService"
             Example: "fp" matching "CodeFixProviderService"
             Example: "FixPro" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.CamelCaseNonContiguousSubstring">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern did not match the first camel-hump in the pattern.  There was at least one gap in 
             the camel-humps in the candidate that were matched.
            
             Example: "FS" matching "CodeFixProviderService"
             Example: "fs" matching "CodeFixProviderService"
             Example: "FixSer" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.Fuzzy">
            <summary>
            The pattern matches the candidate in a fuzzy manner.  Fuzzy matching allows for 
            a certain amount of misspellings, missing words, etc. See <see cref="T:Roslyn.Utilities.SpellChecker"/> for 
            more details.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.LowercaseSubstring">
            <summary>
            The pattern was a substring of the candidate and wasn't either <see cref="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.NonLowercaseSubstring"/> or <see
            cref="F:Microsoft.CodeAnalysis.PatternMatching.PatternMatchKind.StartOfWordSubstring"/>.  This can happen when the pattern is allow lowercases and matches some non
            word portion of the candidate.  For example, finding 'save' in 'GetUnsavedWork'.  This will not match across
            word boundaries.  i.e. it will not match 'save' to 'VisaVerify' even though 'saVe' is in that candidate.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectTelemetry.IProjectTelemetryListener">
            <summary>
            Callback the host (VS) passes to the OOP service to allow it to send batch notifications
            about telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectTelemetry.IRemoteProjectTelemetryService">
            <summary>
            Interface to allow host (VS) to inform the OOP service to start incrementally analyzing and
            reporting results back to the host.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectTelemetry.ProjectTelemetryData">
            <summary>
            Serialization typed used to pass information to/from OOP and VS.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ReassignedVariable.IReassignedVariableService">
            <summary>
            Service which can analyze a span of a document and identify all locations of parameters or locals that are ever
            reassigned.  Note that the locations provided are not the reassignment points.  Rather if a local or parameter
            is ever reassigned, these are all the locations of those locals or parameters within that span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Recommendations.AbstractRecommendationServiceRunner`1.GetTypeSymbols(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},System.String,System.Int32,System.Int32)">
            <summary>
            Tries to get a type of its' <paramref name="ordinalInLambda"/> lambda parameter of <paramref name="ordinalInInvocation"/> argument for each candidate symbol.
            </summary>
            <param name="candidateSymbols">symbols corresponding to <see cref="T:System.Linq.Expressions.Expression`1"/> or <see cref="T:System.Func`2"/>
            Here, some_args can be multi-variables lambdas as well, e.g. f((a,b) => a+b, (a,b,c)=>a*b*c.Length)
            </param>
            <param name="ordinalInInvocation">ordinal of the arguments of function: (a,b) or (a,b,c) in the example above</param>
            <param name="ordinalInLambda">ordinal of the lambda parameters, e.g. a, b or c.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Recommendations.AbstractRecommendationServiceRunner`1.SuppressDefaultTupleElements(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol})">
            <summary>
            If container is a tuple type, any of its tuple element which has a friendly name will cause
            the suppression of the corresponding default name (ItemN).
            In that case, Rest is also removed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Recommendations.RecommendedSymbols.NamedSymbols">
            <summary>
            The named symbols to recommend.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Recommendations.RecommendedSymbols.UnnamedSymbols">
            <summary>
            The unnamed symbols to recommend.  For example, operators, conversions and indexers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.IRemoteHostClientProvider">
            <summary>
            Returns a <see cref="T:Microsoft.CodeAnalysis.Remote.RemoteHostClient"/> that a user can use to communicate with a remote host (i.e. ServiceHub) 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.IRemoteHostClientProvider.TryGetRemoteHostClientAsync(System.Threading.CancellationToken)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Remote.RemoteHostClient"/> to current RemoteHost
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Remote.IRemoteHostClientShutdownCancellationService.ShutdownToken">
            <summary>
            Token signaled when the host starts to shut down.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo">
            <summary>
            Information related to pinned solution
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo.ScopeId">
            <summary>
            Unique ID for this pinned solution
            
            This later used to find matching solution between VS and remote host
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo.FromPrimaryBranch">
            <summary>
            This indicates whether this scope is for primary branch or not (not forked solution)
            
            Features like OOP will use this flag to see whether caching information related to this solution
            can benefit other requests or not
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo.WorkspaceVersion">
            <summary>
            This indicates a Solution.WorkspaceVersion of this solution. remote host engine uses this version
            to decide whether caching this solution will benefit other requests or not
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo.ProjectId">
            <summary>
            An optional project that we are pinning information for.  This is used for features that only need
            information for a project (and its dependencies) and not the entire solution.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.RemoteHostClient">
            <summary>
            This represents client in client/server model.
            
            user can create a connection to communicate with the server (remote host) through this client
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``1(Microsoft.CodeAnalysis.Project,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Equivalent to <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``1(Microsoft.CodeAnalysis.Solution,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
            except that only the project (and its dependent projects) will be sync'ed to the remote host before executing.
            This is useful for operations that don't every do any work outside of that project-cone and do not want to pay
            the high potential cost of a full sync.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``2(Microsoft.CodeAnalysis.Project,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Equivalent to <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``1(Microsoft.CodeAnalysis.Solution,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
            except that only the project (and its dependent projects) will be sync'ed to the remote host before executing.
            This is useful for operations that don't every do any work outside of that project-cone and do not want to pay
            the high potential cost of a full sync.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``1(Microsoft.CodeAnalysis.Project,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Remote.RemoteServiceCallbackId,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Object,System.Threading.CancellationToken)">
            <summary>
            Equivalent to <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``1(Microsoft.CodeAnalysis.Solution,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Remote.RemoteServiceCallbackId,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Object,System.Threading.CancellationToken)"/>
            except that only the project (and its dependent projects) will be sync'ed to the remote host before executing.
            This is useful for operations that don't every do any work outside of that project-cone and do not want to pay
            the high potential cost of a full sync.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``2(Microsoft.CodeAnalysis.Project,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Remote.RemoteServiceCallbackId,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Object,System.Threading.CancellationToken)">
            <summary>
            Equivalent to <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``1(Microsoft.CodeAnalysis.Solution,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Remote.RemoteServiceCallbackId,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Object,System.Threading.CancellationToken)"/>
            except that only the project (and its dependent projects) will be sync'ed to the remote host before executing.
            This is useful for operations that don't every do any work outside of that project-cone and do not want to pay
            the high potential cost of a full sync.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``2(Microsoft.CodeAnalysis.Solution,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Func{System.IO.Pipelines.PipeReader,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes a remote API that streams data back to the caller via a pipe.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``2(Microsoft.CodeAnalysis.Project,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Func{System.IO.Pipelines.PipeReader,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Equivalent to <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteHostClient.TryInvokeAsync``2(Microsoft.CodeAnalysis.Project,System.Func{``0,Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Func{System.IO.Pipelines.PipeReader,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)"/>
            except that only the project (and its dependent projects) will be sync'ed to the remote host before executing.
            This is useful for operations that don't every do any work outside of that project-cone and do not want to pay
            the high potential cost of a full sync.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.RemoteServiceConnection`1">
            <summary>
            Abstracts a connection to a service implementing type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Remote interface type of the service.</typeparam>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteUtilities.GetDocumentTextChangesAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Given two solution snapshots (<paramref name="oldSolution"/> and <paramref name="newSolution"/>), determines
            the set of document text changes necessary to convert <paramref name="oldSolution"/> to <paramref
            name="newSolution"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.RemoteUtilities.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{System.ValueTuple{Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange}}},System.Threading.CancellationToken)">
            <summary>
            Applies the result of <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteUtilities.GetDocumentTextChangesAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)"/> to <paramref name="oldSolution"/> to produce
            a solution textually equivalent to the <c>newSolution</c> passed to <see cref="M:Microsoft.CodeAnalysis.Remote.RemoteUtilities.GetDocumentTextChangesAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.IRemoteProcessTelemetryService.EnableLoggingAsync(System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Internal.Log.FunctionId},System.Threading.CancellationToken)">
            <summary>
            Enables logging of <paramref name="functionIds"/> using loggers of the specified <paramref name="loggerTypeNames"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Remote.IRemoteProcessTelemetryService.InitializeTelemetrySessionAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes telemetry session.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.IOptionsSerializationService">
            <summary>
            This deal with serializing/deserializing language specific data
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.ISupportTemporaryStorage">
            <summary>
            This lets consumer to get to inner temporary storage that references use
            as its shadow copy storage
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.Creator">
            <summary>
            This is just internal utility type to reduce allocations and reduntant code
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.SerializableSourceText">
            <summary>
            Represents a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> which can be serialized for sending to another process. The text is not
            required to be a live object in the current process, and can instead be held in temporary storage accessible by
            both processes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Serialization.SerializableSourceText.Storage">
            <summary>
            The storage location for <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.
            </summary>
            <remarks>
            Exactly one of <see cref="P:Microsoft.CodeAnalysis.Serialization.SerializableSourceText.Storage"/> or <see cref="P:Microsoft.CodeAnalysis.Serialization.SerializableSourceText.Text"/> will be non-<see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Serialization.SerializableSourceText.Text">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> in the current process.
            </summary>
            <remarks>
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Serialization.SerializableSourceText.Storage"/>
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.SerializerService">
            <summary>
            serialize and deserialize objects to stream.
            some of these could be moved into actual object, but putting everything here is a bit easier to find I believe.
            </summary>
            <summary>
            serialize and deserialize objects to straem.
            some of these could be moved into actual object, but putting everything here is a bit easier to find I believe.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.ChecksumCollection">
            <summary>
            collection which children is checksum.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.ChecksumWithChildren">
            <summary>
            this is a collection that has its own checksum and contains only checksum or checksum collection as its children.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Serialization.ChecksumCache">
            <summary>
            hold onto object checksum that currently doesn't have a place to hold onto checksum
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictingIdentifierTracker._currentIdentifiersInScope">
            <summary>
            The core data structure of the tracker. This is a dictionary of variable name to the
            current identifier tokens that are declaring variables. This should only ever be updated
            via the AddIdentifier and RemoveIdentifier helpers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.SymbolsForEnclosingInvocationExpressionWorker(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Used to find the symbols associated with the Invocation Expression surrounding the Token
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.AddDeclarationConflictsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution,System.Collections.Generic.IDictionary{Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.Location},System.Threading.CancellationToken)">
            <summary>
            Computes an adds conflicts relating to declarations, which are independent of
            location-based checks. Examples of these types of conflicts include renaming a member to
            the same name as another member of a type: binding doesn't change (at least from the
            perspective of find all references), but we still need to track it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.GetSymbolLocationAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Gives the First Location for a given Symbol by ordering the locations using DocumentId first and Location starting position second
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session">
            <summary>
            Helper class to track the state necessary for finding/resolving conflicts in a 
            rename session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.IdentifyConflictsAsync(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.DocumentId},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution)">
            <summary>
            Find conflicts in the new solution 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.GetNodesOrTokensToCheckForConflicts(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the list of the nodes that were annotated for a conflict check 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.FindDocumentsAndPossibleNameConflictsAsync">
            <summary>
            The method determines the set of documents that need to be processed for Rename and also determines
             the possible set of names that need to be checked for conflicts.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.ShouldIncludeLocation(System.Collections.Generic.ISet{Microsoft.CodeAnalysis.Rename.RenameLocation},Microsoft.CodeAnalysis.Rename.RenameLocation)">
            We try to rewrite all locations that are invalid candidate locations. If there is only
            one location it must be the correct one (the symbol is ambiguous to something else)
            and we always try to rewrite it.  If there are multiple locations, we only allow it
            if the candidate reason allows for it).
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.GetSubSpansToRenameInStringAndCommentTextSpans(Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Rename.RenameLocation})">
            <summary>
            We try to compute the sub-spans to rename within the given <paramref name="containingLocationForStringOrComment"/>.
            If we are renaming within a string, the locations to rename are always within this containing string location
            and we can identify these sub-spans.
            However, if we are renaming within a comment, the rename locations can be anywhere in trivia,
            so we return null and the rename rewriter will perform a complete regex match within comment trivia
            and rename all matches instead of specific matches.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution">
            <summary>
            The result of the conflict engine. Can be made immutable by calling <see cref="M:Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution.ToConflictResolution"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution.OldSolution">
            <summary>
            The base workspace snapshot
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution.ReplacementTextValid">
            <summary>
            Whether the text that was resolved with was even valid. This may be false if the
            identifier was not valid in some language that was involved in the rename.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution.ReplacementText">
            <summary>
            The original text that is the rename replacement.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.ConflictEngine.MutableConflictResolution.CurrentSolution">
            <summary>
            The solution snapshot as it is being updated with specific rename steps.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocation">
            <summary>
            Gives information about an identifier span that was affected by Rename (Reference or Non reference)
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocation.ConflictCheckSpan">
            <summary>
            The Span of the original identifier if it was in source, otherwise the span to check for implicit
            references.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocation.ComplexifiedTargetSpan">
            <summary>
            If there was a conflict at ConflictCheckSpan during rename, then the next phase in rename uses
            ComplexifiedTargetSpan span to be expanded to resolve the conflict.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocationType.NoConflict">
            <summary>
            There was no conflict. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocationType.ResolvedReferenceConflict">
            <summary>
            A conflict was resolved at a location that references the symbol being renamed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocationType.ResolvedNonReferenceConflict">
            <summary>
            A conflict was resolved in a piece of code that does not reference the symbol being
            renamed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocationType.PossiblyResolvableConflict">
            <summary>
            There was a conflict that could not be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RelatedLocationType.UnresolvableConflict">
            <summary>
            These are the conflicts that cannot be resolved. E.g.: Declaration Conflict
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenamedSpansTracker">
            <summary>
            Tracks the text spans that were modified as part of a rename operation
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenamedSpansTracker.MutableComplexifiedSpan">
            <summary>
            Information to track deltas of complexified spans
            
            Consider the following example where renaming a->b causes a conflict 
            and Goo is an extension method:
                "a.Goo(a)" is rewritten to "NS1.NS2.Goo(NS3.a, NS3.a)"
            
            The OriginalSpan is the span of "a.Goo(a)"
            
            The NewSpan is the span of "NS1.NS2.Goo(NS3.a, NS3.a)"
            
            The ModifiedSubSpans are the pairs of complexified symbols sorted 
            according to their order in the original source code span:
                "a", "NS3.a"
                "Goo", "NS1.NS2.Goo"
                "a", "NS3.a"
            
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation">
            <summary>
            This annotation will be used by rename to mark all places where it needs to rename an identifier (token replacement) and where to 
            check if the semantics have been changes (conflict detection).
            </summary>
            <remarks>This annotation should be put on tokens only.</remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.OriginalSpan">
            <summary>
            The span this token occupied in the original syntax tree. Can be used to show e.g. conflicts in the UI.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.IsRenameLocation">
            <summary>
            A flag indicating whether this is a location that needs to be renamed or just tracked for conflicts.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.IsOriginalTextLocation">
            <summary>
            A flag indicating whether the token at this location has the same ValueText then the original name 
            of the symbol that gets renamed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.Prefix">
            <summary>
            When replacing the annotated token this string will be prepended to the token's value. This is used when renaming compiler 
            generated fields and methods backing properties (e.g. "get_X" or "_X" for property "X").
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.Suffix">
            <summary>
            When replacing the annotated token this string will be appended to the token's value. This is used when renaming compiler 
            generated types whose names are derived from user given names (e.g. "XEventHandler" for event "X").
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.RenameDeclarationLocationReferences">
            <summary>
            A single dimensional array of annotations to verify after rename.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.IsNamespaceDeclarationReference">
            <summary>
            States if this token is a Namespace Declaration Reference
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.IsMemberGroupReference">
            <summary>
            States if this token is a member group reference, typically found in NameOf expressions
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameActionAnnotation.IsInvocationExpression">
            <summary>
            States if this token is annotated as a part of the Invocation Expression that needs to be checked for the Conflicts
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameDeclarationLocationReference">
            <summary>
            This class is used to refer to a Symbol definition which could be in source or metadata
            it has a metadata name.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameDeclarationLocationReference.Name">
            <summary>
            The metadata name for this symbol.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameDeclarationLocationReference.SymbolLocationsCount">
            <summary>
            Count of symbol location (Partial Types, Constructors, etc).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictEngine.RenameDeclarationLocationReference.IsOverriddenFromMetadata">
            <summary>
            A flag indicating that the associated symbol is an override of a symbol from metadata
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictResolution.NewSolution">
            <summary>
            The final solution snapshot.  Including any renamed documents.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.ConflictResolution.DocumentIds">
            <summary>
            The list of all document ids of documents that have been touched for this rename operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRemoteRenamerService.RenameSymbolAsync(Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Remote.SerializableSymbolAndProjectId,System.String,Microsoft.CodeAnalysis.Rename.SerializableRenameOptionSet,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Remote.SerializableSymbolAndProjectId},System.Threading.CancellationToken)">
            <summary>
            Runs the entire rename operation OOP and returns the final result. More efficient (due to less back and
            forth marshaling) when the intermediary results of rename are not needed. To get the individual parts of
            rename remoted use <see cref="M:Microsoft.CodeAnalysis.Rename.IRemoteRenamerService.FindRenameLocationsAsync(Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Remote.SerializableSymbolAndProjectId,Microsoft.CodeAnalysis.Rename.SerializableRenameOptionSet,System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.CodeAnalysis.Rename.IRemoteRenamerService.ResolveConflictsAsync(Microsoft.CodeAnalysis.Remote.PinnedSolutionInfo,Microsoft.CodeAnalysis.Rename.SerializableRenameLocations,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Remote.SerializableSymbolAndProjectId},System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.RenameLocations">
            <summary>
            A helper class that contains some of the methods and filters that must be used when
            processing the raw results from the FindReferences API.
            </summary>
            <summary>
            Holds the Locations of a symbol that should be renamed, along with the symbol and Solution
            for the set.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.RenameLocations.ReferenceProcessing.TryGetRenamableSymbolAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Given a symbol in a document, returns the "right" symbol that should be renamed in
            the case the name binds to things like aliases _and_ the underlying type at once.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.RenameLocations.ReferenceProcessing.FindDefinitionSymbolAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Given a symbol, finds the symbol that actually defines the name that we're using.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.RenameLocations.ReferenceProcessing.GetRenamableDefinitionLocationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Given a ISymbol, returns the renameable locations for a given symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.RenameLocations.FindLocationsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Rename.RenameOptionSet,System.Threading.CancellationToken)">
            <summary>
            Find the locations that need to be renamed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.RenameLocations.ResolveConflictsAsync(System.String,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ISymbol},System.Threading.CancellationToken)">
            <summary>
            Performs the renaming of the symbol in the solution, identifies renaming conflicts and automatically
            resolves them where possible.
            </summary>
            <param name="replacementText">The new name of the identifier</param>
            <param name="nonConflictSymbols">Used after renaming references. References that now bind to any of these
            symbols are not considered to be in conflict. Useful for features that want to rename existing references to
            point at some existing symbol. Normally this would be a conflict, but this can be used to override that
            behavior.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A conflict resolution containing the new solution.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.AnnotateAndRename(Microsoft.CodeAnalysis.Rename.RenameRewriterParameters)">
            <summary>
            This method annotates the given syntax tree with all the locations that need to be checked for conflict
            after the rename operation.  It also renames all the reference locations and expands any conflict locations.
            </summary>
            <param name="parameters">The options describing this rename operation</param>
            <returns>The root of the annotated tree.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.TryAddPossibleNameConflicts(Microsoft.CodeAnalysis.ISymbol,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Based on the kind of the symbol and the new name, this function determines possible conflicting names that
            should be tracked for semantic changes during rename.
            </summary>
            <param name="symbol">The symbol that gets renamed.</param>
            <param name="newName">The new name for the symbol.</param>
            <param name="possibleNameConflicts">List where possible conflicting names will be added to.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.ComputeDeclarationConflictsAsync(System.String,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution,System.Collections.Generic.IDictionary{Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.Location},System.Threading.CancellationToken)">
            <summary>
            Identifies the conflicts caused by the new declaration created during rename.
            </summary>
            <param name="replacementText">The replacementText as given from the user.</param>
            <param name="renamedSymbol">The new symbol (after rename).</param>
            <param name="renameSymbol">The original symbol that got renamed.</param>
            <param name="referencedSymbols">All referenced symbols that are part of this rename session.</param>
            <param name="baseSolution">The original solution when rename started.</param>
            <param name="newSolution">The resulting solution after rename.</param>
            <param name="reverseMappedLocations">A mapping from new to old locations.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All locations where conflicts were caused because the new declaration.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.ComputeImplicitReferenceConflictsAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation},System.Threading.CancellationToken)">
            <summary>
            Identifies the conflicts caused by implicitly referencing the renamed symbol.
            </summary>
            <param name="renameSymbol">The original symbol that got renamed.</param>
            <param name="renamedSymbol">The new symbol (after rename).</param>
            <param name="implicitReferenceLocations">All implicit reference locations.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of implicit conflicts.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.ComputePossibleImplicitUsageConflicts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Location,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Identifies the conflicts caused by implicitly referencing the renamed symbol.
            </summary>
            <param name="renamedSymbol">The new symbol (after rename).</param>
            <param name="semanticModel">The SemanticModel of the document in the new solution containing the renamedSymbol</param>
            <param name="originalDeclarationLocation">The location of the renamedSymbol in the old solution</param>
            <param name="newDeclarationLocationStartingPosition">The starting position of the renamedSymbol in the new solution</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of implicit conflicts.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.LocalVariableConflict(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol})">
            <summary>
            Identifies potential Conflicts into the inner scope locals. This may give false positives.
            </summary>
            <param name="token">The Token that may introduce errors else where</param>
            <param name="newReferencedSymbols">The symbols that this token binds to after the rename
            has been applied</param>
            <returns>Returns if there is a potential conflict</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.IsIdentifierValid(System.String,Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService)">
            <summary>
            Used to find if the replacement Identifier is valid
            </summary>
            <param name="replacementText"></param>
            <param name="syntaxFactsService"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.IRenameRewriterLanguageService.GetExpansionTargetForLocation(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Gets the top most enclosing statement as target to call MakeExplicit on.
            It's either the enclosing statement, or if this statement is inside of a lambda expression, the enclosing
            statement of this lambda.
            </summary>
            <param name="token">The token to get the complexification target for.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.RenameEntityKind.BaseSymbol">
            <summary>
            mentions that the result is for the base symbol of the rename
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Rename.RenameEntityKind.OverloadedSymbols">
            <summary>
            mentions that the result is for the overloaded symbols of the rename
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.RenameOptions.RenameFile">
            <summary>
            Set to true if the file name should match the type name after a rename operation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAsync(Microsoft.CodeAnalysis.Document,System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
             <summary>
             Call to perform a rename of document or change in document folders. Returns additional code changes related to the document
             being modified, such as renaming symbols in the file. 
            
             Each change is added as a <see cref="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction"/> in the returned <see cref="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions" />.
             
             Each action may individually encounter errors that prevent it from behaving correctly. Those are reported in <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction.GetErrors(System.Globalization.CultureInfo)"/>.
             
             <para />
             
             Current supported actions that may be returned: 
             <list>
              <item>Rename symbol action that will rename the type to match the document name.</item>
              <item>Sync namespace action that will sync the namespace(s) of the document to match the document folders. </item>
             </list>
             
             </summary>
             <param name="document">The document to be modified</param>
             <param name="newDocumentName">The new name for the document. Pass null or the same name to keep unchanged.</param>
             <param name="newDocumentFolders">The new set of folders for the <see cref="P:Microsoft.CodeAnalysis.TextDocument.Folders"/> property</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction">
            <summary>
            Individual action from RenameDocument APIs in <see cref="T:Microsoft.CodeAnalysis.Rename.Renamer"/>. Represents
            changes that will be done to one or more document contents to help facilitate
            a smooth experience while moving documents around.
            
            See <see cref="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet" /> on use case and how to apply them to a solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction.GetErrors(System.Globalization.CultureInfo)">
            <summary>
            Get any errors that have been noted for this action before it is applied.
            Can be used to present to a user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction.GetDescription(System.Globalization.CultureInfo)">
            <summary>
            Gets the description of the action. Can be used to present to a user to describe
            what extra actions will be taken.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet">
            <summary>
            Information about rename document calls that allows them to be applied as individual actions. Actions are individual units of work
            that can change the contents of one or more document in the solution. Even if the <see cref="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions"/> is empty, the 
            document metadata will still be updated by calling <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction},System.Threading.CancellationToken)"/>
            <para />
            To apply all actions use <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)"/>, or use a subset
            of the actions by calling <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction},System.Threading.CancellationToken)"/>. 
            Actions can be applied in any order.
            Each action has a description of the changes that it will apply that can be presented to a user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions">
            <summary>
            All applicable actions computed for the action. Action set may be empty, which represents updates to document 
            contents rather than metadata. Document metadata will still not be updated unless <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction},System.Threading.CancellationToken)" /> 
            is called.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Same as calling <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction},System.Threading.CancellationToken)"/> with 
            <see cref="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions"/> as the argument
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction},System.Threading.CancellationToken)">
            <summary>
            Applies each <see cref="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction"/> in order and returns the final solution. 
            All actions must be contained in <see cref="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions" />
            </summary>
            <remarks>
            An empty action set is still allowed and will return a modified solution
            that will update the document properties as appropriate. This means we 
            can still support when <see cref="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions"/> is empty. It's desirable
            that consumers can call a rename API to produce a <see cref="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet"/> and
            immediately call <see cref="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentAction},System.Threading.CancellationToken)"/> without
            having to inspect the returned <see cref="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.ApplicableActions"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameDocumentActionSet.GetDocument(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Attempts to find the document in the solution. Tries by documentId first, but 
            that's not always reliable between analysis and application of the rename actions
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolDocumentAction">
            <summary>
            Action that will rename a type to match the current document name. Works by finding a type matching the origanl name of the document (case insensitive) 
            and updating that type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolDocumentAction.GetMatchingTypeDeclarationAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Finds a matching type such that the display name of the type matches the name passed in, ignoring case. Case isn't used because
            documents with name "Foo.cs" and "foo.cs" should still have the same type name
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolDocumentAction.AnalysisResult.OriginalDocumentName">
            <summary>
            Name of the document that the action was produced for.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolDocumentAction.AnalysisResult.NewDocumentName">
            <summary>
            The new document name that will be used.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolDocumentAction.AnalysisResult.OriginalSymbolName">
            <summary>
            The original name of the symbol that will be changed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolDocumentAction.AnalysisResult.NewSymbolName">
            <summary>
            The new name for the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Rename.Renamer.SyncNamespaceDocumentAction">
            <summary>
            Action that will sync the namespace of the document to match the folders property 
            of that document, similar to if a user performed the "Sync Namespace" code refactoring.
            
            For example, if a document is moved from "Bat/Bar/Baz" folder structure to "Bat/Bar/Baz/Bat" and contains
            a namespace definition of Bat.Bar.Baz in the document, then it would update that definition to 
            Bat.Bar.Baz.Bat and update the solution to reflect these changes. Uses <see cref="T:Microsoft.CodeAnalysis.ChangeNamespace.IChangeNamespaceService"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Rename.RenameUtilities.ShouldRenameOnlyAffectDeclaringProject(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Renaming a private symbol typically confines the set of references and potential
            conflicts to that symbols declaring project. However, rename may cascade to
            non-public symbols which may then require other projects be considered.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeNamespace.IChangeNamespaceService.CanChangeNamespaceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
             <summary>
             Determine whether we can change the namespace for given <paramref name="container"/> in the document.
             Linked documents are not supported, except for a regular document in a multi-targeting project, 
             where the container node must be consistent among all linked documents.
             Here's the additional requirements on <paramref name="container"/> to use this service:
             
             - If <paramref name="container"/> is a namespace declaration node:
                1. Doesn't contain or is nested in other namespace declarations
                2. The name of the namespace is valid (i.e. no errors)
                3. No partial type declared in the namespace. Otherwise its multiple declarations will
                   end up in different namespace.
            
             - If <paramref name="container"/> is a compilation unit node:
                1. It must contain no namespace declaration
                2. No partial type declared in the document. Otherwise its multiple declarations will
                   end up in different namespace.
                   
             - Otherwise, an <see cref="T:System.ArgumentException"/> will be thrown.
               
             Returns <see langword="true"/> only when all the requirements above are met.
             </summary>
             <remarks>
             While this service might be used by features that change namespace based on some property of the document
             (e.g. Sync namespace refactoring), those logic is implemented by those individual features and isn't part 
             of the IChangeNamespaceService service.
             </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeNamespace.IChangeNamespaceService.ChangeNamespaceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.String,System.Threading.CancellationToken)">
            <summary>
            Change namespace for given <paramref name="container"/> to the name specified by <paramref name="targetNamespace"/>.
            Everything declared in the <paramref name="container"/> will be moved to the new namespace. 
            Change will only be made if <see cref="M:Microsoft.CodeAnalysis.ChangeNamespace.IChangeNamespaceService.CanChangeNamespaceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)"/> returns <see langword="true"/> and <paramref name="targetNamespace"/>
            is a valid name for namespace. Use "" for <paramref name="targetNamespace"/> to specify the global namespace.
            
            An <see cref="T:System.ArgumentException"/> will be thrown if:
            1. <paramref name="container"/> is not a namespace declaration or a compilation unit node.
            2. <paramref name="targetNamespace"/> is null or contains an invalid character.
            </summary>
            <remarks>
            If the declared namespace for <paramref name="container"/> is already identical to <paramref name="targetNamespace"/>, then it will be
            a no-op and original solution will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeNamespace.IChangeNamespaceService.TryChangeTopLevelNamespacesAsync(Microsoft.CodeAnalysis.Document,System.String,System.Threading.CancellationToken)">
            <summary>
            Using only the top level namespace declarations of a document, change all of them to the target namespace. Will only
            use namespace containers considered valid by <see cref="M:Microsoft.CodeAnalysis.ChangeNamespace.IChangeNamespaceService.CanChangeNamespaceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SemanticModelReuse.AbstractSemanticModelReuseLanguageService`4.s_watsonReported">
            <summary>
            Used to make sure we only report one watson per sessoin here.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SemanticModelReuse.ISemanticModelReuseLanguageService">
            <summary>
            Interface only for use by <see cref="T:Microsoft.CodeAnalysis.SemanticModelReuse.ISemanticModelReuseWorkspaceService"/>.  Includes language specific
            implementations on how to get an appropriate speculated semantic model given an older semantic model and a
            changed method body.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SemanticModelReuse.ISemanticModelReuseLanguageService.TryGetContainingMethodBodyForSpeculation(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a node, returns the parent method-body-esque node that we can get a new speculative semantic model
            for.  Returns <see langword="null"/> if not in such a location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SemanticModelReuse.ISemanticModelReuseLanguageService.TryGetSpeculativeSemanticModelAsync(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Given a previous semantic model, and a method-eque node in the current tree for that same document, attempts
            to create a new speculative semantic model using the top level symbols of <paramref
            name="previousSemanticModel"/> but the new body level symbols produced for <paramref
            name="currentBodyNode"/>.
            <para>
            Note: it is critical that no top level changes have occurred between the syntax tree that <paramref
            name="previousSemanticModel"/> points at and the syntax tree that <paramref name="currentBodyNode"/> points
            at.  In other words, they must be <see cref="M:Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)"/><c>(..., topLevel: true)</c>.  This
            function is undefined if they are not.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseInfo.PreviousNonSpeculativeSemanticModel">
            <summary>
            The original <em>non-speculative</em> semantic model we retrieved for this document at some point.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseInfo.CurrentSemanticModel">
            <summary>
            The current semantic model we retrieved <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> for the <see cref="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseInfo.BodyNode"/>.  Could
            be speculative or non-speculative.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseInfo.BodyNode">
            <summary>
            The current method body we retrieved the <see cref="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseInfo.CurrentSemanticModel"/> for.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseInfo.TopLevelSemanticVersion">
            <summary>
            The top level version of the project when we retrieved <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/>.  As long as this is the
            same we can continue getting speculative models to use.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SemanticModelReuse.SemanticModelReuseWorkspaceServiceFactory.SemanticModelReuseWorkspaceService._semanticModelMap">
            <summary>
            A mapping from a document id to the last semantic model we produced for it, along with the top level
            semantic version that that semantic model corresponds to.  We can continue reusing the semantic model as
            long as no top level changes occur.
            <para>
            In general this dictionary will only contain a single key-value pair.  However, in the case of linked
            documents, there will be a key-value pair for each of the independent document links that a document
            has.
            </para>
            <para>
            A <see langword="null"/> value simply means we haven't cached any information for that particular id.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SemanticModelReuse.ISemanticModelReuseWorkspaceService">
            <summary>
            a service that provides a semantic model that will re-use last known compilation if
            semantic version hasn't changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SemanticModelReuse.ISemanticModelReuseWorkspaceService.ReuseExistingSpeculativeModelAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Don't call this directly. use <see cref="M:Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.ReuseExistingSpeculativeModelAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)"/> (or an overload).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArrayExtensions.AsRef``1(Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{``0}@)">
             <summary>
             Gets a mutable reference to a <see cref="T:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1"/> stored in a <c>using</c> variable.
             </summary>
             <remarks>
             <para>This supporting method allows <see cref="T:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1"/>, a non-copyable <see langword="struct"/>
             implementing <see cref="T:System.IDisposable"/>, to be used with <c>using</c> statements while still allowing them to
             be passed by reference in calls. The following two calls are equivalent:</para>
            
             <code>
             using var array = TemporaryArray&lt;T&gt;.Empty;
            
             // Using the 'Unsafe.AsRef' method
             Method(ref Unsafe.AsRef(in array));
            
             // Using this helper method
             Method(ref array.AsRef());
             </code>
            
             <para>⚠ Do not move or rename this method without updating the corresponding
             <see href="https://github.com/dotnet/roslyn-analyzers/blob/30180a51af8c4711e51d98df7345f14d083efb63/src/Roslyn.Diagnostics.Analyzers/Core/TemporaryArrayAsRefAnalyzer.cs">RS0049</see>
             analyzer.</para>
             </remarks>
             <typeparam name="T">The type of element stored in the temporary array.</typeparam>
             <param name="array">A read-only reference to a temporary array which is part of a <c>using</c> statement.</param>
             <returns>A mutable reference to the temporary array.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1">
            <summary>
            Provides temporary storage for a collection of elements. This type is optimized for handling of small
            collections, particularly for cases where the collection will eventually be discarded or used to produce an
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <remarks>
            This type stores small collections on the stack, with the ability to transition to dynamic storage if/when
            larger number of elements are added.
            </remarks>
            <typeparam name="T">The type of elements stored in the collection.</typeparam>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1.InlineCapacity">
            <summary>
            The number of elements the temporary can store inline. Storing more than this many elements requires the
            array transition to dynamic storage.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item0">
            <summary>
            The first inline element.
            </summary>
            <remarks>
            This field is only used when <see cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._builder"/> is <see langword="null"/>. In other words, this type
            stores elements inline <em>or</em> stores them in <see cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._builder"/>, but does not use both approaches
            at the same time.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item1">
            <summary>
            The second inline element.
            </summary>
            <seealso cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item0"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item2">
            <summary>
            The third inline element.
            </summary>
            <seealso cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item0"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item3">
            <summary>
            The fourth inline element.
            </summary>
            <seealso cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._item0"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._count">
            <summary>
            The number of inline elements held in the array. This value is only used when <see cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._builder"/> is
            <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._builder">
            <summary>
            A builder used for dynamic storage of collections that may exceed the limit for inline elements.
            </summary>
            <remarks>
            This field is initialized to non-<see langword="null"/> the first time the <see cref="T:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1"/>
            needs to store more than four elements. From that point, <see cref="F:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1._builder"/> is used instead of inline
            elements, even if items are removed to make the result smaller than four elements.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1.ToImmutableAndClear">
            <summary>
            Create an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> with the elements currently held in the temporary array, and clear
            the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1.MoveInlineToBuilder">
            <summary>
            Transitions the current <see cref="T:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1"/> from inline storage to dynamic storage storage. An
            <see cref="T:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1"/> instance is taken from the shared pool, and all elements currently in inline
            storage are added to it. After this point, dynamic storage will be used instead of inline storage.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray`1.ThrowIndexOutOfRangeException">
            <summary>
            Throws <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <remarks>
            This helper improves the ability of the JIT to inline callers.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Collections.IntervalTree`1">
            <summary>
            An interval tree represents an ordered tree data structure to store intervals of the form 
            [start, end).  It allows you to efficiently find all intervals that intersect or overlap 
            a provided interval.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.IntervalTree`1.FillWithIntervalsThatMatch``1(System.Int32,System.Int32,Microsoft.CodeAnalysis.Shared.Collections.IntervalTree{`0}.TestInterval{``0},Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{`0}@,``0@,System.Boolean)">
            <returns>The number of matching intervals found by the method.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.IntervalTree`1.FillWithIntervalsThatMatch``1(System.Int32,System.Int32,Microsoft.CodeAnalysis.Shared.Collections.IntervalTree{`0}.TestInterval{``0},Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{`0}@,``0@,System.Boolean,System.Collections.Generic.Stack{System.ValueTuple{Microsoft.CodeAnalysis.Shared.Collections.IntervalTree{`0}.Node,System.Boolean}})">
            <returns>The number of matching intervals found by the method.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.SimpleIntervalTree`2.AddIntervalInPlace(`0)">
            <summary>
            Warning.  Mutates the tree in place.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Collections.SimpleIntervalTree`2.ClearInPlace">
            <summary>
            Warning.  Mutates the tree in place.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetPartialSemanticModelAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Returns the semantic model for this document that may be produced from partial semantics. The semantic model
            is only guaranteed to contain the syntax tree for <paramref name="document"/> and nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.ReuseExistingSpeculativeModelAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to return an speculative semantic model for <paramref name="document"/> if possible if <paramref
            name="position"/> is contained within a method body in the tree.  Specifically, this will attempt to get an
            existing cached semantic model for <paramref name="document"/>.  If it can find one, and the top-level semantic
            version for this project matches the cached version, and the position is within a method body, then it will 
            be returned, just with the previous corresponding method body swapped out with the current method body.
            <para/>
            If this is not possible, the regular semantic model for <paramref name="document"/> will be returned.
            <para/>
            When using this API, semantic model should only be used to ask questions about nodes inside of the member
            that contains the given <paramref name="position"/>.
            <para/>
            As a speculative semantic model may be returned, location based information provided by it may be innacurate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.ReuseExistingSpeculativeModelAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to return an speculative semantic model for <paramref name="document"/> if possible if <paramref
            name="span"/> is contained within a method body in the tree.  Specifically, this will attempt to get an
            existing cached semantic model <paramref name="document"/>.  If it can find one, and the top-level semantic
            version for this project matches the cached version, and the position is within a method body, then it will 
            be returned, just with the previous corresponding method body swapped out with the current method body.
            <para/>
            If this is not possible, the regular semantic model for <paramref name="document"/> will be returned.
            <para/>
            When using this API, semantic model should only be used to ask questions about nodes inside of the
            member that contains the given <paramref name="span"/>.
            <para/>
            As a speculative semantic model may be returned, location based information provided by it may be innacurate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.ReuseExistingSpeculativeModelAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Attempts to return an speculative semantic model for <paramref name="document"/> if possible if <paramref
            name="node"/> is contained within a method body in the tree.  Specifically, this will attempt to get an
            existing cached semantic model <paramref name="document"/>.  If it can find one, and the top-level semantic
            version for this project matches the cached version, and the position is within a method body, then it will 
            be returned, just with the previous corresponding method body swapped out with the current method body.
            <para/>
            If this is not possible, the regular semantic model for <paramref name="document"/> will be returned.
            <para/>
            When using this API, semantic model should only be used to ask questions about nodes inside of the
            member that contains the given <paramref name="node"/>.
            <para/>
            As a speculative semantic model may be returned, location based information provided by it may be innacurate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.FileLinePositionSpanExtensions.GetMappedFilePathIfExist(Microsoft.CodeAnalysis.FileLinePositionSpan)">
            <summary>
            Get mapped file path if exist, otherwise return null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.IMethodSymbolExtensions.GetAllMethodSymbolsOfPartialParts(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Returns the methodSymbol and any partial parts.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.IMethodSymbolExtensions.HasEventHandlerSignature(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Returns true for void returning methods with two parameters, where
            the first parameter is of <see cref="T:System.Object"/> type and the second
            parameter inherits from or equals <see cref="T:System.EventArgs"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.INamedTypeSymbolExtensions.GetOverridableMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Threading.CancellationToken)">
            <summary>
            Gets the set of members in the inheritance chain of <paramref name="containingType"/> that
            are overridable.  The members will be returned in furthest-base type to closest-base
            type order.  i.e. the overridable members of <see cref="T:System.Object"/> will be at the start
            of the list, and the members of the direct parent type of <paramref name="containingType"/> 
            will be at the end of the list.
            
            If a member has already been overridden (in <paramref name="containingType"/> or any base type) 
            it will not be included in the list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.INamespaceSymbolExtensions.FindNamespaces(Microsoft.CodeAnalysis.INamespaceSymbol,System.String,System.Threading.CancellationToken)">
            <summary>
            Searches the namespace for namespaces with the provided name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsEditorBrowsable(Microsoft.CodeAnalysis.ISymbol,System.Boolean,Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Shared.Utilities.EditorBrowsableHelpers.EditorBrowsableInfo)">
            <summary>
            Checks a given symbol for browsability based on its declaration location, attributes 
            explicitly limiting browsability, and whether showing of advanced members is enabled. 
            The optional editorBrowsableInfo parameters may be used to specify the symbols of the
            constructors of the various browsability limiting attributes because finding these 
            repeatedly over a large list of symbols can be slow. If these are not provided,
            they will be found in the compilation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.FilterToVisibleAndBrowsableSymbols``1(System.Collections.Immutable.ImmutableArray{``0},System.Boolean,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            First, remove symbols from the set if they are overridden by other symbols in the set.
            If a symbol is overridden only by symbols outside of the set, then it is not removed. 
            This is useful for filtering out symbols that cannot be accessed in a given context due
            to the existence of overriding members. Second, remove remaining symbols that are
            unsupported (e.g. pointer types in VB) or not editor browsable based on the EditorBrowsable
            attribute.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.RequiresUnsafeModifier(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns <see langword="true"/> if the signature of this symbol requires the <see
            langword="unsafe"/> modifier.  For example a method that takes <c>List&lt;int*[]&gt;</c>
            is unsafe, as is <c>int* Goo { get; }</c>.  This will return <see langword="false"/> for
            symbols that cannot have the <see langword="unsafe"/> modifier on them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsInaccessibleLocal(Microsoft.CodeAnalysis.ISymbol,System.Int32)">
            <returns>
            Returns true if symbol is a local variable and its declaring syntax node is 
            after the current position, false otherwise (including for non-local symbols)
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsAwaitableNonDynamic(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32)">
            <summary>
            If the <paramref name="symbol"/> is a method symbol, returns <see langword="true"/> if the method's return type is "awaitable", but not if it's <see langword="dynamic"/>.
            If the <paramref name="symbol"/> is a type symbol, returns <see langword="true"/> if that type is "awaitable".
            An "awaitable" is any type that exposes a GetAwaiter method which returns a valid "awaiter". This GetAwaiter method may be an instance method or an extension method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsSymbolWithSpecialDiscardName(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns true for symbols whose name starts with an underscore and
            are optionally followed by an integer, such as '_', '_1', '_2', etc.
            These are treated as special discard symbol names.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsObsolete(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns <see langword="true"/>, if the symbol is marked with the <see cref="T:System.ObsoleteAttribute"/>.
            </summary>
            <param name="symbol"></param>
            <returns><see langword="true"/> if the symbol is marked with the <see cref="T:System.ObsoleteAttribute"/>.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.RequiresUnsafeModifierVisitor">
            <summary>
            Visits types or members that have signatures (i.e. methods, fields, etc.) and determines
            if any of them reference a pointer type and should thus have the <see
            langword="unsafe"/> modifier on them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsAccessibleWithin(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks if 'symbol' is accessible from within 'within'.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsAccessibleWithin(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.IAssemblySymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks if 'symbol' is accessible from within assembly 'within'.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsAccessibleWithin(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks if 'symbol' is accessible from within name type 'within', with an optional
            qualifier of type "throughTypeOpt".
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsSymbolAccessible(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean@)">
            <summary>
            Checks if 'symbol' is accessible from within assembly 'within', with an qualifier of
            type "throughTypeOpt". Sets "failedThroughTypeCheck" to true if it failed the "through
            type" check.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions.IsSymbolAccessibleCore(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean@)">
            <summary>
            Checks if 'symbol' is accessible from within 'within', which must be a INamedTypeSymbol
            or an IAssemblySymbol.  If 'symbol' is accessed off of an expression then
            'throughTypeOpt' is the type of that expression. This is needed to properly do protected
            access checks. Sets "failedThroughTypeCheck" to true if this protected check failed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.FindImplementationsForInterfaceMemberAsync(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Returns the corresponding symbol in this type or a base type that implements
            interfaceMember (either implicitly or explicitly), or null if no such symbol exists
            (which might be either because this type doesn't implement the container of
            interfaceMember, or this type doesn't supply a member that successfully implements
            interfaceMember).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ProjectExtensions.GetExtendedLanguageServices(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets extended host language services, which includes language services from <see cref="P:Microsoft.CodeAnalysis.Project.LanguageServices"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SafeHandleExtensions.Lease(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Acquires a lease on a safe handle. The lease increments the reference count of the <see cref="T:System.Runtime.InteropServices.SafeHandle"/>
            to ensure the handle is not released prior to the lease being released.
            </summary>
            <remarks>
            This method is intended to be used in the initializer of a <c>using</c> statement. Failing to release the
            lease will permanently prevent the underlying <see cref="T:System.Runtime.InteropServices.SafeHandle"/> from being released by the garbage
            collector.
            </remarks>
            <param name="handle">The <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to lease.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.Shared.Extensions.SafeHandleLease"/>, which must be disposed to release the resource.</returns>
            <exception cref="T:System.ObjectDisposedException">If the lease could not be acquired.</exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Extensions.SafeHandleLease">
            <summary>
            Represents a lease of a <see cref="T:System.Runtime.InteropServices.SafeHandle"/>.
            </summary>
            <seealso cref="M:Microsoft.CodeAnalysis.Shared.Extensions.SafeHandleExtensions.Lease(System.Runtime.InteropServices.SafeHandle)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SafeHandleLease.Dispose">
            <summary>
            Releases the <see cref="T:System.Runtime.InteropServices.SafeHandle"/> lease. The behavior of this method is unspecified if called more than
            once.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetType(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Fetches the ITypeSymbol that should be used if we were generating a parameter or local that would accept <paramref name="expression"/>. If
            expression is a type, that's returned; otherwise this will see if it's something like a method group and then choose an appropriate delegate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
            <summary>
            Gets semantic information, such as type, symbols, and diagnostics, about the parent of a token.
            </summary>
            <param name="semanticModel">The SemanticModel object to get semantic information
            from.</param>
            <param name="token">The token to get semantic information from. This must be part of the
            syntax tree associated with the binding.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SourceTextExtensions.GetLeadingWhitespaceOfLineAtPosition(Microsoft.CodeAnalysis.Text.SourceText,System.Int32)">
            <summary>
            Returns the leading whitespace of the line located at the specified position in the given snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SourceTextExtensions.TryOverlapsHiddenPosition(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,System.Func{System.Int32,System.Threading.CancellationToken,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Same as OverlapsHiddenPosition but doesn't throw on cancellation.  Instead, returns false
            in that case.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.GenerateDelegateThroughMemberStatement(Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Generates a call to a method *through* an existing field or property symbol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.CreateGetHashCodeMethodStatements(Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal,Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},System.Boolean)">
            <summary>
            Generates an override of <see cref="M:System.Object.GetHashCode"/> similar to the one
            generated for anonymous types.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.SimpleLocalDeclarationStatement(Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.Editing.SyntaxGeneratorInternal,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            In VB it's more idiomatic to write things like <c>Dim t = TryCast(obj, SomeType)</c>
            instead of <c>Dim t As SomeType = TryCast(obj, SomeType)</c>, so we just elide the type
            from the decl.  For C# we don't want to do this though.  We want to always include the
            type and let the simplifier decide if it should be <c>var</c> or not.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.IsSpecialCaseBinaryExpression(Microsoft.CodeAnalysis.Operations.IBinaryOperation,Microsoft.CodeAnalysis.Operations.BinaryOperatorKind)">
            <summary>
            Returns true if the binaryExpression consists of an expression that can never be negative, 
            such as length or unsigned numeric types, being compared to zero with greater than, 
            less than, or equals relational operator.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.CompilationExtensions.GetBestTypeByMetadataName(Microsoft.CodeAnalysis.Compilation,System.String)">
             <summary>
             Gets a type by its metadata name to use for code analysis within a <see cref="T:Microsoft.CodeAnalysis.Compilation"/>. This method
             attempts to find the "best" symbol to use for code analysis, which is the symbol matching the first of the
             following rules.
            
             <list type="number">
               <item><description>
                 If only one type with the given name is found within the compilation and its referenced assemblies, that
                 type is returned regardless of accessibility.
               </description></item>
               <item><description>
                 If the current <paramref name="compilation"/> defines the symbol, that symbol is returned.
               </description></item>
               <item><description>
                 If exactly one referenced assembly defines the symbol in a manner that makes it visible to the current
                 <paramref name="compilation"/>, that symbol is returned.
               </description></item>
               <item><description>
                 Otherwise, this method returns <see langword="null"/>.
               </description></item>
             </list>
             </summary>
             <param name="compilation">The <see cref="T:Microsoft.CodeAnalysis.Compilation"/> to consider for analysis.</param>
             <param name="fullyQualifiedMetadataName">The fully-qualified metadata type name to find.</param>
             <returns>The symbol to use for code analysis; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.DiagnosticDescriptorExtensions.GetEffectiveSeverity(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.CompilationOptions,System.Nullable{Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult})">
            <summary>
            Gets project-level effective severity of the given <paramref name="descriptor"/> accounting for severity configurations from both the following sources:
            1. Compilation options from ruleset file, if any, and command line options such as /nowarn, /warnaserror, etc.
            2. Analyzer config documents at the project root directory or in ancestor directories.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.DiagnosticDescriptorExtensions.TryGetSeverityFromBulkConfiguration(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult,Microsoft.CodeAnalysis.ReportDiagnostic@)">
            <summary>
            Tries to get configured severity for the given <paramref name="descriptor"/>
            from bulk configuration analyzer config options, i.e.
                'dotnet_analyzer_diagnostic.category-%RuleCategory%.severity = %severity%'
                    or
                'dotnet_analyzer_diagnostic.severity = %severity%'
            Docs: https://docs.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers?view=vs-2019#set-rule-severity-of-multiple-analyzer-rules-at-once-in-an-editorconfig-file for details
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ListExtensions.RemoveOrTransformAll``2(System.Collections.Generic.List{``0},System.Func{``0,``1,``0},``1)">
            <summary>
            Update a list in place, where a function has the ability to either transform or remove each item.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <typeparam name="TArg">The type of state argument passed to the transformation callback.</typeparam>
            <param name="list">The list to update.</param>
            <param name="transform">A function which transforms each element. The function returns the transformed list
            element, or <see langword="null"/> to remove the current item from the list.</param>
            <param name="arg">The state argument to pass to the transformation callback.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.ListExtensions.TryRemoveFirst``2(System.Collections.Generic.IList{``0},System.Func{``0,``1,System.Boolean},``1,``0@)">
            <summary>
            Attempts to remove the first item selected by <paramref name="selector"/>.
            </summary>
            <returns>
            True if any item has been removed.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SimpleIntervalTreeExtensions.HasIntervalThatIntersectsWith(Microsoft.CodeAnalysis.Shared.Collections.SimpleIntervalTree{Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Shared.Collections.TextSpanIntervalIntrospector},Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            check whether the given span is intersects with the tree
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.IsChildNode``1(Microsoft.CodeAnalysis.SyntaxNode,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Returns true if is a given token is a child token of a certain type of parent node.
            </summary>
            <typeparam name="TParent">The type of the parent node.</typeparam>
            <param name="node">The node that we are testing.</param>
            <param name="childGetter">A function that, when given the parent node, returns the child token we are interested in.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.IsFoundUnder``1(Microsoft.CodeAnalysis.SyntaxNode,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Returns true if this node is found underneath the specified child in the given parent.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.AddAnnotations(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxAnnotation}})">
            <summary>
            create a new root node from the given root after adding annotations to the tokens
            
            tokens should belong to the given root
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.AddAnnotations(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxAnnotation}})">
            <summary>
            create a new root node from the given root after adding annotations to the nodes
            
            nodes should belong to the given root
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.ReplaceNodesAsync``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}},System.Threading.CancellationToken)">
            <summary>
            Creates a new tree of nodes from the existing tree with the specified old nodes replaced with a newly computed nodes.
            </summary>
            <param name="root">The root of the tree that contains all the specified nodes.</param>
            <param name="nodes">The nodes from the tree to be replaced.</param>
            <param name="computeReplacementAsync">A function that computes a replacement node for
            the argument nodes. The first argument is one of the original specified nodes. The second argument is
            the same node possibly rewritten with replaced descendants.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.ReplaceTokensAsync``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxToken}},System.Threading.CancellationToken)">
            <summary>
            Creates a new tree of tokens from the existing tree with the specified old tokens replaced with a newly computed tokens.
            </summary>
            <param name="root">The root of the tree that contains all the specified tokens.</param>
            <param name="tokens">The tokens from the tree to be replaced.</param>
            <param name="computeReplacementAsync">A function that computes a replacement token for
            the argument tokens. The first argument is one of the originally specified tokens. The second argument is
            the same token possibly rewritten with replaced trivia.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.s_findSkippedTokenForward">
            <summary>
            Look inside a trivia list for a skipped token that contains the given position.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindSkippedTokenForward(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Int32)">
            <summary>
            Look inside a trivia list for a skipped token that contains the given position.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.s_findSkippedTokenBackward">
            <summary>
            Look inside a trivia list for a skipped token that contains the given position.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindSkippedTokenBackward(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Int32)">
            <summary>
            Look inside a trivia list for a skipped token that contains the given position.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindTokenOnRightOfPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            If the position is inside of token, return that token; otherwise, return the token to the right.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindTokenOnLeftOfPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            If the position is inside of token, return that token; otherwise, return the token to the left.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.WithoutLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new token with the leading trivia removed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.WithoutTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new token with the trailing trivia removed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.ValueAncestorsAndSelf(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Gets a list of ancestor nodes (including this node) 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxTreeExtensions.GetTouchingWordAsync(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns the identifier, keyword, contextual keyword or preprocessor keyword touching this
            position, or a token of Kind = None if the caret is not touching either.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxTreeExtensions.FindTokenOnRightOfPosition(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            If the position is inside of token, return that token; otherwise, return the token to the right.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxTreeExtensions.FindTokenOnLeftOfPosition(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            If the position is inside of token, return that token; otherwise, return the token to the left.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextLineExtensions.GetFirstNonWhitespacePosition(Microsoft.CodeAnalysis.Text.TextLine)">
            <summary>
            Returns the first non-whitespace position on the given line, or null if 
            the line is empty or contains only whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextLineExtensions.GetFirstNonWhitespaceOffset(Microsoft.CodeAnalysis.Text.TextLine)">
            <summary>
            Returns the first non-whitespace position on the given line as an offset
            from the start of the line, or null if the line is empty or contains only
            whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextLineExtensions.IsEmptyOrWhitespace(Microsoft.CodeAnalysis.Text.TextLine)">
            <summary>
            Determines whether the specified line is empty or contains whitespace only.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextSpanExtensions.ToNormalizedSpans(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            merge provided spans to each distinct group of spans in ascending order
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextSpanExtensions.IsAround(Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Returns true if the span encompasses the specified node or token and is contained within its trivia.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextSpanExtensions.IsAround(Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Returns true if the span encompasses a span between the specified nodes or tokens
            and is contained within trivia around them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.INamespaceOrTypeSymbolExtensions.GetAllTypes(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.Threading.CancellationToken)">
            <summary>
            Lazily returns all nested types contained (recursively) within this namespace or type.
            In case of a type, it is included itself as the first result.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Extensions.SymbolDisplayFormats.NameFormat">
            <summary>
            Standard format for displaying to the user.
            </summary>
            <remarks>
            No return type.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Extensions.SymbolDisplayFormats.SignatureFormat">
            <summary>
            Contains enough information to determine whether two symbols have the same signature.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.LeftToken">
            <summary>
            The token to the left of <see cref="P:Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.Position"/>. This token may be touching the position.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.TargetToken">
            <summary>
            The first token to the left of <see cref="P:Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.Position"/> that we're not touching. Equal to <see cref="P:Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.LeftToken"/>
            if we aren't touching <see cref="P:Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.LeftToken" />.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxEditorExtensions.ApplyExpressionLevelSemanticEditsAsync``2(Microsoft.CodeAnalysis.Editing.SyntaxEditor,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.ValueTuple{``1,System.Collections.Generic.IEnumerable{``1}}},System.Func{Microsoft.CodeAnalysis.SemanticModel,``0,``1,System.Boolean},System.Func{Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,``0,``1,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Performs several edits to a document.  If multiple edits are made within the same
            expression context, then the document/semantic-model will be forked after each edit 
            so that further edits can see if they're still safe to apply.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxEditorExtensions.ApplyExpressionLevelSemanticEditsAsync``2(Microsoft.CodeAnalysis.Editing.SyntaxEditor,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1},System.Func{Microsoft.CodeAnalysis.SemanticModel,``0,``1,System.Boolean},System.Func{Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,``0,``1,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Performs several edits to a document.  If multiple edits are made within the same
            expression context, then the document/semantic-model will be forked after each edit 
            so that further edits can see if they're still safe to apply.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxEditorExtensions.ApplyExpressionLevelSemanticEditsAsync``1(Microsoft.CodeAnalysis.Editing.SyntaxEditor,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{``0},System.Func{Microsoft.CodeAnalysis.SemanticModel,``0,System.Boolean},System.Func{Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Performs several edits to a document.  If multiple edits are made within the same
            expression context, then the document/semantic-model will be forked after each edit 
            so that further edits can see if they're still safe to apply.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxEditorExtensions.ApplyMethodBodySemanticEditsAsync``2(Microsoft.CodeAnalysis.Editing.SyntaxEditor,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.ValueTuple{``1,System.Collections.Generic.IEnumerable{``1}}},System.Func{Microsoft.CodeAnalysis.SemanticModel,``0,``1,System.Boolean},System.Func{Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,``0,``1,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Performs several edits to a document.  If multiple edits are made within a method
            body then the document/semantic-model will be forked after each edit so that further
            edits can see if they're still safe to apply.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxEditorExtensions.ApplyMethodBodySemanticEditsAsync``1(Microsoft.CodeAnalysis.Editing.SyntaxEditor,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{``0},System.Func{Microsoft.CodeAnalysis.SemanticModel,``0,System.Boolean},System.Func{Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Performs several edits to a document.  If multiple edits are made within a method
            body then the document/semantic-model will be forked after each edit so that further
            edits can see if they're still safe to apply.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.SyntaxEditorExtensions.ApplySemanticEditsAsync``2(Microsoft.CodeAnalysis.Editing.SyntaxEditor,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.ValueTuple{``1,System.Collections.Generic.IEnumerable{``1}}},System.Func{Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SemanticModel,``0,``1,System.Boolean},System.Func{Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,``0,``1,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Helper function for fix-all fixes where individual fixes may affect the viability
            of another.  For example, consider the following code:
            
                if ((double)x == (double)y)
                
            In this code either cast can be removed, but at least one cast must remain.  Even
            though an analyzer marks both, a fixer must not remove both.  One way to accomplish
            this would be to have the fixer do a semantic check after each application.  However
            This is extremely expensive, especially for hte common cases where one fix does
            not affect each other.
            
            To address that, this helper groups fixes at certain boundary points.  i.e. at 
            statement boundaries.  If there is only one fix within the boundary, it does not
            do any semantic verification.  However, if there are multiple fixes in a boundary
            it will call into <paramref name="canReplace"/> to validate if the subsequent fix
            can be made or not.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextDocumentExtensions.WithText(Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Creates a new instance of this text document updated to have the text specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextDocumentExtensions.WithAdditionalDocumentText(Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Creates a new instance of this additional document updated to have the text specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Extensions.TextDocumentExtensions.WithAnalyzerConfigDocumentText(Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Creates a new instance of this analyzer config document updated to have the text specified.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListener.DiagnosticAsyncToken">
            <summary>
            Stores the source information for an <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken"/> value.  Helpful when 
            tracking down tokens which aren't properly disposed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider">
            <summary>
            use <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider" /> in product code to get
            <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener" /> and use
            <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider" /> in test to get waiter.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.s_enabled">
            <summary>
            indicate whether asynchronous listener is enabled or not.
            it is tri-state since we want to retrieve this value, if never explicitly set, from environment variable
            and then cache it.
            we read value from environment variable (RoslynWaiterEnabled) because we want team, that doesn't have
            access to Roslyn code (InternalVisibleTo), can use this listener/waiter framework as well. 
            those team can enable this without using <see cref="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.Enable(System.Boolean)" /> API
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider._enableDiagnosticTokens">
            <summary>
            indicate whether <see cref="P:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListener.TrackActiveTokens"/> is enabled or not
            it is tri-state since we want to retrieve this value, if never explicitly set, from environment variable
            and then cache it.
            we read value from environment variable (RoslynWaiterDiagnosticTokenEnabled) because we want team, that doesn't have
            access to Roslyn code (InternalVisibleTo), can use this listener/waiter framework as well. 
            those team can enable this without using <see cref="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.EnableDiagnosticTokens(System.Boolean)" /> API
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.s_enableDiagnosticTokens">
            <summary>
            Provides a default value for <see cref="F:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider._enableDiagnosticTokens"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.EnableDiagnosticTokens(System.Boolean)">
            <summary>
            Enable or disable TrackActiveTokens for test
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.GetWaiter(System.String)">
            <summary>
            Get Waiters for listeners for test
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.WaitAllAsync(Microsoft.CodeAnalysis.Workspace,System.String[],System.Action,System.Nullable{System.TimeSpan})">
            <summary>
            Wait for all of the <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationWaiter"/> instances to finish their
            work.
            </summary>
            <remarks>
            This is a very handy method for debugging hangs in the unit test.  Set a break point in the 
            loop, dig into the waiters and see all of the active <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken"/> values 
            representing the remaining work.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.GetTokens">
            <summary>
            Get all saved DiagnosticAsyncToken to investigate tests failure easier
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener"/> for the given featureName
            
            We have this abstraction so that we can have isolated listener/waiter in unit tests
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider.GetListener(System.String)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener"/> for given feature.
            same provider will return a singleton listener for same feature
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationWaiter.ExpeditedWaitAsync">
            <summary>
            Returns a task which completes when all asynchronous operations currently tracked by this waiter are
            completed. Asynchronous operations are expedited when possible, meaning artificial delays placed before
            asynchronous operations are shortened.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowAwaitableInternal(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Returns an awaitable for the specified task that will never throw, even if the source task
            faults or is canceled.
            </summary>
            <param name="task">The task whose completion should signal the completion of the returned awaitable.</param>
            <param name="captureContext">if set to <c>true</c> the continuation will be scheduled on the caller's context; <c>false</c> to always execute the continuation on the threadpool.</param>
            <returns>An awaitable.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaitable">
            <summary>
            An awaitable that wraps a task and never throws an exception when waited on.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaitable._task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaitable._captureContext">
            <summary>
            A value indicating whether the continuation should be scheduled on the current sync context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaitable.#ctor(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaitable" /> struct.
            </summary>
            <param name="task">The task.</param>
            <param name="captureContext">Whether the continuation should be scheduled on the current sync context.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaitable.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter">
            <summary>
            An awaiter that wraps a task and never throws an exception when waited on.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter._task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter._captureContext">
            <summary>
            A value indicating whether the continuation should be scheduled on the current sync context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter.#ctor(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter"/> struct.
            </summary>
            <param name="task">The task.</param>
            <param name="captureContext">if set to <c>true</c> [capture context].</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules a delegate for execution at the conclusion of a task's execution.
            </summary>
            <param name="continuation">The action.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules a delegate for execution at the conclusion of a task's execution
            without capturing the ExecutionContext.
            </summary>
            <param name="continuation">The action.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.TaskExtensions.NoThrowTaskAwaiter.GetResult">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.IExpeditableDelaySource.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a task that will complete after a time delay, but can be expedited if an operation is waiting for
            the task to complete.
            </summary>
            <param name="delay">The time to wait before completing the returned task, or <c>TimeSpan.FromMilliseconds(-1)</c> to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns><see langword="true"/> if the delay compeleted normally; otherwise, <see langword="false"/> if the delay completed due to a request to expedite the delay.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="delay"/> represents a negative time interval other than <c>TimeSpan.FromMilliseconds(-1)</c>.</para>
            <para>-or-</para>
            <para>The <paramref name="delay"/> argument's <see cref="P:System.TimeSpan.TotalMilliseconds"/> property is greater than <see cref="F:System.Int32.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">The delay has been canceled.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.BloomFilter.#ctor(System.Int32,System.Double,System.Boolean)">
            <summary><![CDATA[
            1) n  = Number of items in the filter
            
            2) p = Probability of false positives, (a double between 0 and 1).
            
            3) m = Number of bits in the filter
            
            4) k = Number of hash functions
            
            m = ceil((n * log(p)) / log(1.0 / (pow(2.0, log(2.0)))))
            
            k = round(log(2.0) * m / n)
            ]]></summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.BloomFilter.ComputeHash(System.String,System.Int32)">
            <summary>
            Modification of the murmurhash2 algorithm.  Code is simpler because it operates over
            strings instead of byte arrays.  Because each string character is two bytes, it is known
            that the input will be an even number of bytes (though not necessarily a multiple of 4).
            
            This is needed over the normal 'string.GetHashCode()' because we need to be able to generate
            'k' different well distributed hashes for any given string s.  Also, we want to be able to
            generate these hashes without allocating any memory.  My ideal solution would be to use an
            MD5 hash.  However, there appears to be no way to do MD5 in .NET where you can:
            
            a) feed it individual values instead of a byte[]
            
            b) have the hash computed into a byte[] you provide instead of a newly allocated one
            
            Generating 'k' pieces of garbage on each insert and lookup seems very wasteful.  So,
            instead, we use murmur hash since it provides well distributed values, allows for a
            seed, and allocates no memory.
            
            Murmur hash is public domain.  Actual code is included below as reference.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment">
            <summary>
            A documentation comment derived from either source text or metadata.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.HadXmlParseError">
            <summary>
            True if an error occurred when parsing.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.FullXmlFragment">
            <summary>
            The full XML text of this tag.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.ExampleText">
            <summary>
            The text in the &lt;example&gt; tag. Null if no tag existed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.SummaryText">
            <summary>
            The text in the &lt;summary&gt; tag. Null if no tag existed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.ReturnsText">
            <summary>
            The text in the &lt;returns&gt; tag. Null if no tag existed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.ValueText">
            <summary>
            The text in the &lt;value&gt; tag. Null if no tag existed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.RemarksText">
            <summary>
            The text in the &lt;remarks&gt; tag. Null if no tag existed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.ParameterNames">
            <summary>
            The names of items in &lt;param&gt; tags.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.TypeParameterNames">
            <summary>
            The names of items in &lt;typeparam&gt; tags.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.ExceptionTypes">
            <summary>
            The types of items in &lt;exception&gt; tags.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.CompletionListCref">
            <summary>
            The item named in the &lt;completionlist&gt; tag's cref attribute.
            Null if the tag or cref attribute didn't exist.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.s_NewLineAsStringArray">
            <summary>
            Used for <see cref="M:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.CommentBuilder.TrimEachLine(System.String)"/> method, to prevent new allocation of string
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.s_cacheLastXmlFragmentParse">
            <summary>
            Cache of the most recently parsed fragment and the resulting DocumentationComment
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.FromXmlFragment(System.String)">
            <summary>
            Parses and constructs a <see cref="T:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment" /> from the given fragment of XML.
            </summary>
            <param name="xml">The fragment of XML to parse.</param>
            <returns>A DocumentationComment instance.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.CommentBuilder">
            <summary>
            Helper class for parsing XML doc comments. Encapsulates the state required during parsing.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.CommentBuilder.Parse(System.String)">
            <summary>
            Parse and construct a <see cref="T:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment" /> from the given fragment of XML.
            </summary>
            <param name="xml">The fragment of XML to parse.</param>
            <returns>A DocumentationComment instance.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.GetParameterText(System.String)">
            <summary>
            Returns the text for a given parameter, or null if no documentation was given for the parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.GetTypeParameterText(System.String)">
            <summary>
            Returns the text for a given type parameter, or null if no documentation was given for the type parameter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.GetExceptionTexts(System.String)">
            <summary>
            Returns the texts for a given exception, or an empty <see cref="T:System.Collections.Immutable.ImmutableArray"/> if no documentation was given for the exception.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.DocumentationComment.Empty">
            <summary>
            An empty comment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.EditorBrowsableHelpers.GetSpecialEditorBrowsableAttributeConstructor(Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Finds the constructor which takes exactly one argument, which must be of type EditorBrowsableState.
            It does not require that the EditorBrowsableAttribute and EditorBrowsableState types be those
            shipped by Microsoft, but it does demand the types found follow the expected pattern. If at any
            point that pattern appears to be violated, return null to indicate that an appropriate constructor
            could not be found.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.EditorBrowsableHelpers.GetSpecialTypeLibAttributeConstructorsWorker(Microsoft.CodeAnalysis.Compilation,System.String,System.String)">
            <summary>
            The TypeLib*Attribute classes that accept TypeLib*Flags with FHidden as an option all have two constructors,
            one accepting a TypeLib*Flags and the other a short. This methods gets those two constructor symbols for any
            of these attribute classes. It does not require that the either of these types be those shipped by Microsoft,
            but it does demand the types found follow the expected pattern. If at any point that pattern appears to be
            violated, return an empty enumerable to indicate that no appropriate constructors were found.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.EnumValueUtilities.GetNextEnumValue(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines, using heuristics, what the next likely value is in this enum.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.ExtensionOrderer.TestAccessor.CheckForCycles``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
            <summary>
            Helper for checking whether cycles exist in the extension ordering.
            Throws <see cref="T:System.ArgumentException"/> if a cycle is detected.
            </summary>
            <exception cref="T:System.ArgumentException">A cycle was detected in the extension ordering.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.IStreamingProgressTrackerExtensions.AddSingleItemAsync(Microsoft.CodeAnalysis.Shared.Utilities.IStreamingProgressTracker,System.Threading.CancellationToken)">
            <summary>
            Returns an <see cref="T:System.IAsyncDisposable"/> that will call <see cref="M:Microsoft.CodeAnalysis.Shared.Utilities.IStreamingProgressTrackerExtensions.ItemCompletedAsync(Microsoft.CodeAnalysis.Shared.Utilities.IStreamingProgressTracker,System.Threading.CancellationToken)"/> on
            <paramref name="progressTracker"/> when it is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.IWorkspaceThreadingService">
             <summary>
             An optional interface which allows an environment to customize the behavior for synchronous methods that need to
             block on the result of an asynchronous invocation. An implementation of this is provided in the MEF catalog when
             applicable.
             </summary>
             <remarks>
             <para>For Visual Studio, Microsoft.VisualStudio.Threading provides the JoinableTaskFactory.Run method, which is
             the expected way to invoke an asynchronous method from a synchronous entry point and block on its completion.
             Other environments may choose to use this or any other strategy, or omit an implementation of this interface to
             allow callers to simply use <see cref="M:System.Threading.Tasks.Task.Wait"/>.</para>
            
             <para>New code is expected to use fully-asynchronous programming where possible. In cases where external APIs
             restrict ability to be asynchronous, this service allows Roslyn to adhere to environmental policies related to
             joining asynchronous work.</para>
             </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.ProgressTracker">
            <summary>
            Utility class that can be used to track the progress of an operation in a threadsafe manner.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.StreamingProgressTracker">
            <summary>
            Utility class that can be used to track the progress of an operation in a threadsafe manner.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.XmlFragmentParser">
            <summary>
            An XML parser that is designed to parse small fragments of XML such as those that appear in documentation comments.
            PERF: We try to re-use the same underlying <see cref="T:System.Xml.XmlReader"/> to reduce the allocation costs of multiple parses.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.XmlFragmentParser.ParseFragment``1(System.String,System.Action{System.Xml.XmlReader,``0},``0)">
            <summary>
            Parse the given XML fragment. The given callback is executed until either the end of the fragment
            is reached or an exception occurs.
            </summary>
            <typeparam name="TArg">Type of an additional argument passed to the <paramref name="callback"/> delegate.</typeparam>
            <param name="xmlFragment">The fragment to parse.</param>
            <param name="callback">Action to execute while there is still more to read.</param>
            <param name="arg">Additional argument passed to the callback.</param>
            <remarks>
            It is important that the <paramref name="callback"/> action advances the <see cref="T:System.Xml.XmlReader"/>,
            otherwise parsing will never complete.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.XmlFragmentParser.Reader">
            <summary>
            A text reader over a synthesized XML stream consisting of a single root element followed by a potentially
            infinite stream of fragments. Each time "SetText" is called the stream is rewound to the element immediately
            following the synthetic root node.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.XmlFragmentParser.Reader._text">
            <summary>
            Current text to validate.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7">
            <summary>
            Helper class to analyze the semantic effects of a speculated syntax node replacement on the parenting nodes.
            Given an expression node from a syntax tree and a new expression from a different syntax tree,
            it replaces the expression with the new expression to create a speculated syntax tree.
            It uses the original tree's semantic model to create a speculative semantic model and verifies that
            the syntax replacement doesn't break the semantics of any parenting nodes of the original expression.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.#ctor(`0,`0,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken,System.Boolean,System.Boolean)">
            <summary>
            Creates a semantic analyzer for speculative syntax replacement.
            </summary>
            <param name="expression">Original expression to be replaced.</param>
            <param name="newExpression">New expression to replace the original expression.</param>
            <param name="semanticModel">Semantic model of <paramref name="expression"/> node's syntax tree.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="skipVerificationForReplacedNode">
            True if semantic analysis should be skipped for the replaced node and performed starting from parent of the original and replaced nodes.
            This could be the case when custom verifications are required to be done by the caller or
            semantics of the replaced expression are different from the original expression.
            </param>
            <param name="failOnOverloadResolutionFailuresInOriginalCode">
            True if semantic analysis should fail when any of the invocation expression ancestors of <paramref name="expression"/> in original code has overload resolution failures.
            </param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression">
            <summary>
            Original expression to be replaced.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SemanticRootOfOriginalExpression">
            <summary>
            First ancestor of <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression"/> which is either a statement, attribute, constructor initializer,
            field initializer, default parameter initializer or type syntax node.
            It serves as the root node for all semantic analysis for this syntax replacement.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalSemanticModel">
            <summary>
            Semantic model for the syntax tree corresponding to <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression"/>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacedExpression">
            <summary>
            Node which replaces the <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression"/>.
            Note that this node is a cloned version of <see cref="F:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7._newExpressionForReplace"/> node, which has been re-parented
            under the node to be speculated, i.e. <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SemanticRootOfReplacedExpression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SemanticRootOfReplacedExpression">
            <summary>
            Node created by replacing <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression"/> under <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SemanticRootOfOriginalExpression"/> node.
            This node is used as the argument to the GetSpeculativeSemanticModel API and serves as the root node for all
            semantic analysis of the speculated tree.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SpeculativeSemanticModel">
            <summary>
            Speculative semantic model used for analyzing the semantics of the new tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics">
            <summary>
            Determines whether performing the given syntax replacement will change the semantics of any parenting expressions
            by performing a bottom up walk from the <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression"/> up to <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SemanticRootOfOriginalExpression"/>
            in the original tree and simultaneously walking bottom up from <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacedExpression"/> up to <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SemanticRootOfReplacedExpression"/>
            in the speculated syntax tree and performing appropriate semantic comparisons.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.SymbolsForOriginalAndReplacedNodesAreCompatible">
            <summary>
            Checks whether the semantic symbols for the <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.OriginalExpression"/> and <see cref="P:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacedExpression"/> are non-null and compatible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksSystemObjectMethodResolution(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Determine if removing the cast could cause the semantics of System.Object method call to change.
            E.g. Dim b = CStr(1).GetType() is necessary, but the GetType method symbol info resolves to the same with or without the cast.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.IsSymbolSystemObjectInstanceMethod(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Determines if the symbol is a non-overridable, non static method on System.Object (e.g. GetType)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.CommonFormattingHelpers.AppendPartialLeadingTriviaText(Microsoft.CodeAnalysis.SyntaxToken,System.Text.StringBuilder,System.Int32)">
            <summary>
            If the token1 is expected to be part of the leading trivia of the token2 then the trivia
            before the token1FullSpanEnd, which the fullspan end of the token1 should be ignored
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.CommonFormattingHelpers.GetSpanIncludingTrailingAndLeadingTriviaOfAdjacentTokens(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            this will create a span that includes its trailing trivia of its previous token and leading trivia of its next token
            for example, for code such as "class A { int ...", if given tokens are "A" and "{", this will return span [] of "class[ A { ]int ..."
            which included trailing trivia of "class" which is previous token of "A", and leading trivia of "int" which is next token of "{"
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PathMetadataUtilities.TryBuildNamespaceFromFolders(System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts,System.String)">
            <summary>
            Given a set of folders from build the namespace that would match
            the folder structure. If a document is located in { "Bat" , "Bar", "Baz" } then the namespace could be 
            "Bat.Bar.Baz". If a rootNamespace is provided, it is prepended to the generated namespace.
            
            Returns null if the folders contain parts that are invalid identifiers for a namespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.IntegerUtilities.Convert(System.Int64,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Helper as VB's CType doesn't work without arithmetic overflow.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.Matcher`1">
            <summary>
            Helper class to allow one to do simple regular expressions over a sequence of objects (as
            opposed to a sequence of characters).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.Matcher.Repeat``1(Microsoft.CodeAnalysis.Shared.Utilities.Matcher{``0})">
            <summary>
            Matcher equivalent to (m*)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.Matcher.OneOrMore``1(Microsoft.CodeAnalysis.Shared.Utilities.Matcher{``0})">
            <summary>
            Matcher equivalent to (m+)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.Matcher.Choice``1(Microsoft.CodeAnalysis.Shared.Utilities.Matcher{``0}[])">
            <summary>
            Matcher equivalent to (m_1|m_2|...|m_n)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.Matcher.Sequence``1(Microsoft.CodeAnalysis.Shared.Utilities.Matcher{``0}[])">
            <summary>
            Matcher equivalent to (m_1 ... m_n)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.Matcher.Single``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            Matcher that matches an element if the provide predicate returns true.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.StringBreaker.AddWordParts(System.String,Microsoft.CodeAnalysis.Shared.Collections.TemporaryArray{Microsoft.CodeAnalysis.Text.TextSpan}@)">
            <summary>
            Breaks an identifier string into constituent parts.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer">
            <summary>
            Provides a way to test two symbols for equivalence.  While there are ways to ask for
            different sorts of equivalence, the following must hold for two symbols to be considered
            equivalent.
            <list type="number">
            <item>The kinds of the two symbols must match.</item>
            <item>The names of the two symbols must match.</item>
            <item>The arity of the two symbols must match.</item>
            <item>If the symbols are methods or parameterized properties, then the signatures of the two
            symbols must match.</item>
            <item>Both symbols must be definitions or must be instantiations.  If they are instantiations,
            then they must be instantiated in the same manner.</item>
            <item>The containing symbols of the two symbols must be equivalent.</item>
            <item>Nullability of symbols is not involved in the comparison.</item>
            </list>
            Note: equivalence does not concern itself with whole symbols.  Two types are considered
            equivalent if the above hold, even if one type has different members than the other.  Note:
            type parameters, and signature parameters are not considered 'children' when comparing
            symbols.
            
            Options are provided to tweak the above slightly.  For example, by default, symbols are
            equivalent only if they come from the same assembly or different assemblies of the same simple name.
            However, one can ask if two symbols are equivalent even if their assemblies differ.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer.Equals(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Compares given symbols <paramref name="x"/> and <paramref name="y"/> for equivalence.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer.Equals(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol})">
            <summary>
            Compares given symbols <paramref name="x"/> and <paramref name="y"/> for equivalence and populates <paramref name="equivalentTypesWithDifferingAssemblies"/>
            with equivalent non-nested named type key-value pairs that are contained in different assemblies.
            These equivalent named type key-value pairs represent possibly equivalent forwarded types, but this API doesn't perform any type forwarding equivalence checks. 
            </summary>
            <remarks>This API is only supported for <see cref="F:Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer.IgnoreAssembliesInstance"/>.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer.EquivalenceVisitor.HandleNamedTypesWorker(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol})">
            <summary>
            Worker for comparing two named types for equivalence. Note: The two
            types must have the same TypeKind.
            </summary>
            <param name="x">The first type to compare</param>
            <param name="y">The second type to compare</param>
            <param name="equivalentTypesWithDifferingAssemblies">
            Map of equivalent non-nested types to be populated, such that each key-value pair of named types are equivalent but reside in different assemblies.
            This map is populated only if we are ignoring assemblies for symbol equivalence comparison, i.e. <see cref="F:Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer._assemblyComparerOpt"/> is true.
            </param>
            <returns>True if the two types are equivalent.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.IProgressTrackerExtensions.ItemCompletedScope(Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker,System.String)">
            <summary>
            Opens a scope that will call <see cref="M:Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker.ItemCompleted"/> on <paramref name="tracker"/> once
            disposed. This is useful to easily wrap a series of operations and now that progress will be reported no
            matter how it completes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.NameGenerator.EnsureUniqueness(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Transforms baseName into a name that does not conflict with any name in 'reservedNames'
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.NameGenerator.EnsureUniqueness(System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{System.Boolean},System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            Ensures that any 'names' is unique and does not collide with any other name.  Names that
            are marked as IsFixed can not be touched.  This does mean that if there are two names
            that are the same, and both are fixed that you will end up with non-unique names at the
            end.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.NameGenerator.EnsureUniquenessInPlace(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{System.String},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{System.Boolean},System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            Updates the names in <paramref name="names"/> to be unique.  A name at a particular
            index <c>i</c> will not be touched if <c>isFixed[i]</c> is <see langword="true"/>. All
            other names will not collide with any other in <paramref name="names"/> and will all
            return <see langword="true"/> for <c>canUse(name)</c>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection"/> that is
            empty.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.#ctor(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection"/> that contains the specified span.
            </summary>
            <param name="span">TextSpan contained by the span set.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection"/> that contains the specified list of spans.
            </summary>
            <param name="spans">The spans to be added.</param>
            <remarks>
            <para>The list of spans will be sorted and normalized (overlapping and adjoining spans will be combined).</para>
            <para>This constructor runs in O(N log N) time, where N = spans.Count.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="spans"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.Union(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection,Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Finds the union of two span sets.
            </summary>
            <param name="left">
            The first span set.
            </param>
            <param name="right">
            The second span set.
            </param>
            <returns>
            The new span set that corresponds to the union of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="left"/> or <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.Overlap(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection,Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Finds the overlap of two span sets.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the overlap of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.Intersection(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection,Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Finds the intersection of two span sets.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the intersection of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>This operator runs in O(N+M) time where N = left.Count, M = right.Count.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.Difference(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection,Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Finds the difference between two sets. The difference is defined as everything in the first span set that is not in the second span set.
            </summary>
            <param name="left">The first span set.</param>
            <param name="right">The second span set.</param>
            <returns>The new span set that corresponds to the difference between <paramref name="left"/> and <paramref name="right"/>.</returns>
            <remarks>
            Empty spans in the second set do not affect the first set at all. This method returns empty spans in the first set that are not contained by any set in
            the second set.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.op_Equality(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection,Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Determines whether two span sets are the same. 
            </summary>
            <param name="left">The first set.</param>
            <param name="right">The second set.</param>
            <returns><c>true</c> if the two sets are equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.op_Inequality(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection,Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Determines whether two span sets are not the same.
            </summary>
            <param name="left">The first set.</param>
            <param name="right">The second set.</param>
            <returns><c>true</c> if the two sets are not equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.OverlapsWith(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Determines whether this span set overlaps with another span set.
            </summary>
            <param name="set">The span set to test.</param>
            <returns><c>true</c> if the span sets overlap, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Determines whether this span set overlaps with another span.
            </summary>
            <param name="span">The span to test.</param>
            <returns><c>true</c> if this span set overlaps with the given span, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.IntersectsWith(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection)">
            <summary>
            Determines whether this span set intersects with another span set.
            </summary>
            <param name="set">Set to test.</param>
            <returns><c>true</c> if the span sets intersect, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.IntersectsWith(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Determines whether this span set intersects with another span.
            </summary>
            <returns><c>true</c> if this span set intersects with the given span, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.GetHashCode">
            <summary>
            Gets a unique hash code for the span set.
            </summary>
            <returns>A 32-bit hash code associated with the set.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.Equals(System.Object)">
            <summary>
            Determines whether this span set is the same as another object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.ToString">
            <summary>
            Provides a string representation of the set.
            </summary>
            <returns>The string representation of the set.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.#ctor(Microsoft.CodeAnalysis.Shared.NormalizedTextSpanCollection.OrderedSpanList)">
            <summary>
            Private constructor for use when the span list is already normalized.
            </summary>
            <param name="normalizedSpans">An already normalized span list.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Simplification.SimplificationOptions">
            <summary>
            Contains the options that needs to be drilled down to the Simplification Engine
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferAliasToQualification">
            <summary>
            This option tells the simplification engine if the Qualified Name should be replaced by Alias
            if the user had initially not used the Alias
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferOmittingModuleNamesInQualification">
            <summary>
            This option influences the name reduction of members of a module in VB. If set to true, the 
            name reducer will e.g. reduce Namespace.Module.Member to Namespace.Member.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferImplicitTypeInference">
            <summary>
            This option says that if we should simplify the Generic Name which has the type argument inferred
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferImplicitTypeInLocalDeclaration">
            <summary>
            This option says if we should simplify the Explicit Type in Local Declarations
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.AllowSimplificationToGenericType">
            <summary>
            This option says if we should simplify to NonGeneric Name rather than GenericName
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.AllowSimplificationToBaseType">
            <summary>
            This option says if we should simplify from Derived types to Base types in Static Member Accesses
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.QualifyMemberAccessWithThisOrMe">
            <summary>
            This option says if we should simplify away the <see langword="this"/> or <see langword="Me"/> in member access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.QualifyFieldAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in field access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.QualifyPropertyAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in property access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.QualifyMethodAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in method access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.QualifyEventAccess">
            <summary>
            This option says if we should simplify away the <see langword="this"/>. or <see langword="Me"/>. in event access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferIntrinsicPredefinedTypeKeywordInDeclaration">
            <summary>
            This option says if we should prefer keyword for Intrinsic Predefined Types in Declarations
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferIntrinsicPredefinedTypeKeywordInMemberAccess">
            <summary>
            This option says if we should prefer keyword for Intrinsic Predefined Types in Member Access Expression
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Simplification.Simplifier">
            <summary>
            Expands and Reduces subtrees.
            
            Expansion:
                 1) Makes inferred names explicit (on anonymous types and tuples).
                 2) Replaces names with fully qualified dotted names.
                 3) Adds parentheses around expressions
                 4) Adds explicit casts/conversions where implicit conversions exist
                 5) Adds escaping to identifiers
                 6) Rewrites extension method invocations with explicit calls on the class containing the extension method.
                 
            Reduction:
                1) Shortens dotted names to their minimally qualified form
                2) Removes unnecessary parentheses
                3) Removes unnecessary casts/conversions
                4) Removes unnecessary escaping
                5) Rewrites explicit calls to extension methods to use dot notation
                6) Removes unnecessary tuple element names and anonymous type member names
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation">
            <summary>
            The annotation the reducer uses to identify sub trees to be reduced.
            The Expand operations add this annotation to nodes so that the Reduce operations later find them.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.Simplifier.SpecialTypeAnnotation">
            <summary>
            This is the annotation used by the simplifier and expander to identify Predefined type and preserving
            them from over simplification
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.Simplifier.AddImportsAnnotation">
            <summary>
            The annotation <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)"/> used to identify sub trees to look for symbol annotations on.
            It will then add import directives for these symbol annotations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync``1(``0,Microsoft.CodeAnalysis.Document,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Expand qualifying parts of the specified subtree, annotating the parts using the <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> annotation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.Expand``1(``0,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Workspace,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Expand qualifying parts of the specified subtree, annotating the parts using the <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> annotation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Document,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Expand qualifying parts of the specified subtree, annotating the parts using the <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> annotation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.Expand(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Workspace,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Expand qualifying parts of the specified subtree, annotating the parts using the <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> annotation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Reduce all sub-trees annotated with <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> found within the document. The annotated node and all child nodes will be reduced.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Reduce the sub-trees annotated with <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> found within the subtrees identified with the specified <paramref name="annotation"/>.
            The annotated node and all child nodes will be reduced.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Reduce the sub-trees annotated with <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> found within the specified span.
            The annotated node and all child nodes will be reduced.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Reduce the sub-trees annotated with <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation" /> found within the specified spans.
            The annotated node and all child nodes will be reduced.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Simplification.NamingStyleOptions.NamingPreferences">
            <summary>
            This option describes the naming rules that should be applied to specified categories of symbols, 
            and the level to which those rules should be enforced.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Simplification.AliasAnnotation">
            <summary>
            This annotation will be used by the expansion/reduction to annotate expanded syntax nodes to store the information that an 
            alias was used before expansion.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Simplification.DoNotAllowVarAnnotation">
            <summary>
            When applied to a SyntaxNode, prevents the simplifier from converting a type to 'var'.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Simplification.SymbolAnnotation">
            <summary>
            An annotation that holds onto information about a type or namespace symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer.DocumentResetAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Resets all the document state cached by the analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer2.NonSourceDocumentResetAsync(Microsoft.CodeAnalysis.TextDocument,System.Threading.CancellationToken)">
            <summary>
            Resets all the document state cached by the analyzer.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerRegistrationService">
            <summary>
            Register a solution crawler for a particular workspace
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.NullSolutionCrawlerRegistrationService">
            <summary>
            null implementation of the service. it doesn't do anything since there is no way to observe
            its impact in this layer.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.BackgroundAnalysisScopeOption">
            <summary>
            Option to turn configure background analysis scope for the current user.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.SolutionBackgroundAnalysisScopeOption">
            <summary>
            Option to turn configure background analysis scope for the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.ClosedFileDiagnostic">
            <summary>
            This option is used by TypeScript and F#.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.LowMemoryForcedMinimalBackgroundAnalysis">
            <summary>
            Enables forced <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.BackgroundAnalysisScope.Minimal"/> scope when low VM is detected to improve performance.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.GetDefaultBackgroundAnalysisScopeFromOptions(Microsoft.CodeAnalysis.Options.OptionSet,System.String)">
             <summary>
             <para>Gets the background analysis scope configured through Tools → Options...</para>
            
             <para>This value is not affected by the solution-specific configuration set through
             <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.SolutionBackgroundAnalysisScopeOption"/>.</para>
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.GetBackgroundAnalysisScope(Microsoft.CodeAnalysis.Project)">
             <summary>
             <para>Gets the effective background analysis scope for the specified project.</para>
            
             <para>Gets the solution-specific analysis scope set through
             <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.SolutionBackgroundAnalysisScopeOption"/>, or the default analysis scope if no solution-specific
             scope is set.</para>
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.GetBackgroundAnalysisScope(Microsoft.CodeAnalysis.Options.OptionSet,System.String)">
             <summary>
             <para>Gets the effective background analysis scope for the current solution.</para>
            
             <para>Gets the solution-specific analysis scope set through
             <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptions.SolutionBackgroundAnalysisScopeOption"/>, or the default analysis scope if no solution-specific
             scope is set.</para>
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService">
            <summary>
            A service that enables storing and retrieving of information associated with solutions,
            projects or documents across runtime sessions.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService._lock">
            <summary>
            This lock guards all mutable fields in this type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.TryOpenDatabaseAsync(Microsoft.CodeAnalysis.Storage.SolutionKey,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Can throw.  If it does, the caller (<see cref="M:Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.CreatePersistentStorageAsync(Microsoft.CodeAnalysis.Storage.SolutionKey,System.String,System.Threading.CancellationToken)"/>) will attempt
            to delete the database and retry opening one more time.  If that fails again, the <see
            cref="T:Microsoft.CodeAnalysis.Host.NoOpPersistentStorage"/> instance will be used.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.PersistentStorageReferenceCountedDisposableWrapper">
            <summary>
            A trivial wrapper that we can hand out for instances from the <see cref="T:Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService"/>
            that wraps the underlying <see cref="T:Microsoft.CodeAnalysis.Host.IPersistentStorage"/> singleton.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Storage.LegacyPersistentStorageService">
            <summary>
            Obsolete.  Roslyn no longer supports a mechanism to perform arbitrary persistence of data.  If such functionality
            is needed, consumers are responsible for providing it themselves with whatever semantics are needed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Storage.DocumentKey">
            <summary>
            Handle that can be used with <see cref="T:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage"/> to read data for a
            <see cref="T:Microsoft.CodeAnalysis.Document"/> without needing to have the entire <see cref="T:Microsoft.CodeAnalysis.Document"/> snapshot available.
            This is useful for cases where acquiring an entire snapshot might be expensive (for example, during 
            solution load), but querying the data is still desired.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Storage.ProjectKey">
            <summary>
            Handle that can be used with <see cref="T:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage"/> to read data for a
            <see cref="T:Microsoft.CodeAnalysis.Project"/> without needing to have the entire <see cref="T:Microsoft.CodeAnalysis.Project"/> snapshot available.
            This is useful for cases where acquiring an entire snapshot might be expensive (for example, during 
            solution load), but querying the data is still desired.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Storage.SolutionKey">
            <summary>
            Handle that can be used with <see cref="T:Microsoft.CodeAnalysis.Host.IChecksummedPersistentStorage"/> to read data for a
            <see cref="T:Microsoft.CodeAnalysis.Solution"/> without needing to have the entire <see cref="T:Microsoft.CodeAnalysis.Solution"/> snapshot available.
            This is useful for cases where acquiring an entire snapshot might be expensive (for example, during 
            solution load), but querying the data is still desired.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.Interop.NativeMethods.sqlite3_bind_text(Microsoft.CodeAnalysis.SQLite.Interop.SafeSqliteStatementHandle,System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            <paramref name="val"><see cref="P:System.Text.Encoding.UTF8"/> encoded bytes of a text value.  Span
            should not be NUL-terminated.</paramref>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.Database.Main">
            <summary>
            The database that is stored on disk and actually persists data across VS sessions.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.Database.WriteCache">
            <summary>
            An in-memory database that caches values before being transferred to <see
            cref="F:Microsoft.CodeAnalysis.SQLite.v2.Database.Main"/>.  Does not persist across VS sessions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.DatabaseExtensions.GetName(Microsoft.CodeAnalysis.SQLite.v2.Database)">
             <summary>
             Name of the different dbs.
             
             1. "main" is the default that sqlite uses.  This just allows us to be explicit that we
             want this db.
            
             2. "writecache" is the name for the in-memory write-cache db.  Writes will be staged
             there and will be periodically flushed to the real on-disk db to help with perf.
            
             Perf measurements show this as significantly better than all other design options. It's
             also one of the simplest in terms of the design.
            
             The design options in order of performance (slowest to fastest) are:
            
             1. send writes directly to the main db. this is incredibly slow (since each write incurs
             the full IO overhead of a transaction). It is the absolute simplest in terms of
             implementation though.
            
             2. send writes to a temporary on-disk db (with synchronous=off and journal_mode=memory),
             then flush those to the main db.  This is also quite slow due to their still needing to
             be disk IO with each write.  Implementation is fairly simple, with writes just going to
             the temp db and reads going to both.
            
             3. Buffer writes in (.net) memory and flush them to disk.  This is much faster than '1'
             or '2' but requires a lot of manual book-keeping and extra complexity. For example, any
             reads go to the db.  So that means that reads have to ensure that any writes to the same
             rows have been persisted so they can observe them.
            
             4. send writes to an sqlite in-memory cache DB.  This is extremely fast for sqlite as
             there is no actual IO that is performed.  It is also easy in terms of bookkeeping as
             both DBs have the same schema and are easy to move data between. '4' is faster than all
             of the above. Complexity is minimized as reading can be done just by examining both DBs
             in the same way. It's not as simple as '1' but it's much simpler than '3'.
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.ResettableSqlStatement">
             <summary>
             Simple wrapper struct for a <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement"/> that helps ensure that the statement is always has it's
             bindings cleared (<see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement.ClearBindings"/>) and is <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement.Reset"/> after it is
             used.
             <para/>
             See https://sqlite.org/c3ref/stmt.html:
             The life-cycle of a prepared statement object usually goes like this:
                1) Create the prepared statement object using sqlite3_prepare_v2().
                2) Bind values to parameters using the sqlite3_bind_* () interfaces.
                3) Run the SQL by calling sqlite3_step() one or more times.
                4) Reset the prepared statement using sqlite3_reset() then go back to step 2. Do this zero or more times.
                5) Destroy the object using sqlite3_finalize().
            
             This type helps ensure that '4' happens properly by clients executing statement.
             Note that destroying/finalizing a statement is not the responsibility of a client
             as it will happen to all prepared statemnets when the <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement"/> is
             <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement.Close_OnlyForUseBySqlConnection"/>d.
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection">
            <summary>
            Encapsulates a connection to a sqlite database.  On construction an attempt will be made
            to open the DB if it exists, or create it if it does not.
            
            Connections are considered relatively heavyweight and are pooled until the <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage"/>
            is <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.Dispose"/>d.  Connections can be used by different threads,
            but only as long as they are used by one thread at a time.  They are not safe for concurrent
            use by several threads.
            
            <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement"/>s can be created through the user of <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection.GetResettableStatement(System.String)"/>.
            These statements are cached for the lifetime of the connection and are only finalized
            (i.e. destroyed) when the connection is closed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection._handle">
            <summary>
            The raw handle to the underlying DB.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection._queryToStatement">
            <summary>
            Our cache of prepared statements for given sql strings.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection.IsInTransaction">
            <summary>
            Whether or not we're in a transaction.  We currently don't supported nested transactions.
            If we want that, we can achieve it through sqlite "save points".  However, that's adds a 
            lot of complexity that is nice to avoid.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement">
            <summary>
            Represents a prepared sqlite statement.  <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement"/>s can be 
            <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement.Step(System.Boolean)"/>ed (i.e. executed).  Executing a statement can result in 
            either <see cref="F:Microsoft.CodeAnalysis.SQLite.Interop.Result.DONE"/> if the command completed and produced no
            value, or <see cref="F:Microsoft.CodeAnalysis.SQLite.Interop.Result.ROW"/> if it evaluated out to a sql row that can
            then be queried.
            <para>
            If a statement is parameterized then parameters can be provided by the 
            BindXXX overloads.  Bind is 1-based (to match sqlite).</para>
            <para>
            When done executing a statement, the statement should be <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlStatement.Reset"/>.
            The easiest way to ensure this is to just use a 'using' statement along with
            a <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.ResettableSqlStatement"/>.  By resetting the statement, it can
            then be used in the future with new bound parameters.</para>
            <para>
            Finalization/destruction of the underlying raw sqlite statement is handled
            by <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection.Close_OnlyForUseBySQLiteConnectionPool"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPool.GetPooledConnection(Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection@)">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection"/> from the connection pool, or creates one if none are available.
            </summary>
            <remarks>
            Database connections have a large amount of overhead, and should be returned to the pool when they are no
            longer in use. In particular, make sure to avoid letting a connection lease cross an <see langword="await"/>
            boundary, as it will prevent code in the asynchronous operation from using the existing connection.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPool.GetPooledConnection(System.Boolean,Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection@)">
            <summary>
            <inheritdoc cref="M:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPool.GetPooledConnection(Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection@)"/>
            Only use this overload if it is safe to bypass the normal scheduler check.  Only startup code (which runs
            before any reads/writes/flushes happen) should use this.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPoolService._connectionPools">
            <summary>
            Maps from database file path to connection pool.
            </summary>
            <remarks>
            Access to this field is synchronized through <see cref="F:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPoolService._gate"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPoolService.Scheduler">
             <summary>
             Use a <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair"/> to simulate a reader-writer lock.
             Read operations are performed on the <see cref="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler"/>
             and writes are performed on the <see cref="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler"/>.
            
             We use this as a condition of using the in-memory shared-cache sqlite DB.  This DB
             doesn't busy-wait when attempts are made to lock the tables in it, which can lead to
             deadlocks.  Specifically, consider two threads doing the following:
            
             Thread A starts a transaction that starts as a reader, and later attempts to perform a
             write. Thread B is a writer (either started that way, or started as a reader and
             promoted to a writer first). B holds a RESERVED lock, waiting for readers to clear so it
             can start writing. A holds a SHARED lock (it's a reader) and tries to acquire RESERVED
             lock (so it can start writing).  The only way to make progress in this situation is for
             one of the transactions to roll back. No amount of waiting will help, so when SQLite
             detects this situation, it doesn't honor the busy timeout.
            
             To prevent this scenario, we control our access to the db explicitly with operations that
             can concurrently read, and operations that exclusively write.
            
             All code that reads or writes from the db should go through this.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.SQLiteConnectionPoolService.TryGetDatabaseOwnership(System.String)">
            <summary>
            Returns null in the case where an IO exception prevented us from being able to acquire
            the db lock file.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage">
            <summary>
            Implementation of an <see cref="T:Microsoft.CodeAnalysis.Host.IPersistentStorage"/> backed by SQLite.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.Accessor`3">
            <summary>
            Abstracts out access to specific tables in the DB.  This allows us to share overall
            logic around cancellation/pooling/error-handling/etc, while still hitting different
            db tables.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.Accessor`3.TryGetDatabaseId(Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection,`0,System.Boolean,`2@)">
            <summary>
            Gets the internal sqlite db-id (effectively the row-id for the doc or proj table, or just the string-id
            for the solution table) for the provided caller key.  This db-id will be looked up and returned if a
            mapping already exists for it in the db.  Otherwise, a guaranteed unique id will be created for it and
            stored in the db for the future.  This allows all associated data to be cheaply associated with the 
            simple ID, avoiding lots of db bloat if we used the full <paramref name="key"/> in numerous places.
            </summary>
            <param name="allowWrite">Whether or not the caller owns the write lock and thus is ok with the DB id
            being generated and stored for this component key when it currently does not exist.  If <see
            langword="false"/> then failing to find the key will result in <see langword="false"/> being returned.
            </param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage._documentIdToIdMap">
            <summary>
            Mapping from the workspace's ID for a document, to the ID we use in the DB for the document.
            Kept locally so we don't have to hit the DB for the common case of trying to determine the 
            DB id for a document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.TryGetDocumentDataId(Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection,Microsoft.CodeAnalysis.Storage.DocumentKey,System.String,System.Boolean,System.Int64@)">
            <summary>
            Given a document, and the name of a stream to read/write, gets the integral DB ID to 
            use to find the data inside the DocumentData table.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.DocumentAccessor">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.Accessor`3"/> responsible for storing and 
            retrieving data from <see cref="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.DocumentDataTableName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage._flushQueue">
            <summary>
            A queue to batch up flush requests and ensure that we don't issue then more often than every <see
            cref="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.FlushAllDelayMS"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.FlushAllDelayMS">
            <summary>
            Amount of time to wait between flushing writes to disk.  500ms means we can flush
            writes to disk two times a second.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.MaxPooledByteArrayLength">
            <summary>
            We use a pool to cache reads/writes that are less than 4k.  Testing with Roslyn,
            99% of all writes (48.5k out of 49.5k) are less than that size.  So this helps
            ensure that we can pool as much as possible, without caching excessively large 
            arrays (for example, Roslyn does write out nearly 50 chunks that are larger than
            100k each).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.MaxPooledByteArrays">
            <summary>
            The max amount of byte[]s we cache.  This caps our cache at 4MB while allowing
            us to massively speed up writing (by batching writes).  Because we can write to
            disk two times a second.  That means a total of 8MB/s that can be written to disk
            using only our cache.  Given that Roslyn itself only writes about 50MB to disk
            after several minutes of analysis, this amount of bandwidth is more than sufficient.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage._projectIdToIdMap">
            <summary>
            Mapping from the workspace's ID for a project, to the ID we use in the DB for the project.
            Kept locally so we don't have to hit the DB for the common case of trying to determine the 
            DB id for a project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.TryGetProjectDataId(Microsoft.CodeAnalysis.SQLite.v2.Interop.SqlConnection,Microsoft.CodeAnalysis.Storage.ProjectKey,System.String,System.Boolean,System.Int64@)">
            <summary>
            Given a project, and the name of a stream to read/write, gets the integral DB ID to 
            use to find the data inside the ProjectData table.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.ProjectAccessor">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.Accessor`3"/> responsible for storing and
            retrieving data from <see cref="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.ProjectDataTableName"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.SolutionAccessor">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.Accessor`3"/> responsible for storing and 
            retrieving data from <see cref="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.SolutionDataTableName"/>.  Note that with the Solution 
            table there is no need for key->id translation.  i.e. the key acts as the ID itself.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.StringInfoTableName">
             <summary>
             Inside the DB we have a table dedicated to storing strings that also provides a unique
             integral ID per string.  This allows us to store data keyed in a much more efficient
             manner as we can use those IDs instead of duplicating strings all over the place.  For
             example, there may be many pieces of data associated with a file.  We don't want to
             key off the file path in all these places as that would cause a large amount of bloat.
            
             Because the string table can map from arbitrary strings to unique IDs, it can also be
             used to create IDs for compound objects.  For example, given the IDs for the FilePath
             and Name of a Project, we can get an ID that represents the project itself by just
             creating a compound key of those two IDs.  This ID can then be used in other compound
             situations.  For example, a Document's ID is creating by compounding its Project's
             ID, along with the IDs for the Document's FilePath and Name.
            
             The format of the table is:
            
              StringInfo
              --------------------------------------------------------------
              | Id (integer, primary key, auto increment) | Data (varchar) |
              --------------------------------------------------------------
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.SolutionDataTableName">
             <summary>
             Inside the DB we have a table for data corresponding to the <see cref="T:Microsoft.CodeAnalysis.Solution"/>.  The
             data is just a blob that is keyed by a string Id.  Data with this ID can be retrieved
             or overwritten.
            
             The format of the table is:
            
              SolutionData
              -------------------------------------------------------------------
              | DataId (primary key, varchar) | | Checksum (blob) | Data (blob) |
              -------------------------------------------------------------------
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.ProjectDataTableName">
             <summary>
             Inside the DB we have a table for data that we want associated with a <see cref="T:Microsoft.CodeAnalysis.Project"/>.
             The data is keyed off of an integral value produced by combining the ID of the Project and
             the ID of the name of the data (see <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.ReadStreamAsync(Microsoft.CodeAnalysis.Storage.ProjectKey,Microsoft.CodeAnalysis.Project,System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)"/>.
            
             This gives a very efficient integral key, and means that the we only have to store a
             single mapping from stream name to ID in the string table.
            
             The format of the table is:
            
              ProjectData
              -------------------------------------------------------------------
              | DataId (primary key, integer) | | Checksum (blob) | Data (blob) |
              -------------------------------------------------------------------
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorageConstants.DocumentDataTableName">
             <summary>
             Inside the DB we have a table for data that we want associated with a <see cref="T:Microsoft.CodeAnalysis.Document"/>.
             The data is keyed off of an integral value produced by combining the ID of the Document and
             the ID of the name of the data (see <see cref="M:Microsoft.CodeAnalysis.SQLite.v2.SQLitePersistentStorage.ReadStreamAsync(Microsoft.CodeAnalysis.Storage.DocumentKey,Microsoft.CodeAnalysis.Document,System.String,Microsoft.CodeAnalysis.Checksum,System.Threading.CancellationToken)"/>.
            
             This gives a very efficient integral key, and means that the we only have to store a
             single mapping from stream name to ID in the string table.
            
             The format of the table is:
            
              DocumentData
              -------------------------------------------------------------------
              | DataId (primary key, integer) | | Checksum (blob) | Data (blob) |
              -------------------------------------------------------------------
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchLogService">
            <summary>
            Used so we can mock out logging in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService.FindPackagesWithTypeAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches for packages that contain a type with the provided name and arity.
            Note: Implementations are free to return the results they feel best for the
            given data.  Specifically, they can do exact or fuzzy matching on the name.
            They can use or ignore the arity depending on their capabilities. 
            
            Implementations should return results in order from best to worst (from their
            perspective).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService.FindPackagesWithAssemblyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for packages that contain an assembly with the provided name.
            Note: Implementations are free to return the results they feel best for the
            given data.  Specifically, they can do exact or fuzzy matching on the name.
            
            Implementations should return results in order from best to worst (from their
            perspective).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService.FindReferenceAssembliesWithTypeAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches for reference assemblies that contain a type with the provided name and arity.
            Note: Implementations are free to return the results they feel best for the
            given data.  Specifically, they can do exact or fuzzy matching on the name.
            They can use or ignore the arity depending on their capabilities. 
            
            Implementations should return results in order from best to worst (from their
            perspective).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchUpdateEngine">
            <summary>
            Service that allows you to query the SymbolSearch database and which keeps 
            the database up to date.  
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Telemetry.IWorkspaceTelemetryService">
            <summary>
            Provides access to the telemetry service to workspace services.
            Abstract away the actual implementation of the telemetry service (e.g. Microsoft.VisualStudio.Telemetry).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Telemetry.IWorkspaceTelemetryService.HasActiveSession">
            <summary>
            True if a telemetry session has started.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Telemetry.IWorkspaceTelemetryService.SerializeCurrentSessionSettings">
            <summary>
            Serialized the current telemetry settings. Returns <see langword="null"/> if session hasn't started.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Telemetry.IWorkspaceTelemetryService.RegisterUnexpectedExceptionLogger(System.Diagnostics.TraceSource)">
            <summary>
            Adds a <see cref="T:System.Diagnostics.TraceSource"/> used to log unexpected exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Telemetry.IWorkspaceTelemetryService.UnregisterUnexpectedExceptionLogger(System.Diagnostics.TraceSource)">
            <summary>
            Removes a <see cref="T:System.Diagnostics.TraceSource"/> used to log unexpected exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Telemetry.IWorkspaceTelemetryService.ReportApiUsage(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.ISymbol},System.Guid,System.Guid)">
            <summary>
            Reports telemetry on API usage.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Telemetry.TelemetryFeatureName">
            <summary>
            Feature name used in telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TodoComments.IRemoteTodoCommentsDiscoveryService">
            <summary>
            Interface to allow host (VS) to inform the OOP service to start incrementally analyzing and
            reporting results back to the host.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TodoComments.ITodoCommentsListener">
            <summary>
            Callback the host (VS) passes to the OOP service to allow it to send batch notifications about todo comments.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TodoComments.TodoCommentData">
            <summary>
            Serialization type used to pass information to/from OOP and VS.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DeferredDocumentationProvider">
            <summary>
            The documentation provider used to lookup xml docs for any metadata reference we pass out.  They'll
            all get the same xml doc comment provider (as different references to the same compilation don't
            see the xml docs any differently).  This provider does root a Compilation around.  However, this should
            not be an issue in practice as the compilation we are rooting is a clone of the acutal compilation of
            project, and not the compilation itself.  This clone doesn't share any symbols/semantics with the main
            compilation, and it can dump syntax trees whenever necessary.  What is does store is the compact
            decl-table which is safe and cheap to hold onto long term.  When some downstream consumer of this
            metadata-reference then needs to get xml-doc comments, it will resolve a doc-comment-id against this
            decl-only-compilation.  Resolution is very cheap, only causing the necessary symbols referenced directly
            in the ID to be created.  As downstream consumers are only likely to resolve a small handful of these 
            symbols in practice, this should not be expensive to hold onto.  Importantly, semantic models and 
            complex method binding/caching should never really happen with this compilation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.XmlDocumentationProvider">
            <summary>
            A class used to provide XML documentation to the compiler for members from metadata from an XML document source.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.XmlDocumentationProvider.GetSourceStream(System.Threading.CancellationToken)">
            <summary>
            Gets the source stream for the XML document.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.XmlDocumentationProvider.CreateFromBytes(System.Byte[])">
            <summary>
            Creates an <see cref="T:Microsoft.CodeAnalysis.XmlDocumentationProvider"/> from bytes representing XML documentation data.
            </summary>
            <param name="xmlDocCommentBytes">The XML document bytes.</param>
            <returns>An <see cref="T:Microsoft.CodeAnalysis.XmlDocumentationProvider"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.XmlDocumentationProvider.CreateFromFile(System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.CodeAnalysis.XmlDocumentationProvider"/> from an XML documentation file.
            </summary>
            <param name="xmlDocCommentFilePath">The path to the XML file.</param>
            <returns>An <see cref="T:Microsoft.CodeAnalysis.XmlDocumentationProvider"/>.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.XmlDocumentationProvider.NullXmlDocumentationProvider">
            <summary>
            A trivial XmlDocumentationProvider which never returns documentation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Utilities.ParameterName.NameBasedOnArgument">
            <summary>
            The name the underlying naming system came up with based on the argument itself.
            This might be a name like "_value".  We pass this along because it can help
            later parts of the GenerateConstructor process when doing things like field hookup.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Utilities.ParameterName.BestNameForParameter">
            <summary>
            The name we think should actually be used for this parameter.  This will include
            stripping the name of things like underscores.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Utilities.WorkspacePathUtilities.TypeNameMatchesDocumentName(Microsoft.CodeAnalysis.Document,System.String)">
            <summary>
            Returns true if a type name matches a document name. We use
            case insensitive matching to determine this match so that files
            "a.cs" and "A.cs" both match a class called "A" 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Utilities.WorkspacePathUtilities.TypeNameMatchesDocumentName(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts)">
            <summary>
            Standard way to get the display name from a SyntaxNode. If the display
            name is null, returns false. Otherwise uses <see cref="M:Microsoft.CodeAnalysis.Utilities.WorkspacePathUtilities.TypeNameMatchesDocumentName(Microsoft.CodeAnalysis.Document,System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Utilities.WorkspacePathUtilities.GetTypeNameFromDocumentName(Microsoft.CodeAnalysis.Document)">
            <summary>
            Gets a type name based on a document name. Returns null
            if the document has no name or the document has invalid characters in the name
            such that <see cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/> would throw.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AdhocWorkspace">
            <summary>
            A workspace that allows full manipulation of projects and documents,
            but does not persist changes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AdhocWorkspace.CanOpenDocuments">
            <summary>
            Returns true, signifiying that you can call the open and close document APIs to add the document into the open document list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.ClearSolution">
            <summary>
            Clears all projects and documents from the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.AddSolution(Microsoft.CodeAnalysis.SolutionInfo)">
            <summary>
            Adds an entire solution to the workspace, replacing any existing solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.AddProject(System.String,System.String)">
            <summary>
            Adds a project to the workspace. All previous projects remain intact.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.AddProject(Microsoft.CodeAnalysis.ProjectInfo)">
            <summary>
            Adds a project to the workspace. All previous projects remain intact.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.AddProjects(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectInfo})">
            <summary>
            Adds multiple projects to the workspace at once. All existing projects remain intact.
            </summary>
            <param name="projectInfos"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.AddDocument(Microsoft.CodeAnalysis.ProjectId,System.String,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Adds a document to the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.AddDocument(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Adds a document to the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.OpenDocument(Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Puts the specified document into the open state.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.CloseDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Puts the specified document into the closed state.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.OpenAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Puts the specified additional document into the open state.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.CloseAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Puts the specified additional document into the closed state
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.OpenAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Puts the specified analyzer config document into the open state.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AdhocWorkspace.CloseAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Puts the specified analyzer config document into the closed state
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommandLineProject.CreateProjectInfo(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Create a <see cref="T:Microsoft.CodeAnalysis.ProjectInfo"/> structure initialized from a compilers command line arguments.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommandLineProject.CreateProjectInfo(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Create a <see cref="T:Microsoft.CodeAnalysis.ProjectInfo"/> structure initialized with data from a compiler command line.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FileTextLoaderOptions.FileLengthThreshold">
            <summary>
            Hidden registry key to control maximum size of a text file we will read into memory. 
            we have this option to reduce a chance of OOM when user adds massive size files to the solution.
            Default threshold is 100MB which came from some internal data on big files and some discussion.
            
            User can override default value by setting DWORD value on FileLengthThreshold in 
            "[VS HIVE]\Roslyn\Internal\Performance\Text"
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FileTextLoader.Path">
            <summary>
            Absolute path of the file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FileTextLoader.DefaultEncoding">
            <summary>
            Specifies an encoding to be used if the actual encoding of the file 
            can't be determined from the stream content (the stream doesn't start with Byte Order Mark).
            If <c>null</c> auto-detect heuristics are used to determine the encoding. 
            Note that if the stream starts with Byte Order Mark the value of <see cref="P:Microsoft.CodeAnalysis.FileTextLoader.DefaultEncoding"/> is ignored.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FileTextLoader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a content loader for specified file.
            </summary>
            <param name="path">An absolute file path.</param>
            <param name="defaultEncoding">
            Specifies an encoding to be used if the actual encoding can't be determined from the stream content (the stream doesn't start with Byte Order Mark).
            If not specified auto-detect heuristics are used to determine the encoding.
            Note that if the stream starts with Byte Order Mark the value of <paramref name="defaultEncoding"/> is ignored.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is not an absolute path.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FileTextLoader.LoadTextAndVersionAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Load a text and a version of the document in the workspace.
            </summary>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FileTextLoader.LoadTextAndVersionSynchronously(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Load a text and a version of the document in the workspace.
            </summary>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AdditionalDocument">
            <summary>
            Represents an additional file passed down to analyzers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.BranchId">
            <summary>
            solution branch Id
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Checksum">
            <summary>
            Checksum of data can be used later to see whether two data are same or not
            without actually comparing data itself
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Checksum.HashSize">
            <summary>
            The intended size of the <see cref="T:Microsoft.CodeAnalysis.Checksum.HashData"/> structure. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Checksum.From(System.Byte[])">
            <summary>
            Create Checksum from given byte array. if byte array is bigger than <see cref="F:Microsoft.CodeAnalysis.Checksum.HashSize"/>, it will be
            truncated to the size.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Checksum.From(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Create Checksum from given byte array. if byte array is bigger than <see cref="F:Microsoft.CodeAnalysis.Checksum.HashSize"/>, it will be
            truncated to the size.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Checksum.HashData">
            <summary>
            This structure stores the 20-byte hash as an inline value rather than requiring the use of
            <c>byte[]</c>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CompilationOutputInfo">
            <summary>
            Paths of files produced by the compilation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilationOutputInfo.AssemblyPath">
            <summary>
            Full path to the assembly or module produced by the compilation, or <see langword="null"/> if unknown.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DefaultTextDocumentServiceProvider">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.Host.IDocumentServiceProvider"/> for regular C#/VB files.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Document">
            <summary>
            Represents a source code document that is part of a project.
            It provides access to the source text, parsed syntax tree and the corresponding semantic model.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Document._model">
            <summary>
            A cached reference to the <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Document._syntaxTreeResultTask">
            <summary>
            A cached task that can be returned once the tree has already been created. This is only set if <see cref="P:Microsoft.CodeAnalysis.Document.SupportsSyntaxTree"/> returns true,
            so the inner value can be non-null.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Document.SourceCodeKind">
            <summary>
            The kind of source code this document contains.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.HasInfoChanged(Microsoft.CodeAnalysis.TextDocument)">
            <summary>
            True if the info of the document change (name, folders, file path; not the content)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.TryGetSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree@)">
            <summary>
            Get the current syntax tree for the document if the text is already loaded and the tree is already parsed.
            In almost all cases, you should call <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken)"/> to fetch the tree, which will parse the tree
            if it's not already parsed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.TryGetSyntaxVersion(Microsoft.CodeAnalysis.VersionStamp@)">
            <summary>
            Get the current syntax tree version for the document if the text is already loaded and the tree is already parsed.
            In almost all cases, you should call <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxVersionAsync(System.Threading.CancellationToken)"/> to fetch the version, which will load the tree
            if it's not already available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.TryGetTopLevelChangeTextVersion(Microsoft.CodeAnalysis.VersionStamp@)">
            <summary>
            Gets the version of the document's top level signature if it is already loaded and available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetSyntaxVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the version of the syntax tree. This is generally the newer of the text version and the project's version.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Document.SupportsSyntaxTree">
             <summary>
             <see langword="true"/> if this Document supports providing data through the
             <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxRootAsync(System.Threading.CancellationToken)"/> methods.
            
             If <see langword="false"/> then these methods will return <see langword="null"/> instead.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Document.SupportsSemanticModel">
             <summary>
             <see langword="true"/> if this Document supports providing data through the
             <see cref="M:Microsoft.CodeAnalysis.Document.GetSemanticModelAsync(System.Threading.CancellationToken)"/> method.
            
             If <see langword="false"/> then that method will return <see langword="null"/> instead.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> for this document asynchronously.
            </summary>
            <returns>
            The returned syntax tree can be <see langword="null"/> if the <see cref="P:Microsoft.CodeAnalysis.Document.SupportsSyntaxTree"/> returns <see
            langword="false"/>. This function may cause computation to occur the first time it is called, but will return
            a cached result every subsequent time.  <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>'s can hold onto their roots lazily. So calls 
            to <see cref="M:Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)"/> or <see cref="M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)"/> may end up causing computation
            to occur at that point.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.TryGetSyntaxRoot(Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Gets the root node of the current syntax tree if the syntax tree has already been parsed and the tree is still cached.
            In almost all cases, you should call <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxRootAsync(System.Threading.CancellationToken)"/> to fetch the root node, which will parse
            the document if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetSyntaxRootAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the root node of the syntax tree asynchronously.
            </summary>
            <returns>
            The returned <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> will be <see langword="null"/> if <see
            cref="P:Microsoft.CodeAnalysis.Document.SupportsSyntaxTree"/> returns <see langword="false"/>.  This function will return
            the same value if called multiple times.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetSyntaxRootSynchronously(System.Threading.CancellationToken)">
            <summary>
            Only for features that absolutely must run synchronously (probably because they're
            on the UI thread).  Right now, the only feature this is for is Outlining as VS will
            block on that feature from the UI thread when a document is opened.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.TryGetSemanticModel(Microsoft.CodeAnalysis.SemanticModel@)">
            <summary>
            Gets the current semantic model for this document if the model is already computed and still cached.
            In almost all cases, you should call <see cref="M:Microsoft.CodeAnalysis.Document.GetSemanticModelAsync(System.Threading.CancellationToken)"/>, which will compute the semantic model
            if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetSemanticModelAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the semantic model for this document asynchronously.
            </summary>
            <returns>
            The returned <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> may be <see langword="null"/> if <see
            cref="P:Microsoft.CodeAnalysis.Document.SupportsSemanticModel"/> returns <see langword="false"/>. This function will
            return the same value if called multiple times.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithSourceCodeKind(Microsoft.CodeAnalysis.SourceCodeKind)">
            <summary>
            Creates a new instance of this document updated to have the source code kind specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithText(Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Creates a new instance of this document updated to have the text specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithSyntaxRoot(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new instance of this document updated to have a syntax tree rooted by the specified syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithName(System.String)">
            <summary>
            Creates a new instance of this document updated to have the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithFolders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of this document updated to have the specified folders.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithFilePath(System.String)">
            <summary>
            Creates a new instance of this document updated to have the specified file path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetTextChangesAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Get the text changes between this document and a prior version of the same document.
            The changes, when applied to the text of the old document, will produce the text of the current document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetLinkedDocumentIds">
            <summary>
            Gets the list of <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s that are linked to this
            <see cref="T:Microsoft.CodeAnalysis.Document" />. <see cref="T:Microsoft.CodeAnalysis.Document"/>s are considered to be linked if they
            share the same <see cref="P:Microsoft.CodeAnalysis.TextDocument.FilePath" />. This <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> is excluded from the
            result.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.WithFrozenPartialSemantics(System.Threading.CancellationToken)">
             <summary>
             Creates a branched version of this document that has its semantic model frozen in whatever state it is available at the time,
             assuming a background process is constructing the semantics asynchronously. Repeated calls to this method may return
             documents with increasingly more complete semantics.
            
             Use this method to gain access to potentially incomplete semantics quickly.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Document.GetOptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the options that should be applied to this document. This consists of global options from <see cref="P:Microsoft.CodeAnalysis.Solution.Options"/>,
            merged with any settings the user has specified at the document levels.
            </summary>
            <remarks>
            This method is async because this may require reading other files. In files that are already open, this is expected to be cheap and complete synchronously.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DocumentId">
            <summary>
            An identifier that can be used to retrieve the same <see cref="T:Microsoft.CodeAnalysis.Document"/> across versions of the
            workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.DocumentId.CreateNewId(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> instance.
            </summary>
            <param name="projectId">The project id this document id is relative to.</param>
            <param name="debugName">An optional name to make this id easier to recognize while debugging.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DocumentInfo">
            <summary>
            A class that represents all the arguments necessary to create a new document instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.Id">
            <summary>
            The Id of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.Name">
            <summary>
            The name of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.Folders">
            <summary>
            The names of the logical nested folders the document is contained in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.SourceCodeKind">
            <summary>
            The kind of the source code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.FilePath">
            <summary>
            The file path of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.IsGenerated">
            <summary>
            True if the document is a side effect of the build.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.TextLoader">
            <summary>
            A loader that can retrieve the document text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentServiceProvider">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Host.IDocumentServiceProvider"/> associated with this document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.DocumentInfo.#ctor(Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.Host.IDocumentServiceProvider)">
            <summary>
            Create a new instance of a <see cref="T:Microsoft.CodeAnalysis.DocumentInfo"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes">
            <summary>
            type that contains information regarding this document itself but
            no tree information such as document info
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.Id">
            <summary>
            The Id of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.Name">
            <summary>
            The name of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.Folders">
            <summary>
            The names of the logical nested folders the document is contained in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.SourceCodeKind">
            <summary>
            The kind of the source code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.FilePath">
            <summary>
            The file path of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.IsGenerated">
            <summary>
            True if the document is a side effect of the build.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentInfo.DocumentAttributes.DesignTimeOnly">
            <summary>
            True if the source code contained in the document is only used in design-time (e.g. for completion),
            but is not passed to the compiler when the containing project is built, e.g. a Razor view
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DocumentState.TreeTextSource">
            <summary>
            A source for <see cref="T:Microsoft.CodeAnalysis.TextAndVersion"/> constructed from an syntax tree.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.IChecksummedObject">
            <summary>
            Indicates whether a type has checksum or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IDocumentTextDifferencingService.GetTextChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Computes the text changes between two documents.
            </summary>
            <param name="oldDocument">The old version of the document.</param>
            <param name="newDocument">The new version of the document.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An array of changes.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IDocumentTextDifferencingService.GetTextChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.TextDifferenceTypes,System.Threading.CancellationToken)">
            <summary>
            Computes the text changes between two documents.
            </summary>
            <param name="oldDocument">The old version of the document.</param>
            <param name="newDocument">The new version of the document.</param>
            <param name="preferredDifferenceType">The type of differencing to perform. Not supported by all text differencing services.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An array of changes.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PreservationMode">
            <summary>
            The mode in which value is preserved.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PreservationMode.PreserveValue">
            <summary>
            The value is guaranteed to have the same contents across multiple accesses.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.PreservationMode.PreserveIdentity">
            <summary>
            The value is guaranteed to the same instance across multiple accesses.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Project">
            <summary>
            Represents a project that is part of a <see cref="P:Microsoft.CodeAnalysis.Project.Solution"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.Solution">
            <summary>
            The solution this project is part of.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.Id">
            <summary>
            The ID of the project. Multiple <see cref="T:Microsoft.CodeAnalysis.Project"/> instances may share the same ID. However, only
            one project may have this ID in any given solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.FilePath">
            <summary>
            The path to the project file or null if there is no project file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.OutputFilePath">
            <summary>
            The path to the output file, or null if it is not known.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.OutputRefFilePath">
            <summary>
            The path to the reference assembly output file, or null if it is not known.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.CompilationOutputInfo">
            <summary>
            Compilation output file paths.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.DefaultNamespace">
            <summary>
            The default namespace of the project ("" if not defined, which means global namespace),
            or null if it is unknown or not applicable. 
            </summary>
            <remarks>
            Right now VB doesn't have the concept of "default namespace". But we conjure one in workspace 
            by assigning the value of the project's root namespace to it. So various feature can choose to 
            use it for their own purpose.
            In the future, we might consider officially exposing "default namespace" for VB project 
            (e.g. through a "defaultnamespace" msbuild property)
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.SupportsCompilation">
            <summary>
            <see langword="true"/> if this <see cref="T:Microsoft.CodeAnalysis.Project"/> supports providing data through the
            <see cref="M:Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)"/> method.
            
            If <see langword="false"/> then <see cref="M:Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)"/> method will return <see langword="null"/> instead.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.LanguageServices">
            <summary>
            The language services from the host environment associated with this project's language.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.Language">
            <summary>
            The language associated with the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AssemblyName">
            <summary>
            The name of the assembly this project represents.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.Name">
            <summary>
            The name of the project. This may be different than the assembly name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.MetadataReferences">
            <summary>
            The list of all other metadata sources (assemblies) that this project references.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.ProjectReferences">
            <summary>
            The list of all other projects within the same solution that this project references.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AllProjectReferences">
            <summary>
            The list of all other projects that this project references, including projects that 
            are not part of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AnalyzerReferences">
            <summary>
            The list of all the diagnostic analyzer references for this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AnalyzerOptions">
            <summary>
            The options used by analyzers for this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.CompilationOptions">
            <summary>
            The options used when building the compilation for this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.ParseOptions">
            <summary>
            The options used when parsing documents for this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.IsSubmission">
            <summary>
            Returns true if this is a submission project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.HasDocuments">
            <summary>
            True if the project has any documents.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.DocumentIds">
            <summary>
            All the document IDs associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AdditionalDocumentIds">
            <summary>
            All the additional document IDs associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AnalyzerConfigDocumentIds">
            <summary>
            All the additional document IDs associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.Documents">
            <summary>
            All the regular documents associated with this project. Documents produced from source generators are returned by
            <see cref="M:Microsoft.CodeAnalysis.Project.GetSourceGeneratedDocumentsAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AdditionalDocuments">
            <summary>
            All the additional documents associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.AnalyzerConfigDocuments">
            <summary>
            All the <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigDocument"/>s associated with this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the project contains a document with the specified ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the project contains an additional document with the specified ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.ContainsAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the project contains an <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigDocument"/> with the specified ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Get the documentId in this project with the specified syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Get the document in this project with the specified syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Get the document in this project with the specified document Id.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Get the additional document in this project with the specified document Id.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Get the analyzer config document in this project with the specified document Id.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDocumentAsync(Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a document or a source generated document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetTextDocumentAsync(Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Gets a document, additional document, analyzer config document or a source generated document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetSourceGeneratedDocumentsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all source generated documents in this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.TryGetSourceGeneratedDocumentForAlreadyGeneratedId(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.SourceGeneratedDocumentState"/> for a source generated document that has already been generated and observed.
            </summary>
            <remarks>
            This is only safe to call if you already have seen the SyntaxTree or equivalent that indicates the document state has already been
            generated. This method exists to implement <see cref="M:Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)"/> and is best avoided unless you're doing something
            similarly tricky like that.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.TryGetCompilation(Microsoft.CodeAnalysis.Compilation@)">
            <summary>
            Tries to get the cached <see cref="T:Microsoft.CodeAnalysis.Compilation"/> for this project if it has already been created and is still cached. In almost all
            cases you should call <see cref="M:Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)"/> which will either return the cached <see cref="T:Microsoft.CodeAnalysis.Compilation"/>
            or create a new one otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)">
            <summary>
            Get the <see cref="T:Microsoft.CodeAnalysis.Compilation"/> for this project asynchronously.
            </summary>
            <returns>
            Returns the produced <see cref="T:Microsoft.CodeAnalysis.Compilation"/>, or <see langword="null"/> if <see
            cref="P:Microsoft.CodeAnalysis.Project.SupportsCompilation"/> returns <see langword="false"/>. This function will
            return the same value if called multiple times.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.HasSuccessfullyLoadedAsync(System.Threading.CancellationToken)">
            <summary>
            Determines if the compilation returned by <see cref="M:Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)"/> and all its referenced compilation are from fully loaded projects.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetChanges(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets an object that lists the added, changed and removed documents between this project and the specified project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Project.Version">
            <summary>
            The project version. This equates to the version of the project file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetLatestDocumentVersionAsync(System.Threading.CancellationToken)">
            <summary>
            The version of the most recently modified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDependentVersionAsync(System.Threading.CancellationToken)">
            <summary>
            The most recent version of the project, its documents and all dependent projects and documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)">
            <summary>
            The semantic version of this project including the semantics of referenced projects.
            This version changes whenever the consumable declarations of this project and/or projects it depends on change.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetSemanticVersionAsync(System.Threading.CancellationToken)">
            <summary>
            The semantic version of this project not including the semantics of referenced projects.
            This version changes only when the consumable declarations of this project change.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.GetDependentChecksumAsync(System.Threading.CancellationToken)">
            <summary>
            Calculates a checksum that contains a project's checksum along with a checksum for each of the project's 
            transitive dependencies.
            </summary>
            <remarks>
            This checksum calculation can be used for cases where a feature needs to know if the semantics in this project
            changed.  For example, for diagnostics or caching computed semantic data. The goal is to ensure that changes to
            <list type="bullet">
               <item>Files inside the current project</item>
               <item>Project properties of the current project</item>
               <item>Visible files in referenced projects</item>
               <item>Project properties in referenced projects</item>
            </list>
            are reflected in the metadata we keep so that comparing solutions accurately tells us when we need to recompute
            semantic work.   
            
            <para>This method of checking for changes has a few important properties that differentiate it from other methods of determining project version.
            <list type="bullet">
               <item>Changes to methods inside the current project will be reflected to compute updated diagnostics.
                   <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)"/> does not change as it only returns top level changes.</item>
               <item>Reloading a project without making any changes will re-use cached diagnostics.
                   <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)"/> changes as the project is removed, then added resulting in a version change.</item>
            </list>   
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithAssemblyName(System.String)">
            <summary>
            Creates a new instance of this project updated to have the new assembly name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithDefaultNamespace(System.String)">
            <summary>
            Creates a new instance of this project updated to have the new default namespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithCompilationOptions(Microsoft.CodeAnalysis.CompilationOptions)">
            <summary>
            Creates a new instance of this project updated to have the specified compilation options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithParseOptions(Microsoft.CodeAnalysis.ParseOptions)">
            <summary>
            Creates a new instance of this project updated to have the specified parse options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddProjectReference(Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Creates a new instance of this project updated to include the specified project reference
            in addition to already existing ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddProjectReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Creates a new instance of this project updated to include the specified project references
            in addition to already existing ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Creates a new instance of this project updated to no longer include the specified project reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithProjectReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Creates a new instance of this project updated to replace existing project references 
            with the specified ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Creates a new instance of this project updated to include the specified metadata reference
            in addition to already existing ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddMetadataReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Creates a new instance of this project updated to include the specified metadata references
            in addition to already existing ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Creates a new instance of this project updated to no longer include the specified metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithMetadataReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Creates a new instance of this project updated to replace existing metadata reference
            with the specified ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Creates a new instance of this project updated to include the specified analyzer reference 
            in addition to already existing ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Creates a new instance of this project updated to include the specified analyzer references
            in addition to already existing ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Creates a new instance of this project updated to no longer include the specified analyzer reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.WithAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Creates a new instance of this project updated to replace existing analyzer references 
            with the specified ones.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddDocument(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new document in a new instance of this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new document in a new instance of this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddDocument(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new document in a new instance of this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddAdditionalDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new additional document in a new instance of this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddAdditionalDocument(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new additional document in a new instance of this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.AddAnalyzerConfigDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new analyzer config document in a new instance of this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Creates a new instance of this project updated to no longer include the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new instance of this project updated to no longer include the specified documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Creates a new instance of this project updated to no longer include the specified additional document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveAdditionalDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new instance of this project updated to no longer include the specified additional documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Creates a new instance of this project updated to no longer include the specified analyzer config document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Project.RemoveAnalyzerConfigDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance that no longer includes the specified <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigDocument"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetAddedDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of added documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of the <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetAddedAdditionalDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of added dditional documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetAddedAnalyzerConfigDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of added analyzer config documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetChangedDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of documents with any changes (textual and non-textual)
            in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetChangedDocuments(System.Boolean)">
            <summary>
            Get changed documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            When <paramref name="onlyGetDocumentsWithTextChanges"/> is true, only get documents with text changes (we only check text source, not actual content);
            otherwise get documents with any changes i.e. <see cref="T:Microsoft.CodeAnalysis.ParseOptions"/>, <see cref="T:Microsoft.CodeAnalysis.SourceCodeKind"/> and file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetChangedAdditionalDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of additional documents with any changes (textual and non-textual)
            in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetChangedAnalyzerConfigDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of analyzer config documents with any changes (textual and non-textual)
            in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.NewProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetRemovedDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of removed documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.OldProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetRemovedAdditionalDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of removed additional documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.OldProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectChanges.GetRemovedAnalyzerConfigDocuments">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of removed analyzer config documents in the order they appear in <see cref="P:Microsoft.CodeAnalysis.Project.DocumentIds"/> of <see cref="P:Microsoft.CodeAnalysis.ProjectChanges.OldProject"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectDependencyGraph">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.ProjectDependencyGraph"/> models the dependencies between projects in a solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._referencesMap">
             <summary>
             The map of projects to dependencies. This field is always fully initialized. Projects which do not reference
             any other projects do not have a key in this map (i.e. they are omitted, as opposed to including them with
             an empty value).
            
             <list type="bullet">
             <item><description>This field is always fully initialized</description></item>
             <item><description>Projects which do not reference any other projects do not have a key in this map (i.e.
             they are omitted, as opposed to including them with an empty value)</description></item>
             <item><description>The keys and values in this map are always contained in
             <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._projectIds"/></description></item>
             </list>
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap">
            <summary>
            The lazily-initialized map of projects to projects which reference them. This field is either null, or
            fully-computed. Projects which are not referenced by any other project do not have a key in this map (i.e.
            they are omitted, as opposed to including them with an empty value).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatThisProjectDirectlyDependsOn(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the list of projects that this project directly depends on.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatDirectlyDependOnThisProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the list of projects that directly depend on this project.
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.TryGetProjectsThatThisProjectTransitivelyDependsOn(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the list of projects that directly or transitively this project depends on, if it has already been
            cached.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatThisProjectTransitivelyDependsOn(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the list of projects that directly or transitively this project depends on
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatTransitivelyDependOnThisProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the list of projects that directly or transitively depend on this project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.GetTopologicallySortedProjects(System.Threading.CancellationToken)">
            <summary>
            Returns all the projects for the solution in a topologically sorted order with respect
            to their dependencies. Projects that depend on other projects will always show up later in this sequence
            than the projects they depend on.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.GetDependencySets(System.Threading.CancellationToken)">
            <summary>
            Returns a sequence of sets, where each set contains items with shared interdependency,
            and there is no dependency between sets.  Each set returned will sorted in topological order.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.TestAccessor.TryGetProjectsThatTransitivelyDependOnThisProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the list of projects that directly or transitively depend on this project, if it has already been
            cached.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReferencesMapForAdditionalProjectReferences(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectId})">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._referencesMap"/> for the addition of additional project references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReverseReferencesMapForAdditionalProjectReferences(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectId})">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/> for the addition of additional project references.
            </summary>
            <param name="existingReverseReferencesMap">The previous <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/>, or
            <see langword="null"/> if the reverse references map was not computed for the previous graph.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewTransitiveReferencesMapForAdditionalProjectReferences(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectId})">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._transitiveReferencesMap"/> for the addition of additional project references. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReverseTransitiveReferencesMapForAdditionalProjectReferences(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectId})">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._reverseTransitiveReferencesMap"/> for the addition of new projects.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReferencesMapForRemovedProject(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._referencesMap"/> for the removal of a project.
            </summary>
            <param name="existingForwardReferencesMap">The <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._referencesMap"/> prior to the removal.</param>
            <param name="existingReverseReferencesMap">The <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/> prior to the removal.
            This map serves as a hint to the removal process; i.e. it is assumed correct if it contains data, but may be
            omitted without impacting correctness.</param>
            <param name="removedProjectId">The ID of the project which is being removed.</param>
            <returns>The <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._referencesMap"/> for the project dependency graph once the project is removed.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReverseReferencesMapForRemovedProject(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/> for the removal of a project.
            </summary>
            <param name="existingReverseReferencesMap">The <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/> prior to the removal,
            or <see langword="null"/> if the value prior to removal was not computed for the graph.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewTransitiveReferencesMapForRemovedProject(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._transitiveReferencesMap"/> for the removal of a project.
            </summary>
            <seealso cref="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReverseTransitiveReferencesMapForRemovedProject(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReverseTransitiveReferencesMapForRemovedProject(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._reverseTransitiveReferencesMap"/> for the removal of a project.
            </summary>
            <seealso cref="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewTransitiveReferencesMapForRemovedProject(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectDependencyGraph.ComputeNewReverseReferencesMapForRemovedProjectReference(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{Microsoft.CodeAnalysis.ProjectId}},Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Computes a new <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/> for the removal of a project reference.
            </summary>
            <param name="existingReverseReferencesMap">The <see cref="F:Microsoft.CodeAnalysis.ProjectDependencyGraph._lazyReverseReferencesMap"/> prior to the removal,
            or <see langword="null"/> if the reverse references map was not computed for the prior graph.</param>
            <param name="projectId">The project ID from which a project reference is being removed.</param>
            <param name="referencedProjectId">The target of the project reference which is being removed.</param>
            <returns>The updated (complete) reverse references map, or <see langword="null"/> if the reverse references
            map could not be incrementally updated.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectId">
            <summary>
            An identifier that can be used to refer to the same <see cref="T:Microsoft.CodeAnalysis.Project"/> across versions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectId.Id">
            <summary>
            The system generated unique id.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectId.CreateNewId(System.String)">
            <summary>
            Create a new ProjectId instance.
            </summary>
            <param name="debugName">An optional name to make this id easier to recognize while debugging.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectInfo">
            <summary>
            A class that represents all the arguments necessary to create a new project instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.Id">
            <summary>
            The unique Id of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.Version">
            <summary>
            The version of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.Name">
            <summary>
            The name of the project. This may differ from the project's filename.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.NameAndFlavor">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.NameAndFlavor"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.AssemblyName">
            <summary>
            The name of the assembly that this project will create, without file extension.
            </summary>,
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.Language">
            <summary>
            The language of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.FilePath">
            <summary>
            The path to the project file or null if there is no project file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.OutputFilePath">
            <summary>
            The path to the output file (module or assembly).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.OutputRefFilePath">
            <summary>
            The path to the reference assembly output file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.CompilationOutputInfo">
            <summary>
            The path to the compiler output file (module or assembly).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.DefaultNamespace">
            <summary>
            The default namespace of the project ("" if not defined, which means global namespace),
            or null if it is unknown or not applicable.
            </summary>
            <remarks>
            Right now VB doesn't have the concept of "default namespace", but we conjure one in workspace
            by assigning the value of the project's root namespace to it. So various features can choose to
            use it for their own purpose.
            In the future, we might consider officially exposing "default namespace" for VB project
            (e.g. through a "defaultnamespace" msbuild property)
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.IsSubmission">
            <summary>
            True if this is a submission project for interactive sessions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.HasAllInformation">
            <summary>
            True if project information is complete. In some workspace hosts, it is possible
            a project only has partial information. In such cases, a project might not have all
            information on its files or references.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.RunAnalyzers">
            <summary>
            True if we should run analyzers for this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.CompilationOptions">
            <summary>
            The initial compilation options for the project, or null if the default options should be used.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ParseOptions">
            <summary>
            The initial parse options for the source code documents in this project, or null if the default options should be used.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.Documents">
            <summary>
            The list of source documents initially associated with the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectReferences">
            <summary>
            The project references initially defined for the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.MetadataReferences">
            <summary>
            The metadata references initially defined for the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.AnalyzerReferences">
            <summary>
            The analyzers initially associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.AdditionalDocuments">
            <summary>
            The list of non-source documents associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.AnalyzerConfigDocuments">
            <summary>
            The list of analyzerconfig documents associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.HostObjectType">
            <summary>
            Type of the host object.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectInfo.Create(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.VersionStamp,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.CompilationOptions,Microsoft.CodeAnalysis.ParseOptions,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentInfo},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentInfo},System.Boolean,System.Type)">
            <summary>
            Create a new instance of a <see cref="T:Microsoft.CodeAnalysis.ProjectInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectInfo.Create(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.VersionStamp,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.CompilationOptions,Microsoft.CodeAnalysis.ParseOptions,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentInfo},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentInfo},System.Boolean,System.Type,System.String)">
            <summary>
            Create a new instance of a <see cref="T:Microsoft.CodeAnalysis.ProjectInfo"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes">
            <summary>
            type that contains information regarding this project itself but
            no tree information such as document info
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.s_projectNameAndFlavor">
            <summary>
            Matches names like: Microsoft.CodeAnalysis.Features (netcoreapp3.1)
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.Id">
            <summary>
            The unique Id of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.Version">
            <summary>
            The version of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.Name">
            <summary>
            The name of the project. This may differ from the project's filename.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.NameAndFlavor">
            <summary>
            The name and flavor portions of the project broken out.  For example, the project
            <c>Microsoft.CodeAnalysis.Workspace (netcoreapp3.1)</c> would have the name
            <c>Microsoft.CodeAnalysis.Workspace</c> and the flavor <c>netcoreapp3.1</c>.  Values may be null <see
            langword="null"/> if the name does not contain a flavor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.AssemblyName">
            <summary>
            The name of the assembly that this project will create, without file extension.
            </summary>,
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.Language">
            <summary>
            The language of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.FilePath">
            <summary>
            The path to the project file or null if there is no project file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.OutputFilePath">
            <summary>
            The path to the output file (module or assembly).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.OutputRefFilePath">
            <summary>
            The path to the reference assembly output file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.CompilationOutputInfo">
            <summary>
            Paths to the compiler output files.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.DefaultNamespace">
            <summary>
            The default namespace of the project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.IsSubmission">
            <summary>
            True if this is a submission project for interactive sessions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.HasAllInformation">
            <summary>
            True if project information is complete. In some workspace hosts, it is possible
            a project only has partial information. In such cases, a project might not have all
            information on its files or references.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.RunAnalyzers">
            <summary>
            True if we should run analyzers for this project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectInfo.ProjectAttributes.TelemetryId">
            <summary>
            The id report during telemetry events.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectReference.Aliases">
            <summary>
            Aliases for the reference. Empty if the reference has no aliases.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes">
            <summary>
            True if interop types defined in the referenced project should be embedded into the referencing project.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectState.DocumentStates">
            <summary>
            The documents in this project. They are sorted by <see cref="P:Microsoft.CodeAnalysis.DocumentId.Id"/> to provide a stable sort for
            <see cref="M:Microsoft.CodeAnalysis.ProjectState.GetChecksumAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectState.AdditionalDocumentStates">
            <summary>
            The additional documents in this project. They are sorted by <see cref="P:Microsoft.CodeAnalysis.DocumentId.Id"/> to provide a stable sort for
            <see cref="M:Microsoft.CodeAnalysis.ProjectState.GetChecksumAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectState.AnalyzerConfigDocumentStates">
            <summary>
            The analyzer config documents in this project.  They are sorted by <see cref="P:Microsoft.CodeAnalysis.DocumentId.Id"/> to provide a stable sort for
            <see cref="M:Microsoft.CodeAnalysis.ProjectState.GetChecksumAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectState._lazyAnalyzerConfigSet">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigSet"/> to be used for analyzer options for specific trees.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ProjectState._lazySourceGenerators">
            <summary>
            Backing field for <see cref="P:Microsoft.CodeAnalysis.ProjectState.SourceGenerators"/>; this is a default ImmutableArray if it hasn't been computed yet.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ProjectState.NameAndFlavor">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.ProjectInfo.NameAndFlavor"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ProjectState.ContainsReferenceToProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Determines whether <see cref="P:Microsoft.CodeAnalysis.ProjectState.ProjectReferences"/> contains a reference to a specified project.
            </summary>
            <param name="projectId">The target project of the reference.</param>
            <returns><see langword="true"/> if this project references <paramref name="projectId"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.RecoverableTextAndVersion">
            <summary>
            A recoverable TextAndVersion source that saves its text to temporary storage.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Solution">
            <summary>
            Represents a set of projects and their source code documents. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.Workspace">
            <summary>
            The Workspace this solution is associated with.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.Id">
            <summary>
            The Id of the solution. Multiple solution instances may share the same Id.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.FilePath">
            <summary>
            The path to the solution file or null if there is no solution file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.Version">
            <summary>
            The solution version. This equates to the solution file's version.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.ProjectIds">
            <summary>
            A list of all the ids for all the projects contained by the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.Projects">
            <summary>
            A list of all the projects contained by the solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetLatestProjectVersion">
            <summary>
            The version of the most recently modified project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.ContainsProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            True if the solution contains a project with the specified project ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the project in this solution with the specified project ID. 
            
            If the id is not an id of a project that is part of this solution the method returns null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.IAssemblySymbol,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Project"/> associated with an assembly symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetOriginatingProjectId(Microsoft.CodeAnalysis.ISymbol)">
             <summary>
             Given a <paramref name="symbol"/> returns the <see cref="T:Microsoft.CodeAnalysis.ProjectId"/> of the <see cref="T:Microsoft.CodeAnalysis.Project"/> it came
             from.  Returns <see langword="null"/> if <paramref name="symbol"/> does not come from any project in this solution.
             </summary>
             <remarks>
             This function differs from <see cref="M:Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.IAssemblySymbol,System.Threading.CancellationToken)"/> in terms of how it
             treats <see cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/>s.  Specifically, say there is the following:
            
             <c>
             Project-A, containing Symbol-A.<para/>
             Project-B, with a reference to Project-A, and usage of Symbol-A.
             </c>
            
             It is possible (with retargeting, and other complex cases) that Symbol-A from Project-B will be a different
             symbol than Symbol-A from Project-A.  However, <see cref="M:Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.IAssemblySymbol,System.Threading.CancellationToken)"/>
             will always try to return Project-A for either of the Symbol-A's, as it prefers to return the original
             Source-Project of the original definition, not the project that actually produced the symbol.  For many
             features this is an acceptable abstraction.  However, for some cases (Find-References in particular) it is
             necessary to resolve symbols back to the actual project/compilation that produced them for correctness.
             </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetOriginatingProject(Microsoft.CodeAnalysis.ISymbol)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Solution.GetOriginatingProjectId(Microsoft.CodeAnalysis.ISymbol)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the solution contains the document in one of its projects
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the solution contains the additional document in one of its projects
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.ContainsAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the solution contains the analyzer config document in one of its projects
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Gets the documentId in this solution with the specified syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the documentId in this solution with the specified syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Gets the document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetDocumentAsync(Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a document or a source generated document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetTextDocumentAsync(Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Gets a document, additional document, analyzer config document or a source generated document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Gets the additional document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Gets the analyzer config document in this solution with the specified document ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Gets the document in this solution with the specified syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddProject(System.String,System.String,System.String)">
            <summary>
            Creates a new solution instance that includes a project with the specified language and names.
            Returns the new project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.String)">
            <summary>
            Creates a new solution instance that includes a project with the specified language and names.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectInfo)">
            <summary>
            Create a new solution instance that includes a project with the specified project information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Create a new solution instance without the project specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectAssemblyName(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the new
            assembly name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectOutputFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the output file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectOutputRefFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the reference assembly output file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectCompilationOutputInfo(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOutputInfo@)">
            <summary>
            Creates a new solution instance with the project specified updated to have the compiler output file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectDefaultNamespace(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the default namespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectName(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the project file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectCompilationOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOptions)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified compilation options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectParseOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ParseOptions)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified parse options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithHasAllInformation(Microsoft.CodeAnalysis.ProjectId,System.Boolean)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified hasAllInformation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithRunAnalyzers(Microsoft.CodeAnalysis.ProjectId,System.Boolean)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified runAnalyzers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectDocumentsOrder(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableList{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance with the project documents in the order by the specified document ids.
            The specified document ids must be the same as what is already in the project; no adding or removing is allowed.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="documentIds"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.ArgumentException">The number of documents specified in <paramref name="documentIds"/> is not equal to the number of documents in project <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Document specified in <paramref name="documentIds"/> does not exist in project <paramref name="projectId"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Create a new solution instance with the project specified updated to include
            the specified project reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project already references the target project.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Create a new solution instance with the project specified updated to include
            the specified project references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="projectReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project already references the target project.</exception>
            <exception cref="T:System.InvalidOperationException">Adding the project reference would create a circular dependency.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer
            include the specified project reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The solution does not contain <paramref name="projectId"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Create a new solution instance with the project specified updated to contain
            the specified list of project references.
            </summary>
            <param name="projectId">Id of the project whose references to replace with <paramref name="projectReferences"/>.</param>
            <param name="projectReferences">New project references.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="projectReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Create a new solution instance with the project specified updated to include the 
            specified metadata reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project already contains the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Create a new solution instance with the project specified updated to include the
            specified metadata references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="metadataReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project already contains the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer include
            the specified metadata reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project does not contain the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Create a new solution instance with the project specified updated to include only the
            specified metadata references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="metadataReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Create a new solution instance with the project specified updated to include the 
            specified analyzer reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new solution instance with the project specified updated to include the
            specified analyzer references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="analyzerReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project already contains the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer include
            the specified analyzer reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The project does not contain the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithProjectAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new solution instance with the project specified updated to include only the
            specified analyzer references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="projectId"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="analyzerReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain <paramref name="projectId"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Create a new solution instance updated to include the specified analyzer reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReference"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new solution instance updated to include the specified analyzer references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="analyzerReferences"/> contains duplicate items.</exception>
            <exception cref="T:System.InvalidOperationException">The solution already contains the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer include
            the specified analyzer reference.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The solution does not contain the specified reference.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Creates a new solution instance with the specified analyzer references.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="analyzerReferences"/> contains <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="analyzerReferences"/> contains duplicate items.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new solution instance with the corresponding project updated to include a new
            document instance defined by its name and text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Creates a new solution instance with the corresponding project updated to include a new
            document instance defined by its name and text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the corresponding project updated to include a new
            document instance defined by its name and root <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.TextLoader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new solution instance with the project updated to include a new document with
            the arguments specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Create a new solution instance with the corresponding project updated to include a new 
            document instanced defined by the document info.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentInfo})">
            <summary>
            Create a new <see cref="T:Microsoft.CodeAnalysis.Solution"/> instance with the corresponding <see cref="T:Microsoft.CodeAnalysis.Project"/>s updated to include
            the documents specified by <paramref name="documentInfos"/>.
            </summary>
            <returns>A new <see cref="T:Microsoft.CodeAnalysis.Solution"/> with the documents added.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new solution instance with the corresponding project updated to include a new
            additional document instance defined by its name and text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new solution instance with the corresponding project updated to include a new
            additional document instance defined by its name and text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new solution instance with the corresponding project updated to include a new
            analyzer config document instance defined by its name and text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.AddAnalyzerConfigDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentInfo})">
            <summary>
            Creates a new Solution instance that contains a new compiler configuration document like a .editorconfig file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Creates a new solution instance that no longer includes the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance that no longer includes the specified documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Creates a new solution instance that no longer includes the specified additional document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveAdditionalDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance that no longer includes the specified additional documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Creates a new solution instance that no longer includes the specified <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigDocument"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.RemoveAnalyzerConfigDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance that no longer includes the specified <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigDocument"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentName(Microsoft.CodeAnalysis.DocumentId,System.String)">
            <summary>
            Creates a new solution instance with the document specified updated to have the new name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentFolders(Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new solution instance with the document specified updated to be contained in
            the sequence of logical folders.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentFilePath(Microsoft.CodeAnalysis.DocumentId,System.String)">
            <summary>
            Creates a new solution instance with the document specified updated to have the specified file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have the text
            specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the additional document specified updated to have the text
            specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAnalyzerConfigDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the analyzer config document specified updated to have the text
            supplied by the text loader.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have the text
            and version specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the additional document specified updated to have the text
            and version specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAnalyzerConfigDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the analyzer config document specified updated to have the text
            and version specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentSyntaxRoot(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have a syntax tree
            rooted by the specified syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentSourceCodeKind(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SourceCodeKind)">
            <summary>
            Creates a new solution instance with the document specified updated to have the source
            code kind specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have the text
            supplied by the text loader.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the additional document specified updated to have the text
            supplied by the text loader.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithAnalyzerConfigDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the analyzer config document specified updated to have the text
            supplied by the text loader.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithFrozenPartialCompilationIncludingSpecificDocument(Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Creates a branch of the solution that has its compilations frozen in whatever state they are in at the time, assuming a background compiler is
            busy building this compilations.
            
            A compilation for the project containing the specified document id will be guaranteed to exist with at least the syntax tree for the document.
            
            This not intended to be the public API, use Document.WithFrozenPartialSemantics() instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetIsolatedSolution">
            <summary>
            Formerly, returned a copy of the solution isolated from the original so that they do not share computed state. It now does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithDocumentText(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with all the documents specified updated to have the same specified text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithFrozenSourceGeneratedDocument(Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Returns a new Solution that will always produce a specific output for a generated file. This is used only in the
            implementation of <see cref="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.CodeAnalysis.Text.SourceText)"/> where if a user has a source
            generated file open, we need to make sure everything lines up.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetChanges(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Gets an objects that lists the added, changed and removed projects between
            this solution and the specified solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetDocumentIdsWithFilePath(System.String)">
            <summary>
            Gets the set of <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s in this <see cref="T:Microsoft.CodeAnalysis.Solution"/> with a
            <see cref="P:Microsoft.CodeAnalysis.TextDocument.FilePath"/> that matches the given file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.GetProjectDependencyGraph">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.ProjectDependencyGraph"/> that details the dependencies between projects for this solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.Options">
            <summary>
            Returns the options that should be applied to this solution. This is equivalent to <see cref="P:Microsoft.CodeAnalysis.Workspace.Options" /> when the <see cref="T:Microsoft.CodeAnalysis.Solution"/> 
            instance was created.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Solution.AnalyzerReferences">
            <summary>
            Analyzer references associated with the solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithOptions(Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Creates a new solution instance with the specified <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.WithOptions(Microsoft.CodeAnalysis.Options.SerializableOptionSet)">
            <summary>
            Creates a new solution instance with the specified serializable <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.CheckCircularProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyCollection{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Throws if setting the project references of project <paramref name="projectId"/> to specified <paramref name="projectReferences"/>
            would form a cycle in project dependency graph.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Solution.CheckSubmissionProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference},System.Boolean)">
            <summary>
            Throws if setting the project references of project <paramref name="projectId"/> to specified <paramref name="projectReferences"/>
            would form an invalid submission project chain.
            
            Submission projects can reference at most one other submission project. Regular projects can't reference any.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionId">
            <summary>
            An identifier that can be used to refer to the same Solution across versions. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionId.Id">
            <summary>
            The unique id of the solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionId.CreateNewId(System.String)">
            <summary>
            Create a new Solution Id
            </summary>
            <param name="debugName">An optional name to make this id easier to recognize while debugging.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionInfo">
            <summary>
            A class that represents all the arguments necessary to create a new solution instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.Id">
            <summary>
            The unique Id of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.Version">
            <summary>
            The version of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.FilePath">
            <summary>
            The path to the solution file, or null if there is no solution file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.Projects">
            <summary>
            A list of projects initially associated with the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.AnalyzerReferences">
            <summary>
            The analyzers initially associated with this solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionInfo.Create(Microsoft.CodeAnalysis.SolutionId,Microsoft.CodeAnalysis.VersionStamp,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectInfo})">
            <summary>
            Create a new instance of a SolutionInfo.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionInfo.Create(Microsoft.CodeAnalysis.SolutionId,Microsoft.CodeAnalysis.VersionStamp,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectInfo},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new instance of a SolutionInfo.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionInfo.SolutionAttributes">
            <summary>
            type that contains information regarding this solution itself but
            no tree information such as project info
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.SolutionAttributes.Id">
            <summary>
            The unique Id of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.SolutionAttributes.Version">
            <summary>
            The version of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.SolutionAttributes.FilePath">
            <summary>
            The path to the solution file, or null if there is no solution file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionInfo.SolutionAttributes.TelemetryId">
            <summary>
            The id report during telemetry events.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionServices">
            <summary>
            This class basically holds onto a set of services and gets reused across solution instances.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState">
             <summary>
             Represents a set of projects and their source code documents.
            
             this is a green node of Solution like ProjectState/DocumentState are for
             Project and Document.
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction">
            <summary>
            Represents a change that needs to be made to a <see cref="T:Microsoft.CodeAnalysis.Compilation"/>, <see cref="T:Microsoft.CodeAnalysis.GeneratorDriver"/>, or both in response to
            some user edit.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction.CanUpdateCompilationWithStaleGeneratedTreesIfGeneratorsGiveSameOutput">
            <summary>
            Whether or not <see cref="M:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction.TransformCompilationAsync(Microsoft.CodeAnalysis.Compilation,System.Threading.CancellationToken)" /> can be called on Compilations that may contain
            generated documents.
            </summary>
            <remarks>
            Most translation actions add or remove a single syntax tree which means we can do the "same" change
            to a compilation that contains the generated files and one that doesn't; however some translation actions
            (like <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction.ReplaceAllSyntaxTreesAction"/>) will unilaterally remove all trees, and would have unexpected
            side effects. This opts those out of operating on ones with generated documents where there would be side effects.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction.TryMergeWithPrior(Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction)">
            <summary>
            When changes are made to a solution, we make a list of translation actions. If multiple similar changes happen in rapid
            succession, we may be able to merge them without holding onto intermediate state.
            </summary>
            <param name="priorAction">The action prior to this one. May be a different type.</param>
            <returns>A non-null <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction" /> if we could create a merged one, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker">
            <summary>
            Tracks the changes made to a project and provides the facility to get a lazily built
            compilation for that project.  As the compilation is being built, the partial results are
            stored as well so that they can be used in the 'in progress' workspace snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationPair">
            <summary>
            When we're working with compilations, we often have two: a compilation that does not contain generated files
            (which we might need later to run generators again), and one that has the stale generated files that we might
            be able to reuse as well. In those cases we have to do the same transformations to both, and this gives us
            a handy way to do precisely that while not forking compilations twice if there are no generated files anywhere.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo.Documents">
            <summary>
            The best generated documents we have for the current state. <see cref="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo.DocumentsAreFinal"/>
            specifies whether the documents are to be considered final and can be reused, or whether they're from
            a prior snapshot which needs to be recomputed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo.Driver">
            <summary>
            The <see cref="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GeneratorDriver"/> that was used for the last run, to allow for incremental reuse. May
            be null if we don't have generators in the first place, haven't ran generators yet for this project,
            or had to get rid of our driver for some reason.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo.DocumentsAreFinal">
            <summary>
            Whether the generated documents in <see cref="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo.Documents"/> are final and should not be regenerated. 
            It's important that once we've ran generators once we don't want to run them again. Once we've ran
            them the first time, those syntax trees are visible from other parts of the Workspaces model; if we
            run them a second time we'd end up with new trees which would confuse our snapshot model -- once the
            tree has been handed out we can't make a second tree later.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo.DocumentsAreFinalAndFrozen">
            <summary>
            Whether the generated documents are frozen and generators should never be ran again, ever, even if a document
            is later changed. This is used to ensure that when we produce a frozen solution for partial semantics,
            further downstream forking of that solution won't rerun generators. This is because of two reasons:
            <list type="number">
            <item>Generally once we've produced a frozen solution with partial semantics, we now want speed rather
            than accuracy; a generator running in a later path will still cause issues there.</item>
            <item>The frozen solution with partial semantics makes no guarantee that other syntax trees exist or
            whether we even have references -- it's pretty likely that running a generator might produce worse results
            than what we originally had.</item>
            </list>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState">
            <summary>
            The base type of all <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker"/> states. The state of a <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker" />
            starts at <see cref="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.Empty"/>, and then will progress through the other states until it finally reaches
            <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState" />.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.Empty">
            <summary>
            The base <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState"/> that starts with everything empty.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.CompilationWithoutGeneratedDocuments">
            <summary>
            The best compilation that is available that source generators have not ran on. May be an
            in-progress, full declaration,  a final compilation, or <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.HasSuccessfullyLoaded">
            <summary>
            Specifies whether <see cref="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.FinalCompilationWithGeneratedDocuments"/> and all compilations it depends on contain full information or not. This can return
            <see langword="null"/> if the state isn't at the point where it would know, and it's necessary to transition to <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState"/> to figure that out.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.FinalCompilationWithGeneratedDocuments">
            <summary>
            The final compilation is potentially available, otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.NoCompilationState">
            <summary>
            State used when we potentially have some information (like prior generated documents)
            but no compilation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.InProgressState">
            <summary>
            A state where we are holding onto a previously built compilation, and have a known set of transformations
            that could get us to a more final state.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.InProgressState.IntermediateProjects">
            <summary>
            The list of changes that have happened since we last computed a compilation. The oldState corresponds to
            the state of the project prior to the mutation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.InProgressState.CompilationWithGeneratedDocuments">
            <summary>
            The result of taking the original completed compilation that had generated documents and updating them by
            apply the <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction" />; this is not a correct snapshot in that
            the generators have not been rerun, but may be reusable if the generators are later found to give the
            same output.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.AllSyntaxTreesParsedState">
            <summary>
            A built compilation for the tracker that contains the fully built DeclarationTable,
            but may not have references initialized
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState">
            <summary>
            The final state a compilation tracker reaches. The real <see cref="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState.FinalCompilationWithGeneratedDocuments"/> is available. It is a
            requirement that any <see cref="T:Microsoft.CodeAnalysis.Compilation"/> provided to any clients of the <see cref="T:Microsoft.CodeAnalysis.Solution"/>
            (for example, through <see cref="M:Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)"/> or <see
            cref="M:Microsoft.CodeAnalysis.Project.TryGetCompilation(Microsoft.CodeAnalysis.Compilation@)"/> must be from a <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState"/>.  This is because <see
            cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState"/> stores extra information in it about that compilation that the <see
            cref="T:Microsoft.CodeAnalysis.Solution"/> can be queried for (for example: <see
            cref="M:Microsoft.CodeAnalysis.Solution.GetOriginatingProject(Microsoft.CodeAnalysis.ISymbol)"/>.  If <see cref="T:Microsoft.CodeAnalysis.Compilation"/>s from other <see
            cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState"/>s are passed out, then these other APIs will not function correctly.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState.UnrootedSymbolSet">
            <summary>
            Weak set of the assembly, module and dynamic symbols that this compilation tracker has created.
            This can be used to determine which project an assembly symbol came from after the fact.  This is
            needed as the compilation an assembly came from can be GC'ed and further requests to get that
            compilation (or any of it's assemblies) may produce new assembly symbols.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState.FinalCompilationWithGeneratedDocuments">
            <summary>
            The final compilation, with all references and source generators run. This is distinct from <see
            cref="T:Microsoft.CodeAnalysis.Compilation"/>, which in the <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState"/> case will be the compilation before any
            source generators were ran. This ensures that a later invocation of the source generators consumes
            <see cref="T:Microsoft.CodeAnalysis.Compilation"/> which will avoid generators being ran a second time on a compilation that
            already contains the output of other generators. If source generators are not active, this is equal
            to <see cref="T:Microsoft.CodeAnalysis.Compilation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalState.Create(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Compilation,System.Boolean,Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo,Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.ProjectId})">
            <param name="finalCompilation">Not held onto</param>
            <param name="projectId">Not held onto</param>
            <param name="metadataReferenceToProjectId">Not held onto</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.CompilationTracker._stateDoNotAccessDirectly">
            <summary>
            Access via the <see cref="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.ReadState"/> and <see cref="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.WriteState(Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerState,Microsoft.CodeAnalysis.SolutionServices)"/> methods.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.#ctor(Microsoft.CodeAnalysis.ProjectState)">
            <summary>
            Creates a tracker for the provided project.  The tracker will be in the 'empty' state
            and will have no extra information beyond the project itself.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.Fork(Microsoft.CodeAnalysis.SolutionServices,Microsoft.CodeAnalysis.ProjectState,Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of the compilation info, retaining any already built
            compilation state as the now 'old' state
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetPartialCompilationState(Microsoft.CodeAnalysis.SolutionState,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.ProjectState@,Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationPair@,Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo@,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.ProjectId}@,System.Threading.CancellationToken)">
            <summary>
            Tries to get the latest snapshot of the compilation without waiting for it to be
            fully built. This method takes advantage of the progress side-effect produced during
            <see cref="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState,System.Threading.CancellationToken)"/>.
            It will either return the already built compilation, any
            in-progress compilation or any known old compilation in that order of preference.
            The compilation state that is returned will have a compilation that is retained so
            that it cannot disappear.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.TryGetCompilation(Microsoft.CodeAnalysis.Compilation@)">
            <summary>
            Gets the final compilation if it is available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState,System.Threading.CancellationToken)">
            <summary>
            Builds the compilation matching the project state. In the process of building, also
            produce in progress snapshots that can be accessed from other threads.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalizeCompilationAsync(Microsoft.CodeAnalysis.SolutionState,Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationTrackerGeneratorInfo,Microsoft.CodeAnalysis.Compilation,System.Threading.CancellationToken)">
            <summary>
            Add all appropriate references to the compilation and set it as our final compilation
            state.
            </summary>
            <param name="generatorInfo">The generator info that contains the last run of the documents, if any exists, as
            well as the driver that can be used to run if need to.</param>
            <param name="compilationWithStaleGeneratedTrees">The compilation from a prior run that contains generated trees, which
            match the states included in <paramref name="generatorInfo"/>. If a generator run here produces
            the same set of generated documents as are in <paramref name="generatorInfo"/>, and we don't need to make any other
            changes to references, we can then use this compilation instead of re-adding source generated files again to the
            <paramref name="compilationWithoutGenerators"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetPartialMetadataReference(Microsoft.CodeAnalysis.ProjectState,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Attempts to get (without waiting) a metadata reference to a possibly in progress
            compilation. Only actual compilation references are returned. Could potentially 
            return null if nothing can be provided.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState._lazyProjectChecksums">
            <summary>
            Mapping from project-id to the checksums needed to synchronize it (and the projects it depends on) over 
            to an OOP host.  Lock this specific field before reading/writing to it.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState._unrootedSymbolToProjectId">
            <summary>
            Cache we use to map between unrooted symbols (i.e. assembly, module and dynamic symbols) and the project
            they came from.  That way if we are asked about many symbols from the same assembly/module we can answer the
            question quickly after computing for the first one.  Created on demand.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.BranchId">
             <summary>
             branch id of this solution
            
             currently, it only supports one level of branching. there is a primary branch of a workspace and all other
             branches that are branched from the primary branch.
            
             one still can create multiple forked solutions from an already branched solution, but versions among those
             can't be reliably used and compared.
            
             version only has a meaning between primary solution and branched one or between solutions from same branch.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.Workspace">
            <summary>
            The Workspace this solution is associated with.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.Id">
            <summary>
            The Id of the solution. Multiple solution instances may share the same Id.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.FilePath">
            <summary>
            The path to the solution file or null if there is no solution file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.Version">
            <summary>
            The solution version. This equates to the solution file's version.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionState.ProjectIds">
            <summary>
            A list of all the ids for all the projects contained by the solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetLatestProjectVersion">
            <summary>
            The version of the most recently modified project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ContainsProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            True if the solution contains a project with the specified project ID.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the solution contains the document in one of its projects
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the solution contains the additional document in one of its projects
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ContainsAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            True if the solution contains the analyzer config document in one of its projects
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetProjectState(Microsoft.CodeAnalysis.IAssemblySymbol)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Project"/> associated with an assembly symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.AddProject(Microsoft.CodeAnalysis.ProjectInfo)">
            <summary>
            Create a new solution instance that includes a project with the specified project information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.RemoveProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Create a new solution instance without the project specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectAssemblyName(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the new
            assembly name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectOutputFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the output file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectOutputRefFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the output file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectCompilationOutputInfo(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOutputInfo@)">
            <summary>
            Creates a new solution instance with the project specified updated to have the compiler output file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectDefaultNamespace(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the default namespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectName(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Creates a new solution instance with the project specified updated to have the project file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectCompilationOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOptions)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified compilation options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectParseOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ParseOptions)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified parse options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithHasAllInformation(Microsoft.CodeAnalysis.ProjectId,System.Boolean)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified hasAllInformation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithRunAnalyzers(Microsoft.CodeAnalysis.ProjectId,System.Boolean)">
            <summary>
            Create a new solution instance with the project specified updated to have
            the specified runAnalyzers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyCollection{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Create a new solution instance with the project specified updated to include
            the specified project references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer
            include the specified project reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectReference})">
            <summary>
            Create a new solution instance with the project specified updated to contain
            the specified list of project references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectDocumentsOrder(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableList{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance with the project documents in the order by the specified document ids.
            The specified document ids must be the same as what is already in the project; no adding or removing is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.AddMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyCollection{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Create a new solution instance with the project specified updated to include the
            specified metadata references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.RemoveMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer include
            the specified metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Create a new solution instance with the project specified updated to include only the
            specified metadata references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.AddAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new solution instance with the project specified updated to include the
            specified analyzer references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.RemoveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Create a new solution instance with the project specified updated to no longer include
            the specified analyzer reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithProjectAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new solution instance with the project specified updated to include only the
            specified analyzer references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.AddDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentInfo})">
            <summary>
            Create a new solution instance with the corresponding projects updated to include new
            documents defined by the document info.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.AddDocumentsToMultipleProjects``1(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentInfo},System.Func{Microsoft.CodeAnalysis.DocumentInfo,Microsoft.CodeAnalysis.ProjectState,``0},System.Func{Microsoft.CodeAnalysis.ProjectState,System.Collections.Immutable.ImmutableArray{``0},System.ValueTuple{Microsoft.CodeAnalysis.ProjectState,Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction}})">
            <summary>
            Core helper that takes a set of <see cref="T:Microsoft.CodeAnalysis.DocumentInfo" />s and does the application of the appropriate documents to each project.
            </summary>
            <param name="documentInfos">The set of documents to add.</param>
            <param name="addDocumentsToProjectState">Returns the new <see cref="T:Microsoft.CodeAnalysis.ProjectState"/> with the documents added, and the <see cref="T:Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction"/> needed as well.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.RemoveDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance that no longer includes the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.RemoveAdditionalDocuments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Creates a new solution instance that no longer includes the specified additional documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentName(Microsoft.CodeAnalysis.DocumentId,System.String)">
            <summary>
            Creates a new solution instance with the document specified updated to have the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentFolders(Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Creates a new solution instance with the document specified updated to be contained in
            the sequence of logical folders.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentFilePath(Microsoft.CodeAnalysis.DocumentId,System.String)">
            <summary>
            Creates a new solution instance with the document specified updated to have the specified file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have the text
            specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the additional document specified updated to have the text
            specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithAnalyzerConfigDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have the text
            specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have the text
            and version specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the additional document specified updated to have the text
            and version specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithAnalyzerConfigDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the analyzer config document specified updated to have the text
            and version specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentSyntaxRoot(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the document specified updated to have a syntax tree
            rooted by the specified syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentSourceCodeKind(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SourceCodeKind)">
            <summary>
            Creates a new solution instance with the document specified updated to have the source
            code kind specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.UpdateAdditionalDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the additional document specified updated to have the text
            supplied by the text loader.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.UpdateAnalyzerConfigDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with the analyzer config document specified updated to have the text
            supplied by the text loader.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ForkProject(Microsoft.CodeAnalysis.ProjectState,Microsoft.CodeAnalysis.SolutionState.CompilationAndGeneratorDriverTranslationAction,Microsoft.CodeAnalysis.ProjectDependencyGraph,System.Collections.Immutable.ImmutableDictionary{System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId}},System.Boolean)">
            <summary>
            Creates a new snapshot with an updated project and an action that will produce a new
            compilation matching the new project out of an old compilation. All dependent projects
            are fixed-up if the change to the new project affects its public metadata, and old
            dependent compilations are forgotten.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetDocumentIdsWithFilePath(System.String)">
            <summary>
            Gets the set of <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s in this <see cref="T:Microsoft.CodeAnalysis.Solution"/> with a
            <see cref="P:Microsoft.CodeAnalysis.TextDocument.FilePath"/> that matches the given file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithFrozenPartialCompilationIncludingSpecificDocument(Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
             <summary>
             Creates a branch of the solution that has its compilations frozen in whatever state they are in at the time, assuming a background compiler is
             busy building this compilations.
            
             A compilation for the project containing the specified document id will be guaranteed to exist with at least the syntax tree for the document.
            
             This not intended to be the public API, use Document.WithFrozenPartialSemantics() instead.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithDocumentText(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Creates a new solution instance with all the documents specified updated to have the same specified text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetCompilationAsync(Microsoft.CodeAnalysis.ProjectId,System.Threading.CancellationToken)">
            <summary>
            Returns the compilation for the specified <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>.  Can return <see langword="null"/> when the project
            does not support compilations.
            </summary>
            <remarks>
            The compilation is guaranteed to have a syntax tree for each document of the project.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetCompilationAsync(Microsoft.CodeAnalysis.ProjectState,System.Threading.CancellationToken)">
            <summary>
            Returns the compilation for the specified <see cref="T:Microsoft.CodeAnalysis.ProjectState"/>.  Can return <see langword="null"/> when the project
            does not support compilations.
            </summary>
            <remarks>
            The compilation is guaranteed to have a syntax tree for each document of the project.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.HasSuccessfullyLoadedAsync(Microsoft.CodeAnalysis.ProjectState,System.Threading.CancellationToken)">
            <summary>
            Return reference completeness for the given project and all projects this references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetSourceGeneratedDocumentStatesAsync(Microsoft.CodeAnalysis.ProjectState,System.Threading.CancellationToken)">
            <summary>
            Returns the generated document states for source generated documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.TryGetSourceGeneratedDocumentStateForAlreadyGeneratedId(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.SourceGeneratedDocumentState"/> for a source generated document that has already been generated and observed.
            </summary>
            <remarks>
            This is only safe to call if you already have seen the SyntaxTree or equivalent that indicates the document state has already been
            generated. This method exists to implement <see cref="M:Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)"/> and is best avoided unless you're doing something
            similarly tricky like that.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.WithFrozenSourceGeneratedDocument(Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Returns a new SolutionState that will always produce a specific output for a generated file. This is used only in the
            implementation of <see cref="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.CodeAnalysis.Text.SourceText)"/> where if a user has a source
            generated file open, we need to make sure everything lines up.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.s_assemblyOrModuleSymbolToProjectMap">
            <summary>
            Symbols need to be either <see cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/> or <see cref="T:Microsoft.CodeAnalysis.IModuleSymbol"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetMetadataReferenceAsync(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectState,System.Threading.CancellationToken)">
            <summary>
            Get a metadata reference for the project's compilation.  Returns <see langword="null"/> upon failure, which 
            can happen when trying to build a skeleton reference that fails to build.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetMetadataReferenceAsync(Microsoft.CodeAnalysis.SolutionState.ICompilationTracker,Microsoft.CodeAnalysis.ProjectState,Microsoft.CodeAnalysis.ProjectReference,System.Threading.CancellationToken)">
            <summary>
            Get a metadata reference to this compilation info's compilation with respect to
            another project. For cross language references produce a skeletal assembly. If the
            compilation is not available, it is built. If a skeletal assembly reference is
            needed and does not exist, it is also built.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetPartialMetadataReference(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectState)">
            <summary>
            Attempt to get the best readily available compilation for the project. It may be a
            partially built compilation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetProjectDependencyGraph">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.ProjectDependencyGraph"/> that details the dependencies between projects for this solution.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.GeneratedFileReplacingCompilationTracker">
            <summary>
            An implementation of <see cref="T:Microsoft.CodeAnalysis.SolutionState.ICompilationTracker"/> that takes a compilation from another compilation tracker and updates it
            to return a generated document with a specific content, regardless of what the generator actually produces. In other words, it says
            "take the compilation this other thing produced, and pretend the generator gave this content, even if it wouldn't."
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.GeneratedFileReplacingCompilationTracker._compilationWithReplacement">
            <summary>
            The lazily-produced compilation that has the generated document updated. This is initialized by call to
            <see cref="M:Microsoft.CodeAnalysis.SolutionState.GeneratedFileReplacingCompilationTracker.GetCompilationAsync(Microsoft.CodeAnalysis.SolutionState,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ICompilationTracker.ContainsAssemblyOrModuleOrDynamic(Microsoft.CodeAnalysis.ISymbol,System.Boolean)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Microsoft.CodeAnalysis.Project"/>/<see cref="T:Microsoft.CodeAnalysis.Compilation"/> could produce the
            given <paramref name="symbol"/>.  The symbol must be a <see cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/>, <see
            cref="T:Microsoft.CodeAnalysis.IModuleSymbol"/> or <see cref="T:Microsoft.CodeAnalysis.IDynamicTypeSymbol"/>.
            </summary>
            <remarks>
            If <paramref name="primary"/> is true, then <see cref="P:Microsoft.CodeAnalysis.Compilation.References"/> will not be considered
            when answering this question.  In other words, if <paramref name="symbol"/>  is an <see
            cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/> and <paramref name="primary"/> is <see langword="true"/> then this will only
            return true if the symbol is <see cref="P:Microsoft.CodeAnalysis.Compilation.Assembly"/>.  If <paramref name="primary"/> is
            false, then it can return true if <paramref name="symbol"/> is <see cref="P:Microsoft.CodeAnalysis.Compilation.Assembly"/> or any
            of the symbols returned by <see cref="M:Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)"/> for
            any of the references of the <see cref="P:Microsoft.CodeAnalysis.Compilation.References"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache">
            <summary>
            Caches the skeleton references produced for a given project/compilation under the varying
            <see cref="T:Microsoft.CodeAnalysis.MetadataReferenceProperties"/> it might be referenced by.  Skeletons are used in the compilation
            tracker to allow cross-language project references with live semantic updating between VB/C# and vice versa.
            Specifically, in a cross language case we will build a skeleton ref for the referenced project and have the
            referrer use that to understand its semantics.
            <para/>
            This approach works, but has the caveat that live cross-language semantics are only possible when the 
            skeleton assembly can be built.  This should always be the case for correct code, but it may not be the
            case for code with errors depending on if the respective language compiler is resilient to those errors or not.
            In that case though where the skeleton cannot be built, this type provides mechanisms to fallback to the last
            successfully built skeleton so that a somewhat reasonable experience can be maintained.  If we failed to do this
            and instead returned nothing, a user would find that practically all semantic experiences that depended on
            that particular project would fail or be seriously degraded (e.g. diagnostics).  To that end, it's better to
            limp along with stale date, then barrel on ahead with no data.
            <para/>
            The implementation works by keeping metadata references around associated with a specific <see cref="T:Microsoft.CodeAnalysis.VersionStamp"/>
            for a project. As long as the <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)"/> for that project
            is the same, then all the references of it can be reused.  When an <see cref="T:Microsoft.CodeAnalysis.SolutionState.ICompilationTracker"/> forks
            itself, it  will also <see cref="M:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache.Clone"/> this, allowing previously computed references to be used by later forks.
            However, this means that later forks (esp. ones that fail to produce a skeleton, or which produce a skeleton for 
            different semantics) will not leak backward to a prior <see cref="T:Microsoft.CodeAnalysis.ProjectState"/>, causing it to see a view of the world
            inapplicable to its current snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._emitGate">
            <summary>
            Lock we take before emitting metadata.  Metadata emit is extremely expensive.  So we want to avoid cases
            where N threads come in and try to get the skeleton for a particular project.  This way they will instead
            yield if something else is computing and will then use the single instance computed once one thread succeeds.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._stateGate">
            <summary>
            Lock around <see cref="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._version"/> and <see cref="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._skeletonReferenceSet"/> to ensure they are updated/read 
            in an atomic fashion.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._version">
            <summary>
            The <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)"/> version of the project that the
            <see cref="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._skeletonReferenceSet"/> corresponds to.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache._skeletonReferenceSet">
            <summary>
            Mapping from metadata-reference-properties to the actual metadata reference for them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache.Clone">
            <summary>
            Produces a copy of the <see cref="T:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache"/>, allowing forks of <see cref="T:Microsoft.CodeAnalysis.ProjectState"/> to
            reuse <see cref="T:Microsoft.CodeAnalysis.MetadataReference"/>s when their dependent semantic version matches ours.  In the case where
            the version is different, then the clone will attempt to make a new skeleton reference for that version.  If it
            succeeds, it will use that.  If it fails however, it can still use our skeletons.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache.SkeletonReferenceSet.s_lifetime">
            <summary>
            A map to ensure that the streams from the temporary storage service that back the metadata we create stay alive as long
            as the metadata is alive.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache.SkeletonReferenceSet._documentationProvider">
            <summary>
            The documentation provider used to lookup xml docs for any metadata reference we pass out.  See
            docs on <see cref="T:Microsoft.CodeAnalysis.DeferredDocumentationProvider"/> for why this is safe to hold onto despite it
            rooting a compilation internally.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.SkeletonReferenceCache.SkeletonReferenceSet._metadataReferences">
            <summary>
            Use WeakReference so we don't keep MetadataReference's alive if they are not being consumed. 
            Note: if the weak-reference is actually <see langword="null"/> (not that it points to null),
            that means we know we were unable to generate a reference for those properties, and future
            calls can early exit.
            </summary>
            <remarks>
            This instance should be locked when being read/written.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetOriginatingProjectId(Microsoft.CodeAnalysis.ISymbol)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Solution.GetOriginatingProjectId(Microsoft.CodeAnalysis.ISymbol)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionState.UnrootedSymbolSet">
            <summary>
            A helper type for mapping <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> back to an originating <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            </summary>
            <remarks>
            In IDE scenarios we have the need to map from an <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> to the <see cref="T:Microsoft.CodeAnalysis.Project"/> that
            contained a <see cref="T:Microsoft.CodeAnalysis.Compilation"/> that could have produced that symbol.  This is especially needed with
            OOP scenarios where we have to communicate to OOP from VS (And vice versa) what symbol we are referring to.
            To do this, we pass along a project where this symbol could be found, and enough information (a <see
            cref="T:Microsoft.CodeAnalysis.SymbolKey"/>) to resolve that symbol back in that that <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            <para>
            This is challenging however as symbols do not necessarily have back-pointers to <see cref="T:Microsoft.CodeAnalysis.Compilation"/>s,
            and as such, we can't just see which Project produced the <see cref="T:Microsoft.CodeAnalysis.Compilation"/> that produced that <see
            cref="T:Microsoft.CodeAnalysis.ISymbol"/>.  In other words, the <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> doesn't <c>root</c> the compilation.  Because
            of that we keep track of those symbols per project in a <em>weak</em> fashion.  Then, we can later see if a
            symbol came from a particular project by checking if it is one of those weak symbols.  We use weakly held
            symbols to that a <see cref="T:Microsoft.CodeAnalysis.ProjectState"/> instance doesn't hold symbols alive.  But, we know if we are
            holding the symbol itself, then the weak-ref will stay alive such that we can do this containment check.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.UnrootedSymbolSet.PrimaryAssemblySymbol">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/> produced directly by <see cref="P:Microsoft.CodeAnalysis.Compilation.Assembly"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.UnrootedSymbolSet.PrimaryDynamicSymbol">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.IDynamicTypeSymbol"/> produced directly by <see cref="P:Microsoft.CodeAnalysis.Compilation.DynamicType"/>.  Only
            valid for <see cref="F:Microsoft.CodeAnalysis.LanguageNames.CSharp"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionState.UnrootedSymbolSet.SecondaryReferencedSymbols">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/>s or <see cref="T:Microsoft.CodeAnalysis.IModuleSymbol"/>s produced through <see
            cref="M:Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)"/> for all the references exposed by <see
            cref="P:Microsoft.CodeAnalysis.Compilation.References"/>.  Sorted by the hash code produced by <see
            cref="M:Roslyn.Utilities.ReferenceEqualityComparer.GetHashCode(System.Object)"/> so that it can be binary searched efficiently.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetStateChecksumsAsync(Microsoft.CodeAnalysis.ProjectId,System.Threading.CancellationToken)">
            <summary>Gets the checksum for only the requested project (and any project it depends on)</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.GetChecksumAsync(Microsoft.CodeAnalysis.ProjectId,System.Threading.CancellationToken)">
            <summary>Gets the checksum for only the requested project (and any project it depends on)</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionState.ComputeChecksumsAsync(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.ProjectId},Microsoft.CodeAnalysis.Options.SerializableOptionSet,System.Threading.CancellationToken)">
            <param name="projectsToInclude">Cone of projects to compute a checksum for.  Pass in <see langword="null"/>
            to get a checksum for the entire solution</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SourceGeneratedDocument">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Document"/> that was generated by an <see cref="T:Microsoft.CodeAnalysis.ISourceGenerator" />.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity">
            <summary>
            A small struct that holds the values that define the identity of a source generated document, and don't change
            as new generations happen. This is mostly for convenience as we are reguarly working with this combination of values.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TextAndVersion">
            <summary>
            A class that represents both a source text and its version stamp.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextAndVersion.Text">
            <summary>
            The source text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextAndVersion.Version">
            <summary>
            The version of the source text
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextAndVersion.FilePath">
            <summary>
            An optional file path that identifies the origin of the source text. Empty if not available.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextAndVersion.LoadDiagnostic">
            <summary>
            If an error occurred while loading the text the corresponding diagnostic, otherwise null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextAndVersion.Create(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.VersionStamp,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.CodeAnalysis.TextAndVersion"/> instance.
            </summary>
            <param name="text">The text</param>
            <param name="version">The version</param>
            <param name="filePath">An optional file path that identifies the original of the source text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextAndVersion.Create(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.VersionStamp,System.String,Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Create a new <see cref="T:Microsoft.CodeAnalysis.TextAndVersion"/> instance.
            </summary>
            <param name="text">The text</param>
            <param name="version">The version</param>
            <param name="filePath">An optional file path that identifies the original of the source text.</param>
            <param name="loadDiagnostic">Diagnostic describing failure to load the source text.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TextDifferenceTypes">
            <summary>
            A bitwise combination of the enumeration values to use when computing differences with 
            <see cref="T:Microsoft.CodeAnalysis.IDocumentTextDifferencingService" />. 
            </summary>
            <remarks>
            Since computing differences can be slow with large data sets, you should not use the Character type
            unless the given text is relatively small.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDifferenceTypes.Line">
            <summary>
            Compute the line difference.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDifferenceTypes.Word">
            <summary>
            Compute the word difference.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDifferenceTypes.Character">
            <summary>
            Compute the character difference.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocument.Project">
            <summary>
            The project this document belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocument.Id">
            <summary>
            The document's identifier. Many document instances may share the same ID, but only one
            document in a solution may have that ID.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocument.FilePath">
            <summary>
            The path to the document file or null if there is no document file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocument.Name">
            <summary>
            The name of the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocument.Folders">
            <summary>
            The sequence of logical folders the document is contained in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocument.Services">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Host.IDocumentServiceProvider"/> associated with this document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)">
            <summary>
            Get the current text for the document if it is already loaded and available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.TryGetTextVersion(Microsoft.CodeAnalysis.VersionStamp@)">
            <summary>
            Gets the version of the document's text if it is already loaded and available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.GetTextAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current text for the document asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.GetTextSynchronously(System.Threading.CancellationToken)">
            <summary>
            Fetches the current text for the document synchronously.
            </summary>
            <remarks>This is internal for the same reason <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxTreeSynchronously(System.Threading.CancellationToken)"/> is internal:
            we have specialized cases where we need it, but we worry that making it public will do more harm than good.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.GetTextVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the version of the document's text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.GetTextVersionSynchronously(System.Threading.CancellationToken)">
            <summary>
            Fetches the current version for the document synchronously.
            </summary>
            <remarks>This is internal for the same reason <see cref="M:Microsoft.CodeAnalysis.Document.GetSyntaxTreeSynchronously(System.Threading.CancellationToken)"/> is internal:
            we have specialized cases where we need it, but we worry that making it public will do more harm than good.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.GetTopLevelChangeTextVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the version of the document's top level signature.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.HasInfoChanged(Microsoft.CodeAnalysis.TextDocument)">
            <summary>
            True if the info of the document change (name, folders, file path; not the content).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocument.HasTextChanged(Microsoft.CodeAnalysis.TextDocument,System.Boolean)">
            <summary>
            Only checks if the source of the text has changed, no content check is done.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TextDocumentKind">
            <summary>
            Indicates kind of a <see cref="T:Microsoft.CodeAnalysis.TextDocument"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDocumentKind.Document">
            <summary>
            Indicates a regular source <see cref="T:Microsoft.CodeAnalysis.Document"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDocumentKind.AdditionalDocument">
            <summary>
            Indicates an <see cref="T:Microsoft.CodeAnalysis.AdditionalDocument"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDocumentKind.AnalyzerConfigDocument">
            <summary>
            Indicates an <see cref="T:Microsoft.CodeAnalysis.AnalyzerConfigDocument"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDocumentState.sourceText">
             <summary>
             A direct reference to our source text.  This is only kept around in specialized scenarios.
             Specifically, we keep this around when a document is opened.  By providing this we can allow
             clients to easily get to the text of the document in a non-blocking fashion if that's all
             that they need.
            
             Note: this facility does not extend to getting the version as well.  That's because the
             version of a document depends on both the current source contents and the contents from 
             the previous version of the document.  (i.e. if the contents are the same, then we will
             preserve the same version, otherwise we'll move the version forward).  Because determining
             the version depends on comparing text, and because getting the old text may block, we 
             do not have the ability to know the version of the document up front, and instead can
             only retrieve is asynchronously through <see cref="P:Microsoft.CodeAnalysis.TextDocumentState.TextAndVersionSource"/>.
             </summary> 
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocumentState.Services">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Host.IDocumentServiceProvider"/> associated with this document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocumentState.HasTextChanged(Microsoft.CodeAnalysis.TextDocumentState,System.Boolean)">
            <summary>
            Only checks if the source of the text has changed, no content check is done.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TextDocumentStates`1">
            <summary>
            Holds on a <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> to <see cref="T:Microsoft.CodeAnalysis.TextDocumentState"/> map and an ordering.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TextDocumentStates`1._map">
            <summary>
            The entries in the map are sorted by <see cref="P:Microsoft.CodeAnalysis.DocumentId.Id"/>, which yields locally deterministic order but not the order that
            matches the order in which documents were added. Therefore this ordering can't be used when creating compilations and it can't be 
            used when persisting document lists that do not preserve the GUIDs.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocumentStates`1.Ids">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s in the order in which they were added to the project (the compilation order).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TextDocumentStates`1.States">
            <summary>
            States ordered by <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocumentStates`1.GetStatesInCompilationOrder">
            <summary>
            Get states ordered in compilation order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocumentStates`1.GetChangedStateIds(Microsoft.CodeAnalysis.TextDocumentStates{`0},System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of documents whose state changed when compared to older states.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocumentStates`1.GetAddedStateIds(Microsoft.CodeAnalysis.TextDocumentStates{`0})">
            <summary>
            Returns a <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of added documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextDocumentStates`1.GetRemovedStateIds(Microsoft.CodeAnalysis.TextDocumentStates{`0})">
            <summary>
            Returns a <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of removed documents.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TextLoader">
            <summary>
            A class that represents access to a source text and its version from a storage location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextLoader.LoadTextAndVersionAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Load a text and a version of the document.
            </summary>
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextLoader.LoadTextAndVersionSynchronously(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Load a text and a version of the document in the workspace.
            </summary>
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextLoader.From(Microsoft.CodeAnalysis.TextAndVersion)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.TextLoader"/> from an already existing source text and version.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TextLoader.From(Microsoft.CodeAnalysis.Text.SourceTextContainer,Microsoft.CodeAnalysis.VersionStamp,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.TextLoader"/> from a <see cref="T:Microsoft.CodeAnalysis.Text.SourceTextContainer"/> and version. 
            
            The text obtained from the loader will be the current text of the container at the time
            the loader is accessed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TreeAndVersion">
            <summary>
            A class that represents both a tree and its top level signature version
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TreeAndVersion.Tree">
            <summary>
            The syntax tree
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TreeAndVersion.Version">
            <summary>
            The version of the top level signature of the tree
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.VersionStamp">
            <summary>
            VersionStamp should be only used to compare versions returned by same API.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.VersionStamp.s_globalVersion">
            <summary>
            global counter to avoid collision within same session. 
            it starts with a big initial number just for a clarity in debugging
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.VersionStamp._utcLastModified">
            <summary>
            time stamp
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.VersionStamp._localIncrement">
            <summary>
            indicate whether there was a collision on same item
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.VersionStamp._globalIncrement">
            <summary>
            unique version in same session
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.Create">
            <summary>
            Creates a new instance of a VersionStamp.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.Create(System.DateTime)">
            <summary>
            Creates a new instance of a version stamp based on the specified DateTime.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.GetNewerVersion(Microsoft.CodeAnalysis.VersionStamp)">
            <summary>
            compare two different versions and return either one of the versions if there is no collision, otherwise, create a new version
            that can be used later to compare versions between different items
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.GetNewerVersion">
            <summary>
            Gets a new VersionStamp that is guaranteed to be newer than its base one
            this should only be used for same item to move it to newer version
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.ToString">
            <summary>
            Returns the serialized text form of the VersionStamp.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.CanReusePersistedVersion(Microsoft.CodeAnalysis.VersionStamp,Microsoft.CodeAnalysis.VersionStamp)">
            <summary>
            Check whether given persisted version is re-usable. Used by VS for Mac
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.VersionStamp.TestAccessor.IsNewerThan(Microsoft.CodeAnalysis.VersionStamp@)">
            <summary>
            True if this VersionStamp is newer than the specified one.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetRelatedDocumentsWithChanges(Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Gets the documents from the corresponding workspace's current solution that are associated with the source text's container,
            updated to contain the same text as the source if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Gets the document from the corresponding workspace's current solution that is associated with the source text's container 
            in its current project context, updated to contain the same text as the source if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetRelatedDocuments(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Gets the documents from the corresponding workspace's current solution that are associated with the text container. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContext(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Gets the document from the corresponding workspace's current solution that is associated with the text container 
            in its current project context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.TextExtensions.GetDocumentWithFrozenPartialSemantics(Microsoft.CodeAnalysis.Text.SourceText,System.Threading.CancellationToken)">
            <summary>
            Tries to get the document corresponding to the text from the current partial solution 
            associated with the text's container. If the document does not contain the exact text a document 
            from a new solution containing the specified text is constructed. If no document is associated
            with the specified text's container, or the text's container isn't associated with a workspace,
            then the method returns false.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Text.EncodedStringText.s_utf8Encoding">
            <summary>
            Encoding to use when there is no byte order mark (BOM) on the stream. This encoder may throw a <see cref="T:System.Text.DecoderFallbackException"/>
            if the stream contains invalid UTF-8 bytes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.EncodedStringText.CreateFallbackEncoding">
            <summary>
            Encoding to use when UTF-8 fails. We try to find the following, in order, if available:
                1. The default ANSI codepage
                2. CodePage 1252.
                3. Latin1.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.EncodedStringText.Create(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> from the provided stream. This version differs
            from <see cref="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean)"/> in two ways:
            1. It attempts to minimize allocations by trying to read the stream into a byte array.
            2. If <paramref name="defaultEncoding"/> is null, it will first try UTF8 and, if that fails, it will
               try CodePage 1252. If CodePage 1252 is not available on the system, then it will try Latin1.
            </summary>
            <param name="stream">The stream containing encoded text.</param>
            <param name="defaultEncoding">
            Specifies an encoding to be used if the actual encoding can't be determined from the stream content (the stream doesn't start with Byte Order Mark).
            If not specified auto-detect heuristics are used to determine the encoding. If these heuristics fail the decoding is assumed to be Encoding.Default.
            Note that if the stream starts with Byte Order Mark the value of <paramref name="defaultEncoding"/> is ignored.
            </param>
            <param name="canBeEmbedded">Indicates if the file can be embedded in the PDB.</param>
            <param name="checksumAlgorithm">Hash algorithm used to calculate document checksum.</param>
            <exception cref="T:System.IO.InvalidDataException">
            The stream content can't be decoded using the specified <paramref name="defaultEncoding"/>, or
            <paramref name="defaultEncoding"/> is null and the stream appears to be a binary file.
            </exception>
            <exception cref="T:System.IO.IOException">An IO error occurred while reading from the stream.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.EncodedStringText.Decode(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean,System.Boolean)">
            <summary>
            Try to create a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> from the given stream using the given encoding.
            </summary>
            <param name="data">The input stream containing the encoded text. The stream will not be closed.</param>
            <param name="encoding">The expected encoding of the stream. The actual encoding used may be different if byte order marks are detected.</param>
            <param name="checksumAlgorithm">The checksum algorithm to use.</param>
            <param name="throwIfBinaryDetected">Throw <see cref="T:System.IO.InvalidDataException"/> if binary (non-text) data is detected.</param>
            <param name="canBeEmbedded">Indicates if the text can be embedded in the PDB.</param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> decoded from the stream.</returns>
            <exception cref="T:System.Text.DecoderFallbackException">The decoder was unable to decode the stream with the given encoding.</exception>
            <exception cref="T:System.IO.IOException">Error reading from stream.</exception> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.EncodedStringText.TryGetBytesFromStream(System.IO.Stream,System.ArraySegment{System.Byte}@)">
            <summary>
            Some streams are easily represented as bytes.
            </summary>
            <param name="data">The stream</param>
            <param name="bytes">The bytes, if available.</param>
            <returns>
            True if the stream's bytes could easily be read, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Text.EncodedStringText.TryGetBytesFromFileStream(System.IO.FileStream,System.ArraySegment{System.Byte}@)">
            <summary>
            Read the contents of a FileStream into a byte array.
            </summary>
            <param name="stream">The FileStream with encoded text.</param>
            <param name="bytes">A byte array filled with the contents of the file.</param>
            <returns>True if a byte array could be created.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Workspace">
            <summary>
            A workspace provides access to a active set of source code projects and documents and their
            associated syntax trees, compilations and semantic models. A workspace has a current solution
            that is an immutable snapshot of the projects and documents. This property may change over time
            as the workspace is updated either from live interactions in the environment or via call to the
            workspace's <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.IgnoreUnchangeableDocumentsWhenApplyingChanges">
            <summary>
            Determines whether changes made to unchangeable documents will be silently ignored or cause exceptions to be thrown
            when they are applied to workspace via <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker)"/>. 
            A document is unchangeable if <see cref="P:Microsoft.CodeAnalysis.Host.IDocumentOperationService.CanApplyChange"/> is false.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.#ctor(Microsoft.CodeAnalysis.Host.HostServices,System.String)">
            <summary>
            Constructs a new workspace instance.
            </summary>
            <param name="host">The <see cref="T:Microsoft.CodeAnalysis.Host.HostServices"/> this workspace uses</param>
            <param name="workspaceKind">A string that can be used to identify the kind of workspace. Usually this matches the name of the class.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.SetTestLogger(System.Action{System.String})">
            <summary>
            Sets an internal logger that will receive some messages.
            </summary>
            <param name="writeLineMessageLogger">An action called to write a single line to the log.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.Services">
            <summary>
            Services provider by the host for implementing workspace features.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.PrimaryBranchId">
            <summary>
            primary branch id that current solution has
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.PartialSemanticsEnabled">
            <summary>
            Override this property if the workspace supports partial semantics for documents.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.Kind">
            <summary>
            The kind of the workspace.
            This is generally <see cref="F:Microsoft.CodeAnalysis.WorkspaceKind.Host"/> if originating from the host environment, but may be
            any other name used for a specific kind of workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CreateSolution(Microsoft.CodeAnalysis.SolutionInfo)">
            <summary>
            Create a new empty solution instance associated with this workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CreateSolution(Microsoft.CodeAnalysis.SolutionInfo,Microsoft.CodeAnalysis.Options.SerializableOptionSet,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})">
            <summary>
            Create a new empty solution instance associated with this workspace, and with the given options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CreateSolution(Microsoft.CodeAnalysis.SolutionId)">
            <summary>
            Create a new empty solution instance associated with this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution">
             <summary>
             The current solution.
            
             The solution is an immutable model of the current set of projects and source documents.
             It provides access to source text, syntax trees and semantics.
            
             This property may change as the workspace reacts to changes in the environment or
             after <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> is called.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.SetCurrentSolution(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Sets the <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/> of this workspace. This method does not raise a <see cref="E:Microsoft.CodeAnalysis.Workspace.WorkspaceChanged"/> event.
            </summary>
            <remarks>
            This method does not guarantee that linked files will have the same contents. Callers
            should enforce that policy before passing in the new solution.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.SetCurrentSolution(System.Func{Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution},Microsoft.CodeAnalysis.WorkspaceChangeKind,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Applies specified transformation to <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/>, updates <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/> to the new value and raises a workspace change event of the specified kind.
            </summary>
            <param name="transformation">Solution transformation.</param>
            <param name="kind">The kind of workspace change event to raise.</param>
            <param name="projectId">The id of the project updated by <paramref name="transformation"/> to be passed to the workspace change event.</param>
            <param name="documentId">The id of the document updated by <paramref name="transformation"/> to be passed to the workspace change event.</param>
            <returns>True if <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/> was set to the transformed solution, false if the transformation did not change the solution.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.Options">
            <summary>
            Gets or sets the set of all global options and <see cref="P:Microsoft.CodeAnalysis.Solution.Options"/>.
            Setter also force updates the <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/> to have the updated <see cref="P:Microsoft.CodeAnalysis.Solution.Options"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.SetOptions(Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Sets global options and <see cref="P:Microsoft.CodeAnalysis.Workspace.Options"/> to have the new options.
            NOTE: This method also updates <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/> to a new solution instance with updated <see cref="P:Microsoft.CodeAnalysis.Solution.Options"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ScheduleTask(System.Action,System.String)">
            <summary>
            Executes an action as a background task, as part of a sequential queue of tasks.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ScheduleTask``1(System.Func{``0},System.String)">
            <summary>
            Execute a function as a background task, as part of a sequential queue of tasks.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentTextChanged(Microsoft.CodeAnalysis.Document)">
            <summary>
            Override this method to act immediately when the text of a document has changed, as opposed
            to waiting for the corresponding workspace changed event to fire asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentClosing(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Override this method to act immediately when a document is closing, as opposed
            to waiting for the corresponding workspace changed event to fire asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ClearSolution">
            <summary>
            Clears all solution data and empties the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ClearSolutionData">
             <summary>
             This method is called when a solution is cleared.
            
             Override this method if you want to do additional work when a solution is cleared.
             Call the base method at the end of your method.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ClearProjectData(Microsoft.CodeAnalysis.ProjectId)">
             <summary>
             This method is called when an individual project is removed.
            
             Override this method if you want to do additional work when a project is removed.
             Call the base method at the end of your method.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ClearDocumentData(Microsoft.CodeAnalysis.DocumentId)">
             <summary>
             This method is called to clear an individual document is removed.
            
             Override this method if you want to do additional work when a document is removed.
             Call the base method at the end of your method.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.Dispose">
            <summary>
            Disposes this workspace. The workspace can longer be used after it is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.Dispose(System.Boolean)">
             <summary>
             Call this method when the workspace is disposed.
            
             Override this method to do additional work when the workspace is disposed.
             Call this method at the end of your method.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnSolutionAdded(Microsoft.CodeAnalysis.SolutionInfo)">
            <summary>
            Call this method to respond to a solution being opened in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnSolutionReloaded(Microsoft.CodeAnalysis.SolutionInfo)">
            <summary>
            Call this method to respond to a solution being reloaded in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnSolutionRemoved">
             <summary>
             This method is called when the solution is removed from the workspace.
            
             Override this method if you want to do additional work when the solution is removed.
             Call the base method at the end of your method.
             Call this method to respond to a solution being removed/cleared/closed in the host environment.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnProjectAdded(Microsoft.CodeAnalysis.ProjectInfo)">
            <summary>
            Call this method to respond to a project being added/opened in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnProjectReloaded(Microsoft.CodeAnalysis.ProjectInfo)">
            <summary>
            Call this method to respond to a project being reloaded in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Call this method to respond to a project being removed from the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectCanBeRemoved(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Currently projects can always be removed, but this method still exists because it's protected and we don't
            want to break people who may have derived from <see cref="T:Microsoft.CodeAnalysis.Workspace"/> and either called it, or overridden it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAssemblyNameChanged(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Call this method when a project's assembly name is changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnOutputFilePathChanged(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Call this method when a project's output file path is changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnOutputRefFilePathChanged(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Call this method when a project's output ref file path is changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnProjectNameChanged(Microsoft.CodeAnalysis.ProjectId,System.String,System.String)">
            <summary>
            Call this method when a project's name is changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDefaultNamespaceChanged(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Call this method when a project's default namespace is changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnCompilationOptionsChanged(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOptions)">
            <summary>
            Call this method when a project's compilation options are changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnParseOptionsChanged(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ParseOptions)">
            <summary>
            Call this method when a project's parse options are changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnProjectReferenceAdded(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Call this method when a project reference is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnProjectReferenceRemoved(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Call this method when a project reference is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnMetadataReferenceAdded(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Call this method when a metadata reference is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnMetadataReferenceRemoved(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Call this method when a metadata reference is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnalyzerReferenceAdded(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Call this method when an analyzer reference is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnalyzerReferenceRemoved(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Call this method when an analyzer reference is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnSolutionAnalyzerReferenceAdded(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Call this method when an analyzer reference is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnSolutionAnalyzerReferenceRemoved(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Call this method when an analyzer reference is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnHasAllInformationChanged(Microsoft.CodeAnalysis.ProjectId,System.Boolean)">
            <summary>
            Call this method when status of project has changed to incomplete.
            See <see cref="P:Microsoft.CodeAnalysis.ProjectInfo.HasAllInformation"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnRunAnalyzersChanged(Microsoft.CodeAnalysis.ProjectId,System.Boolean)">
            <summary>
            Call this method when a project's RunAnalyzers property is changed in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Call this method when a document is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentsAdded(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentInfo})">
            <summary>
            Call this method when multiple document are added to one or more projects in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentReloaded(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Call this method when a document is reloaded in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentRemoved(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Call this method when a document is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentTextLoaderChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader)">
            <summary>
            Call this method when the text of a document is changed on disk.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentTextLoaderChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader)">
            <summary>
            Call this method when the text of a additional document is changed on disk.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnalyzerConfigDocumentTextLoaderChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader)">
            <summary>
            Call this method when the text of a analyzer config document is changed on disk.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentInfoChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Call this method when the document info changes, such as the name, folders or file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Call this method when the text of a document is updated in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Call this method when the text of an additional document is updated in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnalyzerConfigDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)">
            <summary>
            Call this method when the text of an analyzer config document is updated in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnyDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode,System.Action{Microsoft.CodeAnalysis.DocumentId},System.Func{Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DocumentId}},System.Func{Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode,Microsoft.CodeAnalysis.Solution},Microsoft.CodeAnalysis.WorkspaceChangeKind,System.Boolean)">
            <summary>
            When a <see cref="T:Microsoft.CodeAnalysis.Document"/>s text is changed, we need to make sure all of the linked
            files also have their content updated in the new solution before applying it to the
            workspace to avoid the workspace having solutions with linked files where the contents
            do not match.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentSourceCodeKindChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SourceCodeKind)">
            <summary>
            Call this method when the SourceCodeKind of a document changes in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Call this method when an additional document is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentRemoved(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Call this method when an additional document is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnalyzerConfigDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Call this method when an analyzer config document is added to a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnAnalyzerConfigDocumentRemoved(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Call this method when an analyzer config document is removed from a project in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.UpdateReferencesAfterAdd">
            <summary>
            Updates all projects to properly reference other projects as project references instead of metadata references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)">
            <summary>
            Determines if the specific kind of change is supported by the <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CanAddProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Returns <see langword="true"/> if a reference to referencedProject can be added to
            referencingProject.  <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)">
             <summary>
             Apply changes made to a solution back to the workspace.
            
             The specified solution must be one that originated from this workspace. If it is not, or the workspace
             has been updated since the solution was obtained from the workspace, then this method returns false. This method
             will still throw if the solution contains changes that are not supported according to the <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)"/>
             method.
             </summary>
             <exception cref="T:System.NotSupportedException">Thrown if the solution contains changes not supported according to the
             <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)"/> method.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CanApplyCompilationOptionChange(Microsoft.CodeAnalysis.CompilationOptions,Microsoft.CodeAnalysis.CompilationOptions,Microsoft.CodeAnalysis.Project)">
            <summary>
            Called during a call to <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to determine if a specific change to <see cref="P:Microsoft.CodeAnalysis.Project.CompilationOptions"/> is allowed.
            </summary>
            <remarks>
            This method is only called if <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)" /> returns false for <see cref="F:Microsoft.CodeAnalysis.ApplyChangesKind.ChangeCompilationOptions"/>.
            If <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)" /> returns true, then that means all changes are allowed and this method does not need to be called.
            </remarks>
            <param name="oldOptions">The old <see cref="T:Microsoft.CodeAnalysis.CompilationOptions"/> of the project from prior to the change.</param>
            <param name="newOptions">The new <see cref="T:Microsoft.CodeAnalysis.CompilationOptions"/> of the project that was passed to <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/>.</param>
            <param name="project">The project contained in the <see cref="T:Microsoft.CodeAnalysis.Solution"/> passed to <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CanApplyParseOptionChange(Microsoft.CodeAnalysis.ParseOptions,Microsoft.CodeAnalysis.ParseOptions,Microsoft.CodeAnalysis.Project)">
            <summary>
            Called during a call to <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to determine if a specific change to <see cref="P:Microsoft.CodeAnalysis.Project.ParseOptions"/> is allowed.
            </summary>
            <remarks>
            This method is only called if <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)" /> returns false for <see cref="F:Microsoft.CodeAnalysis.ApplyChangesKind.ChangeParseOptions"/>.
            If <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)" /> returns true, then that means all changes are allowed and this method does not need to be called.
            </remarks>
            <param name="oldOptions">The old <see cref="T:Microsoft.CodeAnalysis.ParseOptions"/> of the project from prior to the change.</param>
            <param name="newOptions">The new <see cref="T:Microsoft.CodeAnalysis.ParseOptions"/> of the project that was passed to <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/>.</param>
            <param name="project">The project contained in the <see cref="T:Microsoft.CodeAnalysis.Solution"/> passed to <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/>.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(Microsoft.CodeAnalysis.ProjectChanges)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> for each project
             that has been added, removed or changed.
            
             Override this method if you want to modify how project changes are applied.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyProjectAdded(Microsoft.CodeAnalysis.ProjectInfo)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add a project to the current solution.
            
             Override this method to implement the capability of adding projects.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyProjectRemoved(Microsoft.CodeAnalysis.ProjectId)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove a project from the current solution.
            
             Override this method to implement the capability of removing projects.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyCompilationOptionsChanged(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOptions)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to change the compilation options.
            
             Override this method to implement the capability of changing compilation options.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyParseOptionsChanged(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ParseOptions)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to change the parse options.
            
             Override this method to implement the capability of changing parse options.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyProjectReferenceAdded(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add a project reference to a project.
            
             Override this method to implement the capability of adding project references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyProjectReferenceRemoved(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove a project reference from a project.
            
             Override this method to implement the capability of removing project references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyMetadataReferenceAdded(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add a metadata reference to a project.
            
             Override this method to implement the capability of adding metadata references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyMetadataReferenceRemoved(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove a metadata reference from a project.
            
             Override this method to implement the capability of removing metadata references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerReferenceAdded(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add an analyzer reference to a project.
            
             Override this method to implement the capability of adding analyzer references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerReferenceRemoved(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove an analyzer reference from a project.
            
             Override this method to implement the capability of removing analyzer references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplySolutionAnalyzerReferenceAdded(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add an analyzer reference to the solution.
            
             Override this method to implement the capability of adding analyzer references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplySolutionAnalyzerReferenceRemoved(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove an analyzer reference from the solution.
            
             Override this method to implement the capability of removing analyzer references.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo,Microsoft.CodeAnalysis.Text.SourceText)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add a new document to a project.
            
             Override this method to implement the capability of adding documents.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyDocumentRemoved(Microsoft.CodeAnalysis.DocumentId)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove a document from a project.
            
             Override this method to implement the capability of removing documents.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText)">
             <summary>
             This method is called to change the text of a document.
            
             Override this method to implement the capability of changing document text.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyDocumentInfoChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.DocumentInfo)">
             <summary>
             This method is called to change the info of a document.
            
             Override this method to implement the capability of changing a document's info.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAdditionalDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo,Microsoft.CodeAnalysis.Text.SourceText)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add a new additional document to a project.
            
             Override this method to implement the capability of adding additional documents.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAdditionalDocumentRemoved(Microsoft.CodeAnalysis.DocumentId)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove an additional document from a project.
            
             Override this method to implement the capability of removing additional documents.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAdditionalDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText)">
             <summary>
             This method is called to change the text of an additional document.
            
             Override this method to implement the capability of changing additional document text.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerConfigDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo,Microsoft.CodeAnalysis.Text.SourceText)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to add a new analyzer config document to a project.
            
             Override this method to implement the capability of adding analyzer config documents.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerConfigDocumentRemoved(Microsoft.CodeAnalysis.DocumentId)">
             <summary>
             This method is called during <see cref="M:Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution)"/> to remove an analyzer config document from a project.
            
             Override this method to implement the capability of removing analyzer config documents.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerConfigDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText)">
             <summary>
             This method is called to change the text of an analyzer config document.
            
             Override this method to implement the capability of changing analyzer config document text.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckSolutionIsEmpty">
            <summary>
            Throws an exception is the solution is not empty.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectIsInCurrentSolution(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Throws an exception if the project is not part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectIsNotInCurrentSolution(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Throws an exception is the project is part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectHasProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Throws an exception if a project does not have a specific project reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)">
            <summary>
            Throws an exception if a project already has a specific project reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveTransitiveProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Throws an exception if project has a transitive reference to another project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectHasMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Throws an exception if a project does not have a specific metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            Throws an exception if a project already has a specific metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectHasAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Throws an exception if a project does not have a specific analyzer reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Throws an exception if a project already has a specific analyzer reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckSolutionHasAnalyzerReference(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Throws an exception if a project already has a specific analyzer reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckSolutionDoesNotHaveAnalyzerReference(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            Throws an exception if a project already has a specific analyzer reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckDocumentIsInCurrentSolution(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Throws an exception if a document is not part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckAdditionalDocumentIsInCurrentSolution(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Throws an exception if an additional document is not part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckAnalyzerConfigDocumentIsInCurrentSolution(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Throws an exception if an analyzer config is not part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckDocumentIsNotInCurrentSolution(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Throws an exception if a document is already part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckAdditionalDocumentIsNotInCurrentSolution(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Throws an exception if an additional document is already part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CheckAnalyzerConfigDocumentIsNotInCurrentSolution(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Throws an exception if the analyzer config document is already part of the current solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetProjectName(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the name to use for a project in an error message.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetDocumentName(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Gets the name to use for a document in an error message.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetAdditionalDocumentName(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Gets the name to use for an additional document in an error message.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetAnalyzerConfigDocumentName(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Gets the name to use for an analyzer document in an error message.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Workspace.TextTracker">
            <summary>
            A class that responds to text buffer changes
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Workspace._bufferToDocumentInCurrentContextMap">
            <summary>
            Tracks the document ID in the current context for a source text container for an opened text buffer.
            </summary>
            <remarks>For each entry in this map, there must be a corresponding entry in <see cref="F:Microsoft.CodeAnalysis.Workspace._bufferToAssociatedDocumentsMap"/> where the document ID in current context is one of associated document IDs.</remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Workspace._bufferToAssociatedDocumentsMap">
            <summary>
            Tracks all the associated document IDs for a source text container for an opened text buffer.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.CanOpenDocuments">
            <summary>
            True if this workspace supports manually opening and closing documents.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspace.CanChangeActiveContextDocument">
            <summary>
            True if this workspace supports manually changing the active context document of a text buffer by calling <see cref="M:Microsoft.CodeAnalysis.Workspace.SetDocumentContext(Microsoft.CodeAnalysis.DocumentId)" />.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OpenDocument(Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Open the specified document in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CloseDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Close the specified document in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OpenAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Open the specified additional document in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CloseAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Close the specified additional document in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OpenAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Open the specified analyzer config document in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.CloseAnalyzerConfigDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Close the specified analyzer config document in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.IsDocumentOpen(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Determines if the document is currently open in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetOpenDocumentIds(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets a list of the currently opened documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetRelatedDocumentIds(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Gets the ids for documents in the <see cref="P:Microsoft.CodeAnalysis.Workspace.CurrentSolution"/> snapshot associated with the given <paramref name="container"/>.
            Documents are normally associated with a text container when the documents are opened.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetDocumentIdInCurrentContext(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Gets the id for the document associated with the given text container in its current context.
            Documents are normally associated with a text container when the documents are opened.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetDocumentIdInCurrentContext(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Finds the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> related to the given <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> that
            is in the current context. If the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> is currently closed, then 
            it is returned directly. If it is open, then this returns the same result that 
            <see cref="M:Microsoft.CodeAnalysis.Workspace.GetDocumentIdInCurrentContext(Microsoft.CodeAnalysis.Text.SourceTextContainer)"/> would return for the
            <see cref="T:Microsoft.CodeAnalysis.Text.SourceTextContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.SetDocumentContext(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Call this method to tell the host environment to change the current active context to this document. Only supported if
            <see cref="P:Microsoft.CodeAnalysis.Workspace.CanChangeActiveContextDocument"/> returns true.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnDocumentContextUpdated(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Call this method when a document has been made the active context in the host environment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.OnSourceGeneratedDocumentOpened(Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity,Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Registers a SourceTextContainer to a source generated document. Unlike <see cref="M:Microsoft.CodeAnalysis.Workspace.OnDocumentOpened(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceTextContainer,System.Boolean)" />,
            this doesn't result in the workspace being updated any time the contents of the container is changed; instead
            this ensures that features going from the text container to the buffer back to a document get a usable document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.RemoveDocumentFromCurrentContextMapping_NoLock(Microsoft.CodeAnalysis.Text.SourceTextContainer,Microsoft.CodeAnalysis.DocumentId)">
            <returns>The DocumentId of the current context document attached to the textContainer, if any.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.AdjustReloadedSolution(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution)">
            <summary>
             This method is called during OnSolutionReload.  Override this method if you want to manipulate
             the reloaded solution.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Workspace.WorkspaceChanged">
            <summary>
            An event raised whenever the current solution is changed.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Workspace.WorkspaceFailed">
            <summary>
            An event raised whenever the workspace or part of its solution model
            fails to access a file or other external resource.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Workspace.DocumentOpened">
            <summary>
            An event that is fired when a documents is opened in the editor.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Workspace.DocumentClosed">
            <summary>
            An event that is fired when a document is closed in the editor.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Workspace.DocumentActiveContextChanged">
            <summary>
            An event that is fired when the active context document associated with a buffer 
            changes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.TryGetWorkspace(Microsoft.CodeAnalysis.Text.SourceTextContainer,Microsoft.CodeAnalysis.Workspace@)">
            <summary>
            Gets the workspace associated with the specific text container.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.RegisterText(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Register a correspondence between a text container and a workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.UnregisterText(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Unregister a correspondence between a text container and a workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspace.GetWorkspaceRegistration(Microsoft.CodeAnalysis.Text.SourceTextContainer)">
            <summary>
            Returns a <see cref="T:Microsoft.CodeAnalysis.WorkspaceRegistration" /> for a given text container.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs">
            <summary>
            The <see cref="T:System.EventArgs"/> describing any kind of workspace change.
            </summary>
            <remarks>
            When linked files are edited, one document change event is fired per linked file. All of
            these events contain the same <see cref="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.OldSolution"/>, and they all contain the same
            <see cref="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.NewSolution"/>. This is so that we can trigger document change events on all
            affected documents without reporting intermediate states in which the linked file contents
            do not match.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.OldSolution">
            <remarks>
            If linked documents are being changed, there may be multiple events with the same <see cref="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.OldSolution"/>
            and <see cref="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.NewSolution"/>.  Note that the workspace starts with its solution set to an empty solution.
            <see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionAdded"/> replaces the previous solution, which might be the empty
            one.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.NewSolution">
            <remarks>
            If linked documents are being changed, there may be multiple events with the same <see cref="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.OldSolution"/>
            and <see cref="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.NewSolution"/>. Note <see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionRemoved"/> replaces the previous
            solution with the empty one.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.ProjectId">
            <summary>
            The id of the affected <see cref="T:Microsoft.CodeAnalysis.Project"/>.  Can be <see langword="null"/> if this is an change unrelated
            to a project (for example <see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionReloaded"/>.  Should be non-<see
            langword="null"/> for:
            <list type="bullet">
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectAdded"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectChanged"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectReloaded"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectRemoved"/></item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.DocumentId">
            <summary>
            The id of the affected <see cref="T:Microsoft.CodeAnalysis.Document"/>.  Can be <see langword="null"/> if this is an change unrelated
            to a document (for example <see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectAdded"/>. Should be non-<see
            langword="null"/> for:
            <list type="bullet">
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentAdded"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentChanged"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentInfoChanged"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentReloaded"/></item>
            <item><see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentRemoved"/></item>
            </list>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionChanged">
            <summary>
            The current solution changed for an unspecified reason.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionAdded">
            <summary>
            A solution was added to the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionRemoved">
            <summary>
            The current solution was removed from the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionCleared">
            <summary>
            The current solution was cleared of all projects and documents.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionReloaded">
            <summary>
            The current solution was reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectAdded">
            <summary>
            A project was added to the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectRemoved">
            <summary>
            A project was removed from the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectChanged">
            <summary>
            A project in the current solution was changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectReloaded">
            <summary>
            A project in the current solution was reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentAdded">
            <summary>
            A document was added to the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentRemoved">
            <summary>
            A document was removed from the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentReloaded">
            <summary>
            A document in the current solution was reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentChanged">
            <summary>
            A document in the current solution was changed.
            </summary>
            <remarks>
            When linked files are edited, one <see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentChanged"/> event is fired per
            linked file. All of these events contain the same OldSolution, and they all contain
            the same NewSolution. This is so that we can trigger document change events on all
            affected documents without reporting intermediate states in which the linked file
            contents do not match. Each <see cref="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentChanged"/> event does not represent
            an incremental update from the previous event in this special case.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentAdded">
            <summary>
            An additional document was added to the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentRemoved">
            <summary>
            An additional document was removed from the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentReloaded">
            <summary>
            An additional document in the current solution was reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentChanged">
            <summary>
            An additional document in the current solution was changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentInfoChanged">
            <summary>
            The document in the current solution had is info changed; name, folders, filepath
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AnalyzerConfigDocumentAdded">
            <summary>
            An analyzer config document was added to the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AnalyzerConfigDocumentRemoved">
            <summary>
            An analyzer config document was removed from the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AnalyzerConfigDocumentReloaded">
            <summary>
            An analyzer config document in the current solution was reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceChangeKind.AnalyzerConfigDocumentChanged">
            <summary>
            An analyzer config document in the current solution was changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceConfigurationOptions.DisableRecoverableTrees">
            <summary>
            Disables if the workspace creates recoverable trees when from its <see cref="T:Microsoft.CodeAnalysis.Host.ISyntaxTreeFactoryService"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.WorkspaceKind">
            <summary>
             Known workspace kinds
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.WorkspaceKind.Custom">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.AdhocWorkspace"/> kind.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader">
            <summary>
            The base implementation for <see cref="T:Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader"/>. This type provides caching and tracking of inputs given
            to <see cref="M:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader.AddDependencyLocation(System.String)"/>.
            </summary>
            <remarks>
            This type generally assumes that files on disk aren't changing, since it ensure that two calls to <see cref="M:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader.LoadFromPath(System.String)"/>
            will always return the same thing, per that interface's contract.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader.LoadFromPathUncheckedImpl(System.String)">
            <summary>
            Implemented by derived types to actually perform the load for an assembly that doesn't have a cached result.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader.LoadFromPathUnchecked(System.String)">
            <summary>
            Returns the cached assembly for fullPath if we've done a load for this path before, or calls <see cref="M:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader.LoadFromPathUncheckedImpl(System.String)"/> if
            it needs to be loaded. This method skips the check in release builds that the path is an absolute path, hence the "Unchecked" in the name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AnalyzerAssemblyLoader.GetPathToLoad(System.String)">
            <summary>
            When overridden in a derived class, allows substituting an assembly path after we've
            identified the context to load an assembly in, but before the assembly is actually
            loaded from disk. This is used to substitute out the original path with the shadow-copied version.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.DefaultAnalyzerAssemblyLoader.CompilerAssemblySimpleNames">
             <summary>
             <p>Typically a user analyzer has a reference to the compiler and some of the compiler's
             dependencies such as System.Collections.Immutable. For the analyzer to correctly
             interoperate with the compiler that created it, we need to ensure that we always use the
             compiler's version of a given assembly over the analyzer's version.</p>
            
             <p>If we neglect to do this, then in the case where the user ships the compiler or its
             dependencies in the analyzer's bin directory, we could end up loading a separate
             instance of those assemblies in the process of loading the analyzer, which will surface
             as a failure to load the analyzer.</p>
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader._baseDirectory">
            <summary>
            The base directory for shadow copies. Each instance of
            <see cref="T:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader"/> gets its own
            subdirectory under this directory. This is also the starting point
            for scavenge operations.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader._shadowCopyDirectoryAndMutex">
            <summary>
            The directory where this instance of <see cref="T:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader"/>
            will shadow-copy assemblies, and the mutex created to mark that the owner of it is still active.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader._assemblyDirectoryId">
            <summary>
            Used to generate unique names for per-assembly directories. Should be updated with <see cref="M:System.Threading.Interlocked.Increment(System.Int32@)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.ToImmutable">
            <summary>
            Realizes the array.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.ToImmutableAndClear">
            <summary>
            Realizes the array and clears the collection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.SetItem(System.Int32,`0)">
            <summary>
            Write <paramref name="value"/> to slot <paramref name="index"/>. 
            Fills in unallocated slots preceding the <paramref name="index"/>, if any.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.ToImmutableOrNull">
            <summary>
            Realizes the array.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.ToDowncastedImmutable``1">
            <summary>
            Realizes the array, downcasting each element to a derived type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.ToImmutableAndFree">
            <summary>
            Realizes the array and disposes the builder in one operation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.Enumerator">
            <summary>
            struct enumerator used in foreach.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObjects.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main
            purpose is that limited number of frequently used objects can be kept in the pool for
            further recycling.
            
            Notes: 
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
               is no space in the pool, extra returned objects will be dropped.
            
            2) it is implied that if object was obtained from a pool, the caller will return it back in
               a relatively short time. Keeping checked out objects for long durations is ok, but 
               reduces usefulness of pooling. Just new up your own.
            
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: 
               If there is no intent for reusing the object, do not use pool - just use "new". 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObjects.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.ObjectPool`1.ForgetTrackedObject(`0,`0)">
            <summary>
            Removes an object from leak tracking.  
            
            This is called when an object is returned to the pool.  It may also be explicitly 
            called if an object allocated from the pool is intentionally not being returned
            to the pool.  This can be of use with pooled arrays if the consumer wants to 
            return a larger array to the pool than was originally allocated.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates">
            <summary>
            Provides pooled delegate instances to help avoid closure allocations for delegates that require a state argument
            with APIs that do not provide appropriate overloads with state arguments.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledAction``1(System.Action{``0},``0,System.Action@)">
             <summary>
             Gets an <see cref="T:System.Action"/> delegate, which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>. The resulting <paramref name="boundAction"/> may be called any number of times
             until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a callback action that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithActionCallback(() => this.DoSomething(x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             callback action:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledAction(arg => arg.self.DoSomething(arg.x), (self: this, x), out Action action);
             RunWithActionCallback(action);
             </code>
             </example>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundAction"/>.</typeparam>
             <param name="unboundAction">The unbound action delegate.</param>
             <param name="argument">The argument to pass to the unbound action delegate.</param>
             <param name="boundAction">A delegate which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledAction``2(System.Action{``0,``1},``1,System.Action{``0}@)">
             <summary>
             Gets an <see cref="T:System.Action`1"/> delegate, which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>. The resulting <paramref name="boundAction"/> may be called any number of times
             until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a callback action that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithActionCallback(a => this.DoSomething(a, x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             callback action:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledAction((a, arg) => arg.self.DoSomething(a, arg.x), (self: this, x), out Action&lt;int&gt; action);
             RunWithActionCallback(action);
             </code>
             </example>
             <typeparam name="T1">The type of the first parameter of the bound action.</typeparam>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundAction"/>.</typeparam>
             <param name="unboundAction">The unbound action delegate.</param>
             <param name="argument">The argument to pass to the unbound action delegate.</param>
             <param name="boundAction">A delegate which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledAction``3(System.Action{``0,``1,``2},``2,System.Action{``0,``1}@)">
             <summary>
             Gets an <see cref="T:System.Action`2"/> delegate, which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>. The resulting <paramref name="boundAction"/> may be called any number of times
             until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a callback action that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithActionCallback((a, b) => this.DoSomething(a, b, x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             callback action:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledAction((a, b, arg) => arg.self.DoSomething(a, b, arg.x), (self: this, x), out Action&lt;int, int&gt; action);
             RunWithActionCallback(action);
             </code>
             </example>
             <typeparam name="T1">The type of the first parameter of the bound action.</typeparam>
             <typeparam name="T2">The type of the second parameter of the bound action.</typeparam>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundAction"/>.</typeparam>
             <param name="unboundAction">The unbound action delegate.</param>
             <param name="argument">The argument to pass to the unbound action delegate.</param>
             <param name="boundAction">A delegate which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledAction``4(System.Action{``0,``1,``2,``3},``3,System.Action{``0,``1,``2}@)">
             <summary>
             Gets an <see cref="T:System.Action`3"/> delegate, which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>. The resulting <paramref name="boundAction"/> may be called any number of times
             until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a callback action that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithActionCallback((a, b, c) => this.DoSomething(a, b, c, x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             callback action:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledAction((a, b, c, arg) => arg.self.DoSomething(a, b, c, arg.x), (self: this, x), out Action&lt;int, int, int&gt; action);
             RunWithActionCallback(action);
             </code>
             </example>
             <typeparam name="T1">The type of the first parameter of the bound action.</typeparam>
             <typeparam name="T2">The type of the second parameter of the bound action.</typeparam>
             <typeparam name="T3">The type of the third parameter of the bound action.</typeparam>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundAction"/>.</typeparam>
             <param name="unboundAction">The unbound action delegate.</param>
             <param name="argument">The argument to pass to the unbound action delegate.</param>
             <param name="boundAction">A delegate which calls <paramref name="unboundAction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledFunction``2(System.Func{``0,``1},``0,System.Func{``1}@)">
             <summary>
             Gets a <see cref="T:System.Func`1"/> delegate, which calls <paramref name="unboundFunction"/> with the
             specified <paramref name="argument"/>. The resulting <paramref name="boundFunction"/> may be called any
             number of times until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a predicate that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithPredicate(() => this.IsSomething(x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             predicate:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledFunction(arg => arg.self.IsSomething(arg.x), (self: this, x), out Func&lt;bool&gt; predicate);
             RunWithPredicate(predicate);
             </code>
             </example>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundFunction"/>.</typeparam>
             <typeparam name="TResult">The type of the return value of the function.</typeparam>
             <param name="unboundFunction">The unbound function delegate.</param>
             <param name="argument">The argument to pass to the unbound function delegate.</param>
             <param name="boundFunction">A delegate which calls <paramref name="unboundFunction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledFunction``3(System.Func{``0,``1,``2},``1,System.Func{``0,``2}@)">
             <summary>
             Gets a <see cref="T:System.Func`2"/> delegate, which calls <paramref name="unboundFunction"/> with the
             specified <paramref name="argument"/>. The resulting <paramref name="boundFunction"/> may be called any
             number of times until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a predicate that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithPredicate(a => this.IsSomething(a, x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             predicate:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledFunction((a, arg) => arg.self.IsSomething(a, arg.x), (self: this, x), out Func&lt;int, bool&gt; predicate);
             RunWithPredicate(predicate);
             </code>
             </example>
             <typeparam name="T1">The type of the first parameter of the bound function.</typeparam>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundFunction"/>.</typeparam>
             <typeparam name="TResult">The type of the return value of the function.</typeparam>
             <param name="unboundFunction">The unbound function delegate.</param>
             <param name="argument">The argument to pass to the unbound function delegate.</param>
             <param name="boundFunction">A delegate which calls <paramref name="unboundFunction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledFunction``4(System.Func{``0,``1,``2,``3},``2,System.Func{``0,``1,``3}@)">
             <summary>
             Gets a <see cref="T:System.Func`3"/> delegate, which calls <paramref name="unboundFunction"/> with the
             specified <paramref name="argument"/>. The resulting <paramref name="boundFunction"/> may be called any
             number of times until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a predicate that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithPredicate((a, b) => this.IsSomething(a, b, x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             predicate:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledFunction((a, b, arg) => arg.self.IsSomething(a, b, arg.x), (self: this, x), out Func&lt;int, int, bool&gt; predicate);
             RunWithPredicate(predicate);
             </code>
             </example>
             <typeparam name="T1">The type of the first parameter of the bound function.</typeparam>
             <typeparam name="T2">The type of the second parameter of the bound function.</typeparam>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundFunction"/>.</typeparam>
             <typeparam name="TResult">The type of the return value of the function.</typeparam>
             <param name="unboundFunction">The unbound function delegate.</param>
             <param name="argument">The argument to pass to the unbound function delegate.</param>
             <param name="boundFunction">A delegate which calls <paramref name="unboundFunction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.GetPooledFunction``5(System.Func{``0,``1,``2,``3,``4},``3,System.Func{``0,``1,``2,``4}@)">
             <summary>
             Gets a <see cref="T:System.Func`4"/> delegate, which calls <paramref name="unboundFunction"/> with the
             specified <paramref name="argument"/>. The resulting <paramref name="boundFunction"/> may be called any
             number of times until the returned <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> is disposed.
             </summary>
             <example>
             <para>The following example shows the use of a capturing delegate for a predicate that requires an
             argument:</para>
            
             <code>
             int x = 3;
             RunWithPredicate((a, b, c) => this.IsSomething(a, b, c, x));
             </code>
            
             <para>The following example shows the use of a pooled delegate to avoid capturing allocations for the same
             predicate:</para>
            
             <code>
             int x = 3;
             using var _ = GetPooledFunction((a, b, c, arg) => arg.self.IsSomething(a, b, c, arg.x), (self: this, x), out Func&lt;int, int, int, bool&gt; predicate);
             RunWithPredicate(predicate);
             </code>
             </example>
             <typeparam name="T1">The type of the first parameter of the bound function.</typeparam>
             <typeparam name="T2">The type of the second parameter of the bound function.</typeparam>
             <typeparam name="T3">The type of the third parameter of the bound function.</typeparam>
             <typeparam name="TArg">The type of argument to pass to <paramref name="unboundFunction"/>.</typeparam>
             <typeparam name="TResult">The type of the return value of the function.</typeparam>
             <param name="unboundFunction">The unbound function delegate.</param>
             <param name="argument">The argument to pass to the unbound function delegate.</param>
             <param name="boundFunction">A delegate which calls <paramref name="unboundFunction"/> with the specified
             <paramref name="argument"/>.</param>
             <returns>A disposable <see cref="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser"/> which returns the object to the delegate pool.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser">
             <summary>
             A releaser for a pooled delegate.
             </summary>
             <remarks>
             <para>This type is intended for use as the resource of a <c>using</c> statement. When used in this manner,
             <see cref="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser.Dispose"/> should not be called explicitly.</para>
            
             <para>If used without a <c>using</c> statement, calling <see cref="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser.Dispose"/> is optional. If the call is
             omitted, the object will not be returned to the pool. The behavior of this type if <see cref="M:Microsoft.CodeAnalysis.PooledObjects.PooledDelegates.Releaser.Dispose"/> is
             called multiple times is undefined.</para>
             </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObjects.PooledStringBuilder">
            <summary>
            The usage is:
                   var inst = PooledStringBuilder.GetInstance();
                   var sb = inst.builder;
                   ... Do Stuff...
                   ... sb.ToString() ...
                   inst.Free();
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PooledObjects.PooledStringBuilder.CreatePool(System.Int32)">
            <summary>
            If someone need to create a private pool
            </summary>
            <param name="size">The size of the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SyntaxTreeExtensions.VerifySource(Microsoft.CodeAnalysis.SyntaxTree,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})">
            <summary>
            Verify nodes match source.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SyntaxTreeExtensions.FindFirstDifference(System.String,System.String)">
            <summary>
            Return the index of the first difference between
            the two strings, or -1 if the strings are the same.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SyntaxTreeExtensions.IsHiddenPosition(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns <c>true</c> if the provided position is in a hidden region inaccessible to the user.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ImmutableArrayExtensions">
            <summary>
            The collection of extension methods for the <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a sequence to an immutable array.
            </summary>
            <typeparam name="T">Elemental type of the sequence.</typeparam>
            <param name="items">The sequence to convert.</param>
            <returns>An immutable copy of the contents of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If items is null (default)</exception>
            <remarks>If the sequence is null, this will throw <see cref="T:System.ArgumentNullException"/></remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutableOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a sequence to an immutable array.
            </summary>
            <typeparam name="T">Elemental type of the sequence.</typeparam>
            <param name="items">The sequence to convert.</param>
            <returns>An immutable copy of the contents of the sequence.</returns>
            <remarks>If the sequence is null, this will return an empty array.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutableOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a sequence to an immutable array.
            </summary>
            <typeparam name="T">Elemental type of the sequence.</typeparam>
            <param name="items">The sequence to convert.</param>
            <returns>An immutable copy of the contents of the sequence.</returns>
            <remarks>If the sequence is null, this will return the default (null) array.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutable``1(``0[])">
            <summary>
            Converts an array to an immutable array. The array must not be null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The sequence to convert</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutableOrNull``1(``0[])">
            <summary>
            Converts a array to an immutable array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The sequence to convert</param>
            <returns></returns>
            <remarks>If the sequence is null, this will return the default (null) array.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.AsImmutableOrEmpty``1(``0[])">
            <summary>
            Converts an array to an immutable array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The sequence to convert</param>
            <returns>If the array is null, this will return an empty immutable array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.ToImmutable(System.IO.MemoryStream)">
            <summary>
            Reads bytes from specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Read-only content of the stream.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.SelectAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
            <summary>
            Maps an immutable array to another immutable array.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="items">The array to map</param>
            <param name="map">The mapping delegate</param>
            <returns>If the items's length is 0, this will return an empty immutable array</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.SelectAsArray``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
            <summary>
            Maps an immutable array to another immutable array.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TArg"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="items">The sequence to map</param>
            <param name="map">The mapping delegate</param>
            <param name="arg">The extra input used by mapping delegate</param>
            <returns>If the items's length is 0, this will return an empty immutable array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.SelectAsArray``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Int32,``1,``2},``1)">
            <summary>
             Maps an immutable array to another immutable array.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TArg"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="items">The sequence to map</param>
            <param name="map">The mapping delegate</param>
            <param name="arg">The extra input used by mapping delegate</param>
            <returns>If the items's length is 0, this will return an empty immutable array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.SelectAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            Maps a subset of immutable array to another immutable array.
            </summary>
            <typeparam name="TItem">Type of the source array items</typeparam>
            <typeparam name="TResult">Type of the transformed array items</typeparam>
            <param name="array">The array to transform</param>
            <param name="predicate">The condition to use for filtering the array content.</param>
            <param name="selector">A transform function to apply to each element that is not filtered out by <paramref name="predicate"/>.</param>
            <returns>If the items's length is 0, this will return an empty immutable array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.SelectAsArrayAsync``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Maps an immutable array through a function that returns ValueTasks, returning the new ImmutableArray.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.ZipAsArray``3(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``1},System.Func{``0,``1,``2})">
            <summary>
            Zips two immutable arrays together through a mapping function, producing another immutable array.
            </summary>
            <returns>If the items's length is 0, this will return an empty immutable array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.WhereAsArray``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
            <summary>
            Creates a new immutable array based on filtered elements by the predicate. The array must not be null.
            </summary>
            <param name="array">The array to process</param>
            <param name="predicate">The delegate that defines the conditions of the element to search for.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.WhereAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,System.Boolean},``1)">
            <summary>
            Creates a new immutable array based on filtered elements by the predicate. The array must not be null.
            </summary>
            <param name="array">The array to process</param>
            <param name="predicate">The delegate that defines the conditions of the element to search for.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.Cast``2(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Casts the immutable array of a Type to an immutable array of its base type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.SetEquals``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether this instance and another immutable array are equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array1"></param>
            <param name="array2"></param>
            <param name="comparer">The comparer to determine if the two arrays are equal.</param>
            <returns>True if the two arrays are equal</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.NullToEmpty``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Returns an empty array if the input array is null (default)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.NullToEmpty``1(System.Nullable{System.Collections.Immutable.ImmutableArray{``0}})">
            <summary>
            Returns an empty array if the input nullable value type is null or the underlying array is null (default)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImmutableArrayExtensions.Distinct``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an array of distinct elements, preserving the order in the original array.
            If the array has no duplicates, the original array is returned. The original array must not be null.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BitVector.Create(System.Int32)">
            <summary>
            Create BitArray with at least the specified number of bits.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BitVector.AllSet(System.Int32)">
            <summary>
            return a bit array with all bits set from index 0 through bitCount-1
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BitVector.Clone">
            <summary>
            Make a copy of a bit array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BitVector.Invert">
            <summary>
            Invert all the bits in the vector.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.BitVector.IsNull">
            <summary>
            Is the given bit array null?
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BitVector.IntersectWith(Microsoft.CodeAnalysis.BitVector@)">
            <summary>
            Modify this bit vector by bitwise AND-ing each element with the other bit vector.
            For the purposes of the intersection, any bits beyond the current length will be treated as zeroes.
            Return true if any changes were made to the bits of this bit vector.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BitVector.UnionWith(Microsoft.CodeAnalysis.BitVector@)">
            <summary>
            Modify this bit vector by '|'ing each element with the other bit vector.
            </summary>
            <returns>
            True if any bits were set as a result of the union.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SpecialTypeExtensions.IsClrInteger(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Checks if a type is considered a "built-in integral" by CLR.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SpecialTypeExtensions.IsBlittable(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Checks if a type is a primitive of a fixed size.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SpecialTypeExtensions.IsPrimitiveRecursiveStruct(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            These special types are structs that contain fields of the same type
            (e.g. System.Int32 contains a field of type System.Int32).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SpecialTypeExtensions.IsIntegralType(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Checks if a type is considered a "built-in integral" by CLR.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SpecialTypeExtensions.VBForToShiftBits(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            For signed integer types return number of bits for their representation minus 1. 
            I.e. 7 for Int8, 31 for Int32, etc.
            Used for checking loop end condition for VB for loop.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ArrayBuilderExtensions.SelectAsArray``2(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{``0},System.Func{``0,``1})">
            <summary>
            Maps an array builder to immutable array.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="items">The array to map</param>
            <param name="map">The mapping delegate</param>
            <returns>If the items's length is 0, this will return an empty immutable array</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ArrayBuilderExtensions.SelectAsArray``3(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{``0},System.Func{``0,``1,``2},``1)">
            <summary>
            Maps an array builder to immutable array.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TArg"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="items">The sequence to map</param>
            <param name="map">The mapping delegate</param>
            <param name="arg">The extra input used by mapping delegate</param>
            <returns>If the items's length is 0, this will return an empty immutable array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ArrayBuilderExtensions.SelectAsArrayWithIndex``3(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{``0},System.Func{``0,System.Int32,``1,``2},``1)">
            <summary>
            Maps an array builder to immutable array.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TArg"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="items">The sequence to map</param>
            <param name="map">The mapping delegate</param>
            <param name="arg">The extra input used by mapping delegate</param>
            <returns>If the items's length is 0, this will return an empty immutable array.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DictionaryExtensions">
            <summary>
            The collection of extension methods for the <see cref="T:System.Collections.Generic.Dictionary`2"/> type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            If the given key is not found in the dictionary, add it with the given value and return the value.
            Otherwise return the existing value associated with that key.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2">
            <summary>
            A MultiDictionary that allows only adding, and preserves the order of values added to the 
            dictionary. Thread-safe for reading, but not for adding.
            </summary>
            <remarks>
            Always uses the default comparer.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.Add(`0,`1)">
            <summary>
            Add a value to the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.Item(`0)">
            <summary>
            Get all values associated with K, in the order they were added.
            Returns empty read-only array if no values were present.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.Keys">
            <summary>
            Get a collection of all the keys.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet._value">
            <summary>
            Each value is either a single V or an <see cref="T:Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1"/>.
            Never null.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary">
            <summary>
            Provides methods for creating a segmented dictionary that is immutable; meaning it cannot be changed once it is
            created.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2">
             <summary>
             Represents a segmented dictionary that is immutable; meaning it cannot be changed once it is created.
             </summary>
             <remarks>
             <para>There are different scenarios best for <see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2"/> and others
             best for <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/>.</para>
            
             <para>In general, <see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2"/> is applicable in scenarios most like
             the scenarios where <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> is applicable, and
             <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> is applicable in scenarios most like the scenarios where
             <see cref="T:System.Collections.Immutable.ImmutableList`1"/> is applicable.</para>
            
             <para>The following table summarizes the performance characteristics of
             <see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2"/>:</para>
             
             <list type="table">
               <item>
                 <description>Operation</description>
                 <description><see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2"/> Complexity</description>
                 <description><see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> Complexity</description>
                 <description>Comments</description>
               </item>
               <item>
                 <description>Item</description>
                 <description>O(1)</description>
                 <description>O(log n)</description>
                 <description>Directly index into the underlying segmented dictionary</description>
               </item>
               <item>
                 <description>Add()</description>
                 <description>O(n)</description>
                 <description>O(log n)</description>
                 <description>Requires creating a new segmented dictionary</description>
               </item>
             </list>
             
             <para>This type is backed by segmented arrays to avoid using the Large Object Heap without impacting algorithmic
             complexity.</para>
             </remarks>
             <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
             <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
             <devremarks>
             <para>This type has a documented contract of being exactly one reference-type field in size. Our own
             <see cref="T:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked"/> class depends on it, as well as others externally.</para>
            
             <para><strong>IMPORTANT NOTICE FOR MAINTAINERS AND REVIEWERS:</strong></para>
            
             <para>This type should be thread-safe. As a struct, it cannot protect its own fields from being changed from one
             thread while its members are executing on other threads because structs can change <em>in place</em> simply by
             reassigning the field containing this struct. Therefore it is extremely important that <strong>⚠⚠ Every member
             should only dereference <c>this</c> ONCE ⚠⚠</strong>. If a member needs to reference the
             <see cref="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2._dictionary"/> field, that counts as a dereference of <c>this</c>. Calling other instance members
             (properties or methods) also counts as dereferencing <c>this</c>. Any member that needs to use <c>this</c> more
             than once must instead assign <c>this</c> to a local variable and use that for the rest of the code instead.
             This effectively copies the one field in the struct to a local variable so that it is insulated from other
             threads.</para>
             </devremarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2.Builder._dictionary">
            <summary>
            The immutable collection this builder is based on.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2.Builder._mutableDictionary">
            <summary>
            The current mutable collection this builder is operating on. This field is initialized to a copy of
            <see cref="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2.Builder._dictionary"/> the first time a change is made.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2.Enumerator.ReturnType.KeyValuePair">
            <summary>
            The return value from the implementation of <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> is
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/>. This is the return value for most instances of this
            enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2.Enumerator.ReturnType.DictionaryEntry">
            <summary>
            The return value from the implementation of <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> is
            <see cref="T:System.Collections.DictionaryEntry"/>. This is the return value for instances of this
            enumerator created by the <see cref="M:System.Collections.IDictionary.GetEnumerator"/> implementation in
            <see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary`2.PrivateInterlocked">
            <summary>
            Private helper class for use only by <see cref="T:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.Create``1">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.Create``1"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.Create``1(``0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.Create``1(``0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.Create``1(``0[])">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.CreateBuilder``1">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.ToImmutableSegmentedList``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList.ToImmutableSegmentedList``1(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}.Builder)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1">
             <summary>
             Represents a segmented list that is immutable; meaning it cannot be changed once it is created.
             </summary>
             <remarks>
             <para>There are different scenarios best for <see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1"/> and others
             best for <see cref="T:System.Collections.Immutable.ImmutableList`1"/>.</para>
            
             <para>The following table summarizes the performance characteristics of
             <see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1"/>:</para>
             
             <list type="table">
               <item>
                 <description>Operation</description>
                 <description><see cref="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1"/> Complexity</description>
                 <description><see cref="T:System.Collections.Immutable.ImmutableList`1"/> Complexity</description>
                 <description>Comments</description>
               </item>
               <item>
                 <description>Item</description>
                 <description>O(1)</description>
                 <description>O(log n)</description>
                 <description>Directly index into the underlying segmented list</description>
               </item>
               <item>
                 <description>Add()</description>
                 <description>Currently O(n), but could be O(1) with a relatively large constant</description>
                 <description>O(log n)</description>
                 <description>Currently requires creating a new segmented list, but could be modified to only clone the segments with changes</description>
               </item>
               <item>
                 <description>Insert()</description>
                 <description>O(n)</description>
                 <description>O(log n)</description>
                 <description>Requires creating a new segmented list and cloning all impacted segments</description>
               </item>
             </list>
             
             <para>This type is backed by segmented arrays to avoid using the Large Object Heap without impacting algorithmic
             complexity.</para>
             </remarks>
             <typeparam name="T">The type of the value in the list.</typeparam>
             <devremarks>
             <para>This type has a documented contract of being exactly one reference-type field in size. Our own
             <see cref="T:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked"/> class depends on it, as well as others externally.</para>
            
             <para><strong>IMPORTANT NOTICE FOR MAINTAINERS AND REVIEWERS:</strong></para>
            
             <para>This type should be thread-safe. As a struct, it cannot protect its own fields from being changed from one
             thread while its members are executing on other threads because structs can change <em>in place</em> simply by
             reassigning the field containing this struct. Therefore it is extremely important that <strong>⚠⚠ Every member
             should only dereference <c>this</c> ONCE ⚠⚠</strong>. If a member needs to reference the
             <see cref="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1._list"/> field, that counts as a dereference of <c>this</c>. Calling other instance members
             (properties or methods) also counts as dereferencing <c>this</c>. Any member that needs to use <c>this</c> more
             than once must instead assign <c>this</c> to a local variable and use that for the rest of the code instead.
             This effectively copies the one field in the struct to a local variable so that it is insulated from other
             threads.</para>
             </devremarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder._builder">
            <summary>
            The immutable collection this builder is based on.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.ItemRef(System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.BinarySearch(`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.ConvertAll``1(System.Converter{`0,``0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.CopyTo(`0[])">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Exists(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Find(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindLast(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindLastIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.ForEach(System.Action{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.GetRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.IndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.LastIndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.LastIndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.RemoveAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Reverse">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Reverse(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Sort">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Sort(System.Comparison{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.ToImmutable">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Builder.TrueForAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.PrivateInterlocked">
            <summary>
            Private helper class for use only by <see cref="T:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ValueBuilder._list">
            <summary>
            The immutable collection this builder is based on.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ValueBuilder._mutableList">
            <summary>
            The current mutable collection this builder is operating on. This field is initialized to a copy of
            <see cref="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ValueBuilder._list"/> the first time a change is made.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Empty">
            <inheritdoc cref="F:System.Collections.Immutable.ImmutableList`1.Empty"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.IsEmpty">
            <inheritdoc cref="P:System.Collections.Immutable.ImmutableList`1.IsEmpty"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ItemRef(System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Add(`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Add(`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.BinarySearch(`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Clear">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Clear"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ConvertAll``1(System.Converter{`0,``0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.CopyTo(`0[])">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Exists(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Find(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindLast(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindLastIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ForEach(System.Action{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.GetRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Insert(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Remove(`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.RemoveAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Replace(`0,`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Reverse">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Reverse"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Reverse(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.SetItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Sort">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Sort"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Sort(System.Comparison{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.ToBuilder">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.ToBuilder"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList`1.TrueForAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.SegmentedGenericArraySortHelper`1.SwapIfGreater(`0@,`0@)">
            <summary>Swaps the values in the two references if the first is greater than the second.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.SegmentedGenericArraySortHelper`1.Swap(`0@,`0@)">
            <summary>Swaps the values in the two references, regardless of whether the two references are the same.</summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.SegmentedArraySortUtils">
            <summary>Helper methods for use in array/span sorting routines.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.HashHelpers.GetFastModMultiplier(System.UInt32)">
            <summary>Returns approximate reciprocal of the divisor: ceil(2**64 / divisor).</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.HashHelpers.FastMod(System.UInt32,System.UInt32,System.UInt64)">
            <summary>Performs a mod operation using the multiplier pre-computed with <see cref="M:Microsoft.CodeAnalysis.Collections.Internal.HashHelpers.GetFastModMultiplier(System.UInt32)"/>.</summary>
            <remarks>
            PERF: This improves performance in 64-bit scenarios at the expense of performance in 32-bit scenarios. Since
            we only build a single AnyCPU binary, we opt for improved performance in the 64-bit scenario.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.ICollectionCalls">
            <summary>
            Provides static methods to invoke <see cref="T:System.Collections.ICollection"/> members on value types that explicitly implement the
            member.
            </summary>
            <remarks>
            Normally, invocation of explicit interface members requires boxing or copying the value type, which is
            especially problematic for operations that mutate the value. Invocation through these helpers behaves like a
            normal call to an implicitly implemented member.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.ICollectionCalls`1">
            <summary>
            Provides static methods to invoke <see cref="T:System.Collections.Generic.ICollection`1"/> members on value types that explicitly implement
            the member.
            </summary>
            <remarks>
            Normally, invocation of explicit interface members requires boxing or copying the value type, which is
            especially problematic for operations that mutate the value. Invocation through these helpers behaves like a
            normal call to an implicitly implemented member.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.IEnumerableCalls">
            <summary>
            Provides static methods to invoke <see cref="T:System.Collections.IEnumerable"/> members on value types that explicitly implement the
            member.
            </summary>
            <remarks>
            Normally, invocation of explicit interface members requires boxing or copying the value type, which is
            especially problematic for operations that mutate the value. Invocation through these helpers behaves like a
            normal call to an implicitly implemented member.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.IEnumerableCalls`1">
            <summary>
            Provides static methods to invoke <see cref="T:System.Collections.Generic.IEnumerable`1"/> members on value types that explicitly implement
            the member.
            </summary>
            <remarks>
            Normally, invocation of explicit interface members requires boxing or copying the value type, which is
            especially problematic for operations that mutate the value. Invocation through these helpers behaves like a
            normal call to an implicitly implemented member.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.IListCalls">
            <summary>
            Provides static methods to invoke <see cref="T:System.Collections.IList"/> members on value types that explicitly implement the
            member.
            </summary>
            <remarks>
            Normally, invocation of explicit interface members requires boxing or copying the value type, which is
            especially problematic for operations that mutate the value. Invocation through these helpers behaves like a
            normal call to an implicitly implemented member.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.Internal.InsertionBehavior">
            <summary>
            Used internally to control behavior of insertion into a <see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.Internal.InsertionBehavior.None">
            <summary>
            The default insertion behavior.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.Internal.InsertionBehavior.OverwriteExisting">
            <summary>
            Specifies that an existing entry with the same key should be overwritten if encountered.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.Internal.InsertionBehavior.ThrowOnExisting">
            <summary>
            Specifies that if an existing entry with the same key is encountered, an exception should be thrown.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.RoslynUnsafe.NullRef``1">
            <summary>
            Returns a by-ref to type <typeparamref name="T"/> that is a null reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.RoslynUnsafe.IsNullRef``1(``0@)">
            <summary>
            Returns if a given by-ref to type <typeparamref name="T"/> is a null reference.
            </summary>
            <remarks>
            This check is conceptually similar to <c>(void*)(&amp;source) == nullptr</c>.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.Internal.SegmentedArrayHelper.FastPathMethodImplOptions">
            <summary>
            A combination of <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining"/> and
            <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.SegmentedArrayHelper.CalculateSegmentSize(System.Int32)">
            <summary>
            Calculates the maximum number of elements of size <paramref name="elementSize"/> which can fit into an array
            which has the following characteristics:
            <list type="bullet">
            <item><description>The array can be allocated in the small object heap.</description></item>
            <item><description>The array length is a power of 2.</description></item>
            </list>
            </summary>
            <param name="elementSize">The size of the elements in the array.</param>
            <returns>The segment size to use for small object heap segmented arrays.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.SegmentedArrayHelper.CalculateSegmentShift(System.Int32)">
            <summary>
            Calculates a shift which can be applied to an absolute index to get the page index within a segmented array.
            </summary>
            <param name="segmentSize">The number of elements in each page of the segmented array. Must be a power of 2.</param>
            <returns>The shift to apply to the absolute index to get the page index within a segmented array.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.Internal.SegmentedArrayHelper.CalculateOffsetMask(System.Int32)">
            <summary>
            Calculates a mask, which can be applied to an absolute index to get the index within a page of a segmented
            array.
            </summary>
            <param name="segmentSize">The number of elements in each page of the segmented array. Must be a power of 2.</param>
            <returns>The bit mask to obtain the index within a page from an absolute index within a segmented array.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_ArrayPlusOffTooSmall">
            <summary>Destination array is not long enough to copy all the items in the collection. Check array index and length.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_HTCapacityOverflow">
            <summary>Hashtable's capacity overflowed and went negative. Check load factor, capacity and the current size of the table.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_KeyNotFoundWithKey">
            <summary>The given key '{0}' was not present in the dictionary.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_LongerThanDestArray">
            <summary>Destination array was not long enough. Check the destination index, length, and the array's lower bounds.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_LongerThanSrcArray">
            <summary>Source array was not long enough. Check the source index, length, and the array's lower bounds.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_NonZeroLowerBound">
            <summary>The lower bound of target array must be zero.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_RankMultiDimNotSupported">
            <summary>Only single dimensional arrays are supported for the requested action.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_WrongType">
            <summary>The value "{0}" is not of type "{1}" and cannot be used in this generic collection.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Argument_AddingDuplicateWithKey">
            <summary>An item with the same key has already been added. Key: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Argument_InvalidArrayType">
            <summary>Target array type is not compatible with the type of items in the collection.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Argument_InvalidOffLen">
            <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_ArrayLB">
            <summary>Number was less than the array's lower bound in the first dimension.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_BiggerThanCollection">
            <summary>Larger than collection size.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_Count">
            <summary>Count must be positive and count must refer to a location within the string/array/collection.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_Index">
            <summary>Index was out of range. Must be non-negative and less than the size of the collection.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_ListInsert">
            <summary>Index must be within the bounds of the List.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_NeedNonNegNum">
            <summary>Non-negative number required.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentOutOfRange_SmallCapacity">
            <summary>capacity was less than the current size.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.InvalidOperation_ConcurrentOperationsNotSupported">
            <summary>Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection's state is no longer correct.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.InvalidOperation_EnumFailedVersion">
            <summary>Collection was modified; enumeration operation may not execute.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.InvalidOperation_EnumOpCantHappen">
            <summary>Enumeration has either not started or has already finished.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.InvalidOperation_IComparerFailed">
            <summary>Failed to compare two elements in the array.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.NotSupported_KeyCollectionSet">
            <summary>Mutating a key collection derived from a dictionary is not allowed.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.NotSupported_ValueCollectionSet">
            <summary>Mutating a value collection derived from a dictionary is not allowed.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Rank_MustMatch">
            <summary>The specified arrays must have the same number of dimensions.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.NotSupported_FixedSizeCollection">
            <summary>Collection was of a fixed size.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.ArgumentException_OtherNotArrayOfCorrectLength">
            <summary>Object is not a array with the same number of elements as the array to compare it to.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.Arg_BogusIComparer">
            <summary>Unable to sort because the IComparer.Compare() method returns inconsistent results. Either a value does not compare equal to itself, or one value repeatedly compared to another value yields different results. IComparer: '{0}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.Internal.SR.CannotFindOldValue">
            <summary>Cannot find the old value</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.Update``1(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}@,System.Func{Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0},Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}})">
            <summary>
            Mutates a value in-place with optimistic locking transaction semantics via a specified transformation
            function. The transformation is retried as many times as necessary to win the optimistic locking race.
            </summary>
            <typeparam name="T">The type of value stored by the list.</typeparam>
            <param name="location">
            The variable or field to be changed, which may be accessed by multiple threads.
            </param>
            <param name="transformer">
            A function that mutates the value. This function should be side-effect free,
            as it may run multiple times when races occur with other threads.</param>
            <returns>
            <see langword="true"/> if the location's value is changed by applying the result of the
            <paramref name="transformer"/> function; otherwise, <see langword="false"/> if the location's value remained
            the same because the last invocation of <paramref name="transformer"/> returned the existing value.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.Update``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}@,System.Func{Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0},``1,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}},``1)">
            <summary>
            Mutates a value in-place with optimistic locking transaction semantics via a specified transformation
            function. The transformation is retried as many times as necessary to win the optimistic locking race.
            </summary>
            <typeparam name="T">The type of value stored by the list.</typeparam>
            <typeparam name="TArg">The type of argument passed to the <paramref name="transformer"/>.</typeparam>
            <param name="location">
            The variable or field to be changed, which may be accessed by multiple threads.
            </param>
            <param name="transformer">
            A function that mutates the value. This function should be side-effect free, as it may run multiple times
            when races occur with other threads.</param>
            <param name="transformerArgument">The argument to pass to <paramref name="transformer"/>.</param>
            <returns>
            <see langword="true"/> if the location's value is changed by applying the result of the
            <paramref name="transformer"/> function; otherwise, <see langword="false"/> if the location's value remained
            the same because the last invocation of <paramref name="transformer"/> returned the existing value.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.InterlockedExchange``1(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}@,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0})">
            <summary>
            Assigns a field or variable containing an immutable list to the specified value and returns the previous
            value.
            </summary>
            <typeparam name="T">The type of value stored by the list.</typeparam>
            <param name="location">The field or local variable to change.</param>
            <param name="value">The new value to assign.</param>
            <returns>The prior value at the specified <paramref name="location"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.InterlockedCompareExchange``1(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}@,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0},Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0})">
            <summary>
            Assigns a field or variable containing an immutable list to the specified value if it is currently equal to
            another specified value. Returns the previous value.
            </summary>
            <typeparam name="T">The type of value stored by the list.</typeparam>
            <param name="location">The field or local variable to change.</param>
            <param name="value">The new value to assign.</param>
            <param name="comparand">The value to check equality for before assigning.</param>
            <returns>The prior value at the specified <paramref name="location"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.InterlockedInitialize``1(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0}@,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{``0})">
            <summary>
            Assigns a field or variable containing an immutable list to the specified value if it is has not yet been
            initialized.
            </summary>
            <typeparam name="T">The type of value stored by the list.</typeparam>
            <param name="location">The field or local variable to change.</param>
            <param name="value">The new value to assign.</param>
            <returns><see langword="true"/> if the field was assigned the specified value; otherwise,
            <see langword="false"/> if it was previously initialized.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.Update``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,System.Func{Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1},Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}})">
            <summary>
            Mutates a value in-place with optimistic locking transaction semantics via a specified transformation
            function. The transformation is retried as many times as necessary to win the optimistic locking race.
            </summary>
            <typeparam name="TKey">The type of key stored by the dictionary.</typeparam>
            <typeparam name="TValue">The type of value stored by the dictionary.</typeparam>
            <param name="location">
            The variable or field to be changed, which may be accessed by multiple threads.
            </param>
            <param name="transformer">
            A function that mutates the value. This function should be side-effect free,
            as it may run multiple times when races occur with other threads.</param>
            <returns>
            <see langword="true"/> if the location's value is changed by applying the result of the
            <paramref name="transformer"/> function; otherwise, <see langword="false"/> if the location's value remained
            the same because the last invocation of <paramref name="transformer"/> returned the existing value.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.Update``3(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,System.Func{Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1},``2,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}},``2)">
            <summary>
            Mutates a value in-place with optimistic locking transaction semantics via a specified transformation
            function. The transformation is retried as many times as necessary to win the optimistic locking race.
            </summary>
            <typeparam name="TKey">The type of key stored by the dictionary.</typeparam>
            <typeparam name="TValue">The type of value stored by the dictionary.</typeparam>
            <typeparam name="TArg">The type of argument passed to the <paramref name="transformer"/>.</typeparam>
            <param name="location">
            The variable or field to be changed, which may be accessed by multiple threads.
            </param>
            <param name="transformer">
            A function that mutates the value. This function should be side-effect free, as it may run multiple times
            when races occur with other threads.</param>
            <param name="transformerArgument">The argument to pass to <paramref name="transformer"/>.</param>
            <returns>
            <see langword="true"/> if the location's value is changed by applying the result of the
            <paramref name="transformer"/> function; otherwise, <see langword="false"/> if the location's value remained
            the same because the last invocation of <paramref name="transformer"/> returned the existing value.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.InterlockedExchange``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1})">
            <summary>
            Assigns a field or variable containing an immutable dictionary to the specified value and returns the
            previous value.
            </summary>
            <typeparam name="TKey">The type of key stored by the dictionary.</typeparam>
            <typeparam name="TValue">The type of value stored by the dictionary.</typeparam>
            <param name="location">The field or local variable to change.</param>
            <param name="value">The new value to assign.</param>
            <returns>The prior value at the specified <paramref name="location"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.InterlockedCompareExchange``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1},Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1})">
            <summary>
            Assigns a field or variable containing an immutable dictionary to the specified value if it is currently
            equal to another specified value. Returns the previous value.
            </summary>
            <typeparam name="TKey">The type of key stored by the dictionary.</typeparam>
            <typeparam name="TValue">The type of value stored by the dictionary.</typeparam>
            <param name="location">The field or local variable to change.</param>
            <param name="value">The new value to assign.</param>
            <param name="comparand">The value to check equality for before assigning.</param>
            <returns>The prior value at the specified <paramref name="location"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.InterlockedInitialize``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1})">
            <summary>
            Assigns a field or variable containing an immutable dictionary to the specified value if it is has not yet
            been initialized.
            </summary>
            <typeparam name="TKey">The type of key stored by the dictionary.</typeparam>
            <typeparam name="TValue">The type of value stored by the dictionary.</typeparam>
            <param name="location">The field or local variable to change.</param>
            <param name="value">The new value to assign.</param>
            <returns><see langword="true"/> if the field was assigned the specified value; otherwise,
            <see langword="false"/> if it was previously initialized.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.GetOrAdd``3(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.GetOrAdd``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,System.Func{``0,``1})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.GetOrAdd``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,``1)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.AddOrUpdate``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.AddOrUpdate``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.TryAdd``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,``1)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.TryUpdate``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,``1,``1)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.RoslynImmutableInterlocked.TryRemove``2(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedDictionary{``0,``1}@,``0,``1@)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.SegmentedArray.Clear``1(Microsoft.CodeAnalysis.Collections.SegmentedArray{``0},System.Int32,System.Int32)">
            <seealso cref="M:System.Array.Clear(System.Array,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.SegmentedArray.Copy``1(Microsoft.CodeAnalysis.Collections.SegmentedArray{``0},Microsoft.CodeAnalysis.Collections.SegmentedArray{``0},System.Int32)">
            <seealso cref="M:System.Array.Copy(System.Array,System.Array,System.Int32)"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.SegmentedArray`1">
            <summary>
            Defines a fixed-size collection with the same API surface and behavior as an "SZArray", which is a
            single-dimensional zero-based array commonly represented in C# as <c>T[]</c>. The implementation of this
            collection uses segmented arrays to avoid placing objects on the Large Object Heap.
            </summary>
            <typeparam name="T">The type of elements stored in the array.</typeparam>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.SegmentedArray`1.SegmentSize">
             <summary>
             The number of elements in each page of the segmented array of type <typeparamref name="T"/>.
             </summary>
             <remarks>
             <para>The segment size is calculated according to <see cref="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1"/>, performs the IL operation
             defined by <see cref="F:System.Reflection.Emit.OpCodes.Sizeof"/>. ECMA-335 defines this operation with the following note:</para>
            
             <para><c>sizeof</c> returns the total size that would be occupied by each element in an array of this type –
             including any padding the implementation chooses to add. Specifically, array elements lie <c>sizeof</c>
             bytes apart.</para>
             </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.SegmentedArray`1.SegmentShift">
            <summary>
            The bit shift to apply to an array index to get the page index within <see cref="F:Microsoft.CodeAnalysis.Collections.SegmentedArray`1._items"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Collections.SegmentedArray`1.OffsetMask">
            <summary>
            The bit mask to apply to an array index to get the index within a page of <see cref="F:Microsoft.CodeAnalysis.Collections.SegmentedArray`1._items"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.SegmentedDictionary`2">
            <summary>
            Represents a collection of keys and values.
            </summary>
            <remarks>
            <para>This collection has the same performance characteristics as <see cref="T:System.Collections.Generic.Dictionary`2"/>, but
            uses segmented arrays to avoid allocations in the Large Object Heap.</para>
            </remarks>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.SegmentedDictionary`2.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the dictionary can hold up to 'capacity' entries without any further expansion of its backing storage
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.SegmentedDictionary`2.TrimExcess">
             <summary>
             Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries
             </summary>
             <remarks>
             This method can be used to minimize the memory overhead
             once it is known that no new elements will be added.
            
             To allocate minimum size storage array, execute the following statements:
            
             dictionary.Clear();
             dictionary.TrimExcess();
             </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Collections.SegmentedDictionary`2.TrimExcess(System.Int32)">
            <summary>
            Sets the capacity of this dictionary to hold up 'capacity' entries without any further expansion of its backing storage
            </summary>
            <remarks>
            This method can be used to minimize the memory overhead
            once it is known that no new elements will be added.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Collections.SegmentedDictionary`2.Entry._next">
            <summary>
            0-based index of next entry in chain: -1 means end of chain
            also encodes whether this entry _itself_ is part of the free list by changing sign and subtracting 3,
            so -2 means end of free list, -3 means index 0 but on free list, -4 means index 1 but on free list, etc.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Collections.SegmentedList`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and
            manipulate lists.
            </summary>
            <remarks>
            <para>This collection has the same performance characteristics as <see cref="T:System.Collections.Generic.List`1"/>, but uses segmented
            arrays to avoid allocations in the Large Object Heap.</para>
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Microsoft.CodeAnalysis.RelativePathResolver.#ctor(System.Collections.Immutable.ImmutableArray{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.CodeAnalysis.RelativePathResolver"/> class.
            </summary>
            <param name="searchPaths">An ordered set of fully qualified 
            paths which are searched when resolving assembly names.</param>
            <param name="baseDirectory">Directory used when resolving relative paths.</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FailFast.Handler">
            <summary>
            A pre-created delegate to assign to <see cref="T:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ErrorReporterHandler" /> if needed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FailFast.DumpStackTrace(System.Exception,System.String)">
            <summary>
            Dumps the stack trace of the exception and the handler to the console. This is useful
            for debugging unit tests that hit a fatal exception
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FailFast.Assert(System.Boolean,System.String)">
            <summary>
            Checks for the given <paramref name="condition"/>; if the <paramref name="condition"/> is <c>true</c>, 
            immediately terminates the process without running any pending <c>finally</c> blocks or finalizers
            and causes a crash dump to be collected (if the system is configured to do so). 
            Otherwise, the process continues normally.
            </summary>
            <param name="condition">The conditional expression to evaluate.</param>
            <param name="message">An optional message to be recorded in the dump in case of failure. Can be <c>null</c>.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler">
            <summary>
            Set by the host to handle an error report; this may crash the process or report telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.OverwriteHandler(Microsoft.CodeAnalysis.ErrorReporting.FatalError.ErrorReporterHandler)">
            <summary>
            Same as setting the Handler property except that it avoids the assert.  This is useful in
            test code which needs to verify the handler is called in specific cases and will continually
            overwrite this value.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.CopyHandlerTo(System.Reflection.Assembly)">
            <summary>
            Copies the handler in this instance to the linked copy of this type in this other assembly.
            </summary>
            <remarks>
            This file is in linked into multiple layers, but we want to ensure that all layers have the same copy.
            This lets us copy the handler in this instance into the same in another instance.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagate(System.Exception,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
            <summary>
            Use in an exception filter to report an error without catching the exception.
            The error is reported by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>.
            </summary>
            <returns><see langword="false"/> to avoid catching the exception.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagateUnlessCanceled(System.Exception,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
            <summary>
            Use in an exception filter to report an error (by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>), unless the
            operation has been cancelled. The exception is never caught.
            </summary>
            <returns><see langword="false"/> to avoid catching the exception.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndPropagateUnlessCanceled(System.Exception,System.Threading.CancellationToken,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
             <summary>
             <para>Use in an exception filter to report an error (by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>), unless the
             operation has been cancelled at the request of <paramref name="contextCancellationToken"/>. The exception is
             never caught.</para>
            
             <para>Cancellable operations are only expected to throw <see cref="T:System.OperationCanceledException"/> if the
             applicable <paramref name="contextCancellationToken"/> indicates cancellation is requested by setting
             <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/>. Unexpected cancellation, i.e. an
             <see cref="T:System.OperationCanceledException"/> which occurs without <paramref name="contextCancellationToken"/>
             requesting cancellation, is treated as an error by this method.</para>
            
             <para>This method does not require <see cref="P:System.OperationCanceledException.CancellationToken"/> to match
             <paramref name="contextCancellationToken"/>, provided cancellation is expected per the previous
             paragraph.</para>
             </summary>
             <param name="contextCancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which will have
             <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> set if cancellation is expected.</param>
             <returns><see langword="false"/> to avoid catching the exception.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndCatch(System.Exception,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
            <summary>
            Report an error.
            Calls <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/> and doesn't pass the exception through (the method returns true).
            This is generally expected to be used within an exception filter as that allows us to
            capture data at the point the exception is thrown rather than when it is handled.
            However, it can also be used outside of an exception filter. If the exception has not
            already been thrown the method will throw and catch it itself to ensure we get a useful
            stack trace.
            </summary>
            <returns>True to catch the exception.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndCatchUnlessCanceled(System.Exception,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
            <summary>
            Use in an exception filter to report an error (by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>) and catch
            the exception, unless the operation was cancelled.
            </summary>
            <returns><see langword="true"/> to catch the exception if the error was reported; otherwise,
            <see langword="false"/> to propagate the exception if the operation was cancelled.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportIfNonFatalAndCatchUnlessCanceled(System.Exception,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
            <summary>
            Use in an exception filter to report an error (by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>) and catch
            the exception, unless the operation was cancelled.
            </summary>
            <returns><see langword="true"/> to catch the exception if the error was reported; otherwise,
            <see langword="false"/> to propagate the exception if the operation was cancelled.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportAndCatchUnlessCanceled(System.Exception,System.Threading.CancellationToken,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
             <summary>
             <para>Use in an exception filter to report an error (by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>) and
             catch the exception, unless the operation was cancelled at the request of
             <paramref name="contextCancellationToken"/>.</para>
            
             <para>Cancellable operations are only expected to throw <see cref="T:System.OperationCanceledException"/> if the
             applicable <paramref name="contextCancellationToken"/> indicates cancellation is requested by setting
             <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/>. Unexpected cancellation, i.e. an
             <see cref="T:System.OperationCanceledException"/> which occurs without <paramref name="contextCancellationToken"/>
             requesting cancellation, is treated as an error by this method.</para>
            
             <para>This method does not require <see cref="P:System.OperationCanceledException.CancellationToken"/> to match
             <paramref name="contextCancellationToken"/>, provided cancellation is expected per the previous
             paragraph.</para>
             </summary>
             <param name="contextCancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which will have
             <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> set if cancellation is expected.</param>
             <returns><see langword="true"/> to catch the exception if the error was reported; otherwise,
             <see langword="false"/> to propagate the exception if the operation was cancelled.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportIfNonFatalAndCatchUnlessCanceled(System.Exception,System.Threading.CancellationToken,Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity)">
             <summary>
             <para>Use in an exception filter to report an error (by calling <see cref="P:Microsoft.CodeAnalysis.ErrorReporting.FatalError.Handler"/>) and
             catch the exception, unless the operation was cancelled at the request of
             <paramref name="contextCancellationToken"/>.</para>
            
             <para>Cancellable operations are only expected to throw <see cref="T:System.OperationCanceledException"/> if the
             applicable <paramref name="contextCancellationToken"/> indicates cancellation is requested by setting
             <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/>. Unexpected cancellation, i.e. an
             <see cref="T:System.OperationCanceledException"/> which occurs without <paramref name="contextCancellationToken"/>
             requesting cancellation, is treated as an error by this method.</para>
            
             <para>This method does not require <see cref="P:System.OperationCanceledException.CancellationToken"/> to match
             <paramref name="contextCancellationToken"/>, provided cancellation is expected per the previous
             paragraph.</para>
             </summary>
             <param name="contextCancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which will have
             <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> set if cancellation is expected.</param>
             <returns><see langword="true"/> to catch the exception if the error was reported; otherwise,
             <see langword="false"/> to propagate the exception if the operation was cancelled.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity">
            <summary>
            The severity of the error, see the enum members for a description of when to use each. This is metadata that's included
            in a non-fatal fault report, which we can take advantage of on the backend to automatically triage bugs. For example,
            a critical severity issue we can open with a lower bug count compared to a low priority one.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity.Uncategorized">
            <summary>
            The severity hasn't been categorized. Don't use this in new code.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity.Diagnostic">
            <summary>
            Something failed, but the user is unlikely to notice. Especially useful for background things that we can silently recover
            from, like bugs in caching systems.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity.General">
            <summary>
            Something failed, and the user might notice, but they're still likely able to carry on. For example, if the user
            asked for some information from the IDE (find references, completion, etc.) and we were able to give partial results.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ErrorReporting.ErrorSeverity.Critical">
            <summary>
            Something failed, and the user likely noticed. For example, the user pressed a button to do an action, and
            we threw an exception so we completely failed to do that in an unrecoverable way. This may also be used
            for back-end systems where a failure is going to result in a highly broken experience, for example if parsing a file
            catastrophically failed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.StackGuard.EnsureSufficientExecutionStack(System.Int32)">
            <summary>
                Ensures that the remaining stack space is large enough to execute
                the average function.
            </summary>
            <param name="recursionDepth">how many times the calling function has recursed</param>
            <exception cref="T:System.InsufficientExecutionStackException">
                The available stack space is insufficient to execute
                the average function.
            </exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImports.AddImportPlacement">
            <summary>
            Specifies the desired placement of added imports.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.AddImports.AddImportPlacement.InsideNamespace">
            <summary>
            Place imports inside the namespace definition.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.AddImports.AddImportPlacement.OutsideNamespace">
            <summary>
            Place imports outside the namespace definition.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImports.IAddImportsService.HasExistingImport(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator)">
            <summary>
            Returns true if the tree already has an existing import syntactically equivalent to
            <paramref name="import"/> in scope at <paramref name="contextLocation"/>.  This includes
            global imports for VB.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImports.IAddImportsService.GetImportContainer(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Given a context location in a provided syntax tree, returns the appropriate container
            that <paramref name="import"/> should be added to.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigFile`1">
            <summary>
            Base representation of an editorconfig file that has been parsed
            </summary>
            <typeparam name="T">The kind of options that we expect to encounter in the editorconfig file.</typeparam>
            <param name="FilePath">The full path to the editorconfig file on disk. Optional if not doing pathwise comparisons</param>
            <param name="Options">The set of options that were discovered in the file.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigFile`1.#ctor(System.String,System.Collections.Immutable.ImmutableArray{`0})">
            <summary>
            Base representation of an editorconfig file that has been parsed
            </summary>
            <typeparam name="T">The kind of options that we expect to encounter in the editorconfig file.</typeparam>
            <param name="FilePath">The full path to the editorconfig file on disk. Optional if not doing pathwise comparisons</param>
            <param name="Options">The set of options that were discovered in the file.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigFile`1.TryGetSectionForLanguage(Microsoft.CodeAnalysis.EditorConfig.Language,Microsoft.CodeAnalysis.EditorConfig.Parsing.Section@)">
            <summary>
            Attempts to find a section of the editorconfig file that is an exact match for the given language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigFile`1.TryGetSectionForLanguage(Microsoft.CodeAnalysis.EditorConfig.Language,Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch,Microsoft.CodeAnalysis.EditorConfig.Parsing.Section@)">
            <summary>
            Attempts to find a section of the editorconfig file that applies to the given language for the given criteria.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigFile`1.TryGetSectionForFilePath(System.String,Microsoft.CodeAnalysis.EditorConfig.Parsing.Section@)">
            <summary>
            Attempts to find a section of the editorconfig file that applies to the given file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigFile`1.TryGetSectionForFilePath(System.String,Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch,Microsoft.CodeAnalysis.EditorConfig.Parsing.Section@)">
            <summary>
            Attempts to find a section of the editorconfig file that applies to the given file for the given criteria.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption">
            <summary>
            Base option that all editorconfig option inherit from.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption.#ctor(Microsoft.CodeAnalysis.EditorConfig.Parsing.Section,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Base option that all editorconfig option inherit from.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption`1">
            <summary>
            An abstraction over an editorconfig option that reprsents some type <typeparamref name="T"/> and the span in which that option was defined.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption`1.#ctor(Microsoft.CodeAnalysis.EditorConfig.Parsing.Section,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},`0)">
            <summary>
            An abstraction over an editorconfig option that reprsents some type <typeparamref name="T"/> and the span in which that option was defined.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.EditorConfigNamingStyles">
            <summary>
            Represents a completed parse of a single editorconfig document
            </summary>
            <param name="FileName">The full file path to the file on disk. Can be null if you never need to compare if a section is valid for pathing reasons</param>
            <param name="Rules">The set of naming style options that were parsed in the file</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.EditorConfigNamingStyles.#ctor(System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.NamingStyleOption})">
            <summary>
            Represents a completed parse of a single editorconfig document
            </summary>
            <param name="FileName">The full file path to the file on disk. Can be null if you never need to compare if a section is valid for pathing reasons</param>
            <param name="Rules">The set of naming style options that were parsed in the file</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.EditorConfigNamingStylesParser.Parse(System.String,System.String)">
            <summary>
            Parses a string and returns all discovered naming style options and their locations
            </summary>
            <param name="editorConfigText">The text contents of the editorconfig file.</param>
            <param name="pathToEditorConfigFile">The full path to the editorconfig file on disk.</param>
            <returns>A type that represents all discovered naming style options in the given string.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.EditorConfigNamingStylesParser.Parse(Microsoft.CodeAnalysis.Text.SourceText,System.String)">
            <summary>
            Parses a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> and returns all discovered naming style options and their locations
            </summary>
            <param name="editorConfigText">The <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> contents of the editorconfig file.</param>
            <param name="pathToEditorConfigFile">The full path to the editorconfig file on disk.</param>
            <returns>A type that represents all discovered naming style options in the given <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.NamingStyleOption">
            <summary>
            The root naming style option composed of several settings as well as a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>s describing where they were all defined. 
            </summary>
            <param name="Section">The section of the editorconfig file this option applies to.</param>
            <param name="RuleName">The name given to thie option in the file.</param>
            <param name="ApplicableSymbolInfo">The kinds of symbols this option applies to.</param>
            <param name="NamingScheme">The rules about how the specified symbols must be named.</param>
            <param name="Severity">The keve of build error that should be produced when a matching symbol does not meetthe naming requirements.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.NamingStyleOption.#ctor(Microsoft.CodeAnalysis.EditorConfig.Parsing.Section,Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.String},Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.ApplicableSymbolInfo,Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.NamingScheme,Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{Microsoft.CodeAnalysis.ReportDiagnostic})">
            <summary>
            The root naming style option composed of several settings as well as a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>s describing where they were all defined. 
            </summary>
            <param name="Section">The section of the editorconfig file this option applies to.</param>
            <param name="RuleName">The name given to thie option in the file.</param>
            <param name="ApplicableSymbolInfo">The kinds of symbols this option applies to.</param>
            <param name="NamingScheme">The rules about how the specified symbols must be named.</param>
            <param name="Severity">The keve of build error that should be produced when a matching symbol does not meetthe naming requirements.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.ApplicableSymbolInfo">
            <summary>
            A description of the kinds of symbols a rule should apply to as well as a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>s describing where they were all defined. 
            </summary>
            <param name="OptionName">The name given to thie option in the file.</param>
            <param name="SymbolKinds">The kinds of symbols this option applies to.</param>
            <param name="Accessibilities">The accessibilities of symbols this option applies to.</param>
            <param name="Modifiers">The required modifier that must be present on symbols this option applies to.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.ApplicableSymbolInfo.#ctor(Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.String},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.SymbolSpecification.SymbolKindOrTypeKind}},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Accessibility}},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.SymbolSpecification.ModifierKind}})">
            <summary>
            A description of the kinds of symbols a rule should apply to as well as a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>s describing where they were all defined. 
            </summary>
            <param name="OptionName">The name given to thie option in the file.</param>
            <param name="SymbolKinds">The kinds of symbols this option applies to.</param>
            <param name="Accessibilities">The accessibilities of symbols this option applies to.</param>
            <param name="Modifiers">The required modifier that must be present on symbols this option applies to.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.NamingScheme">
            <summary>
            The rules about how the specified symbols must be named as well as a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>s describing where they were all defined. 
            </summary>
            <param name="OptionName">The name given to thie option in the file.</param>
            <param name="Prefix">Required suffix</param>
            <param name="Suffix">Required prefix</param>
            <param name="WordSeparator">Required word separator characters</param>
            <param name="Capitalization">The capitalization scheme</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.NamingStyles.NamingScheme.#ctor(Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.String},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.String},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.String},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{System.String},Microsoft.CodeAnalysis.EditorConfig.Parsing.EditorConfigOption{Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.Capitalization})">
            <summary>
            The rules about how the specified symbols must be named as well as a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>s describing where they were all defined. 
            </summary>
            <param name="OptionName">The name given to thie option in the file.</param>
            <param name="Prefix">Required suffix</param>
            <param name="Suffix">Required prefix</param>
            <param name="WordSeparator">Required word separator characters</param>
            <param name="Capitalization">The capitalization scheme</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.Section.GetHeaderTextForLanguage(Microsoft.CodeAnalysis.EditorConfig.Language)">
            <summary>
            Returns the default section header text for the given language combination
            </summary>
            <param name="language">The language combination to find the default header text for.</param>
            <returns>the default header text.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.Section.SupportsLanguage(Microsoft.CodeAnalysis.EditorConfig.Language,Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch)">
            <summary>
            Checks where this header supports the given language for the given match criteria
            </summary>
            <param name="language">The language to check support for.</param>
            <param name="matchKind">The criteria for which we consider a language a mache the default is <see cref="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.ExactLanguageMatch"/>.</param>
            <returns>If this section is a match for the given language, meaning options can be added here.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditorConfig.Parsing.Section.SupportsFilePath(System.String,Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch)">
            <summary>
            Checks where this header supports the given file path for the given match criteria
            </summary>
            <param name="codeFilePath">full path to a file</param>
            <param name="matchKind">The criteria for which we consider a language a mache the default is <see cref="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.ExactLanguageMatch"/>.</param>
            <remarks>
            If the section header cannot be parsed because it it invalid this method will always return no match.
            If no file path was given in the operation that produces this section and a relative path comparison is required to check for support this method will return no match.
            </remarks>
            <returns>If this section is a match for the given file, meaning options can be added here.</returns>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.ExactLanguageMatch">
            <summary>
            Most exact section match for a language. Will always match all files for the given language.
            </summary>
            <remarks>
            - for C# this is [*.cs]
            - for Visual Basic it is [*.vb].
            - If both language are specified it is [*.{cs,vb}]
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.ExactLanguageMatchWithOthers">
            <summary>
            Exact section match for a language with unknown file patterns. Will always match all files for the given language.
            </summary>
            <remarks>
            An exact match but with some unknown file patterns also matching
            example for C#: [*.{cs,csx}] 
            This will not be the case if only C# was specified and a VB pattern is found
            (or vice versa)
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.AnyLanguageMatch">
            <summary>
            An exact section match for a language with other known language patterns. Will match all files for the given language as well as other known languages.
            </summary>
            <remarks>
            Given this pattern [*.{cs,vb}] for C# this is considered a match (since it matches all C# files).
            Even though it also matches for Visual Basic.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.SupersetFilePatternMatch">
            <summary>
            Matches the file pattern according to the editorconfig specification but is a superset of an exact language match.
            </summary>
            <remarks>
            Patterns such as [*c*] or [*s] would match for C# in this case (being a superset of *.cs)
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.FilePatternMatch">
            <summary>
            Matches the file pattern according to the editorconfig specification but is a supset of an exact language match.
            </summary>
            <remarks>
            Patterns such as [*.Tests.cs] would match for C# if the file being considered is UnitTests.cs
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.SplatMatch">
            <summary>
            Matches [*].
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.GlobalSectionMatch">
            <summary>
            Matched because section is global and therefore always matches.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.AnyButGlobal">
            <summary>
            Matches any valid pattern except for global section.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.Any">
            <summary>
            Matches any valid pattern.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditorConfig.Parsing.SectionMatch.NoMatch">
            <summary>
            Section did not match and is not applicable to the file or language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Precedence.IPrecedenceService.GetPrecedenceKind(System.Int32)">
            <summary>
            Returns the precedence of the given expression, mapped down to one of the 
            <see cref="T:Microsoft.CodeAnalysis.Precedence.PrecedenceKind"/> values.  The mapping is language specific.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Precedence.IPrecedenceService.GetOperatorPrecedence(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns the precedence of this expression in a scale specific to a particular
            language.  These values cannot be compared across languages, but relates the 
            precedence of expressions in the same language.  A smaller value means lower
            precedence.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph,Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer{`0},System.Threading.CancellationToken)">
            <summary>
            Runs dataflow analysis for the given <paramref name="analyzer"/> on the given <paramref name="controlFlowGraph"/>.
            </summary>
            <param name="controlFlowGraph">Control flow graph on which to execute analysis.</param>
            <param name="analyzer">Dataflow analyzer.</param>
            <returns>Block analysis data at the end of the exit block.</returns>
            <remarks>
            Algorithm for this CFG walker has been forked from <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphBuilder"/>'s internal
            implementation for basic block reachability computation: "MarkReachableBlocks",
            we should keep them in sync as much as possible.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1">
            <summary>
            Analyzer to execute custom dataflow analysis on a control flow graph.
            </summary>
            <typeparam name="TBlockAnalysisData">Custom data tracked for each basic block with values at start of the block.</typeparam>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.GetCurrentAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock)">
            <summary>
            Gets current analysis data for the given basic block, or an empty analysis data.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.GetEmptyAnalysisData">
            <summary>
            Gets empty analysis data for first analysis pass on a basic block.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.SetCurrentAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock,`0,System.Threading.CancellationToken)">
            <summary>
            Updates the current analysis data for the given basic block.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.AnalyzeBlock(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock,System.Threading.CancellationToken)">
            <summary>
            Analyze the given basic block and return the block analysis data at the end of the block for its successors.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.AnalyzeNonConditionalBranch(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock,`0,System.Threading.CancellationToken)">
            <summary>
            Analyze the non-conditional fallthrough successor branch for the given basic block
            and return the block analysis data for the branch destination.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.AnalyzeConditionalBranch(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock,`0,System.Threading.CancellationToken)">
            <summary>
            Analyze the given conditional branch for the given basic block and return the
            block analysis data for the branch destinations for the fallthrough and
            conditional successor branches.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.Merge(`0,`0,System.Threading.CancellationToken)">
            <summary>
            Merge the given block analysis data instances to produce the resultant merge data.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.IsEqual(`0,`0)">
            <summary>
            Returns true if both the given block analysis data instances should be considered equivalent by analysis.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.DataFlowAnalyzer`1.AnalyzeUnreachableBlocks">
            <summary>
            Flag indicating if the dataflow analysis should run on unreachable blocks.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.FlowCaptureKind">
            <summary>
            Indicates the kind of flow capture in an <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureOperation"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.FlowCaptureKind.RValueCapture">
            <summary>
            Indicates an R-Value flow capture, i.e. capture of a symbol's value.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.FlowCaptureKind.LValueCapture">
            <summary>
            Indicates an L-Value flow capture, i.e. captures of a symbol's location/address.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.FlowCaptureKind.LValueAndRValueCapture">
            <summary>
            Indicates both an R-Value and an L-Value flow capture, i.e. captures of a symbol's value and location/address.
            These are generated for left of a compound assignment operation, such that there is conditional code on the right side of the compound assignment.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.LValueFlowCapturesProvider">
            <summary>
            Helper class to detect <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureOperation"/>s that are l-value captures.
            L-value captures are essentially captures of a symbol's location/address.
            Corresponding <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation"/>s which share the same
            <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.CaptureId"/> as this flow capture, dereferences and writes to this location
            subsequently in the flow graph.
            For example, consider the below code:
                a[i] = x ?? a[j];
            The control flow graph contains an initial flow capture of "a[i]" to capture the l-value
            of this array element:
                FC0 (a[i])
            Then it evaluates the right hand side, which can have different
            values on different control flow paths, and the resultant value is then written
            to the captured location:
                FCR0 = result
            </summary>
            <remarks>
            NOTE: This type is a workaround for https://github.com/dotnet/roslyn/issues/31007
            and it can be deleted once that feature is implemented.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis">
            <summary>
            Analysis to compute all the symbol writes for local and parameter
            symbols in an executable code block, along with the information of whether or not the definition
            may be read on some control flow path.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData">
            <summary>
            Core analysis data to drive the operation <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker"/>
            for operation tree based analysis OR control flow graph based analysis.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData._allocatedBasicBlockAnalysisDatas">
            <summary>
            Pooled <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.BasicBlockAnalysisData"/> allocated during analysis with the
            current <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData"/> instance, which will be freed during <see cref="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.Dispose"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData._referenceTakenSymbolsBuilder">
            <summary>
            Set of locals/parameters which are passed by reference to other method calls.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.SymbolsWriteBuilder">
            <summary>
            Map from each (symbol, write) to a boolean indicating if the value assigned
            at the write is read on some control flow path.
            For example, consider the following code:
            <code>
                int x = 0;
                x = 1;
                Console.WriteLine(x);
            </code>
            This map will have two entries for 'x':
                1. Key = (symbol: x, write: 'int x = 0')
                   Value = 'false', because value assigned to 'x' here **is never** read. 
                2. Key = (symbol: x, write: 'x = 1')
                   Value = 'true', because value assigned to 'x' here **may be** read on
                   some control flow path.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.SymbolsReadBuilder">
            <summary>
            Set of locals/parameters that are read at least once.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.LambdaOrLocalFunctionsBeingAnalyzed">
            <summary>
            Set of lambda/local functions whose invocations are currently being analyzed to prevent
            infinite recursion for analyzing code with recursive lambda/local function calls.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.CurrentBlockAnalysisData">
            <summary>
            Current block analysis data used for analysis.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.AdditionalConditionalBranchAnalysisData">
            <summary>
            Block analysis data used for an additional conditional branch.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.ToResult">
            <summary>
            Creates an immutable <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult"/> for the current analysis data.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.ResetState">
            <summary>
            Resets all the currently tracked symbol writes to be conservatively marked as read.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.BasicBlockAnalysisData">
            <summary>
            Analysis data for a particular <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock"/> for <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph"/>
            based dataflow analysis OR for the entire executable code block for high level operation
            tree based analysis.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.BasicBlockAnalysisData._reachingWrites">
            <summary>
            Map from each symbol to possible set of reachable write operations that are live at current program point.
            A write is live if there is no intermediate write operation that overwrites it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.BasicBlockAnalysisData.GetCurrentWrites(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the currently reachable writes for the given symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.BasicBlockAnalysisData.OnWriteReferenceFound(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.IOperation,System.Boolean)">
            <summary>
            Marks the given symbol write as a new unread write operation,
            potentially clearing out the prior write operations if <paramref name="maybeWritten"/> is <code>false</code>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Runs dataflow analysis on the given control flow graph to compute symbol usage results
            for symbol read/writes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(Microsoft.CodeAnalysis.IOperation,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Runs a fast, non-precise operation tree based analysis to compute symbol usage results
            for symbol read/writes.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer">
            <summary>
            Dataflow analysis to compute symbol usage information (i.e. reads/writes) for locals/parameters
            in a given control flow graph, along with the information of whether or not the writes
            may be read on some control flow path.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._analysisDataByBasicBlockMap">
            <summary>
            Map from basic block to current <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.BasicBlockAnalysisData"/> for dataflow analysis.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._analyzeLocalFunctionOrLambdaInvocation">
            <summary>
            Callback to analyze lambda/local function invocations and return new block analysis data.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._lValueFlowCapturesMap">
            <summary>
            Map from flow capture ID to set of captured symbol addresses along all possible control flow paths.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._reachingDelegateCreationTargets">
            <summary>
            Map from operations to potential delegate creation targets that could be invoked via delegate invocation
            on the operation.
            Used to analyze delegate creations/invocations of lambdas and local/functions defined in a method.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._localFunctionTargetsToAccessingCfgMap">
            <summary>
            Map from local functions to the <see cref="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.ControlFlowGraph"/> where the local function was accessed
            to create an invocable delegate. This control flow graph is required to lazily get or create the
            control flow graph for this local function at delegate invocation callsite.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._lambdaTargetsToAccessingCfgMap">
            <summary>
            Map from lambdas to the <see cref="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.ControlFlowGraph"/> where the lambda was defined
            to create an invocable delegate. This control flow graph is required to lazily get or create the
            control flow graph for this lambda at delegate invocation callsite.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData._symbolWritesInsideBlockRangeMap">
            <summary>
            Map from basic block range to set of writes within this block range.
            Used for try-catch-finally analysis, where start of catch/finally blocks should
            consider all writes in the corresponding try block as reachable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.LValueFlowCapturesInGraph">
            <summary>
            Flow captures for l-value or address captures.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.HandleCatchOrFilterOrFinallyInitialization(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock,System.Threading.CancellationToken)">
            <summary>
            Special handling to ensure that at start of catch/filter/finally region analysis,
            we mark all symbol writes from the corresponding try region as reachable in the
            catch/filter/finally region.
            </summary>
            <param name="basicBlock"></param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker">
            <summary>
            Operations walker used for walking high-level operation tree
            as well as control flow graph based operations.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult.SymbolWritesMap">
            <summary>
            Map from each symbol write to a boolean indicating if the value assinged
            at write is used/read on some control flow path.
            For example, consider the following code:
            <code>
                int x = 0;
                x = 1;
                Console.WriteLine(x);
            </code>
            This map will have two entries for 'x':
                1. Key = (symbol: x, write: 'int x = 0')
                   Value = 'false', because value assigned to 'x' here **is never** read. 
                2. Key = (symbol: x, write: 'x = 1')
                   Value = 'true', because value assigned to 'x' here **may be** read on
                   some control flow path.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult.SymbolsRead">
            <summary>
            Set of locals/parameters that are read at least once.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult.GetUnreadSymbolWrites">
            <summary>
            Gets symbol writes that have are never read.
            WriteOperation will be null for the initial value write to parameter symbols from the callsite.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult.IsInitialParameterValueUsed(Microsoft.CodeAnalysis.IParameterSymbol)">
            <summary>
            Returns true if the initial value of the parameter from the caller is used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult.GetSymbolWriteCount(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the write count for a given local/parameter symbol.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolKey">
            <summary>
            <para>
            A <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/> is a lightweight identifier for a symbol that can be used to 
            resolve the "same" symbol across compilations.  Different symbols have different concepts 
            of "same-ness". Same-ness is recursively defined as follows:
            <list type="number">
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IArrayTypeSymbol"/>s are the "same" if they have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.IArrayTypeSymbol.ElementType"/> and 
                    equal <see cref="P:Microsoft.CodeAnalysis.IArrayTypeSymbol.Rank"/>.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IAssemblySymbol"/>s are the "same" if 
                    they have equal <see cref="P:Microsoft.CodeAnalysis.IAssemblySymbol.Identity"/>.Name</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IEventSymbol"/>s are the "same" if they have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingType"/> and 
                    equal <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/>s are the "same" if they have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingType"/>,
                    equal <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>,
                    equal <see cref="P:Microsoft.CodeAnalysis.IMethodSymbol.Arity"/>, 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments"/>, and have
                    the "same" <see cref="P:Microsoft.CodeAnalysis.IParameterSymbol.Type"/>s and  
                    equal <see cref="P:Microsoft.CodeAnalysis.IParameterSymbol.RefKind"/>s.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IModuleSymbol"/>s are the "same" if they have
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingAssembly"/>.
                    <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/> is not used because module identity is not important in practice.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>s are the "same" if they have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol"/>,
                    equal <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>,
                    equal <see cref="P:Microsoft.CodeAnalysis.INamedTypeSymbol.Arity"/> and 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments"/>.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s are the "same" if they have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol"/> and
                    equal <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>.
                If the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/> is the global namespace for a
                compilation, then it will only match another
                global namespace of another compilation.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IParameterSymbol"/>s are the "same" if they have
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol"/> and 
                    equal <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IPointerTypeSymbol"/>s are the "same" if they have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.IPointerTypeSymbol.PointedAtType"/>.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol"/>s are the "same" if they have 
                    the "same" the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingType"/>, 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>, and have 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.IParameterSymbol.Type"/>s and  
                    the "same" <see cref="P:Microsoft.CodeAnalysis.IParameterSymbol.RefKind"/>s.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.ITypeParameterSymbol"/> are the "same" if they have
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol"/> and 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>.</item>
              <item>Two <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/>s are the "same" if they have
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol"/> and 
                    the "same" <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>.</item>
            </list>
            </para>
            <para>
            Interior-method-level symbols (i.e. <see cref="T:Microsoft.CodeAnalysis.ILabelSymbol"/>, <see cref="T:Microsoft.CodeAnalysis.ILocalSymbol"/>, <see
            cref="T:Microsoft.CodeAnalysis.IRangeVariableSymbol"/> and <see cref="F:Microsoft.CodeAnalysis.MethodKind.LocalFunction"/> <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/>s can also
            be represented and restored in a different compilation.  To resolve these the destination compilation's <see
            cref="T:Microsoft.CodeAnalysis.SyntaxTree"/> is enumerated to list all the symbols with the same <see cref="P:Microsoft.CodeAnalysis.ISymbol.Name"/> and <see
            cref="P:Microsoft.CodeAnalysis.ISymbol.Kind"/> as the original symbol.  The symbol with the same index in the destination tree as the
            symbol in the original tree is returned.  This allows these sorts of symbols to be resolved in a way that is
            resilient to basic forms of edits.  For example, adding whitespace edits, or adding removing symbols with
            different names and types.  However, it may not find a matching symbol in the face of other sorts of edits.
            </para>
            <para>
            Symbol keys cannot be created for interior-method symbols that were created in a speculative semantic model.
            </para>
            <para>
                Due to issues arising from errors and ambiguity, it's possible for a SymbolKey to resolve to
                multiple symbols. For example, in the following type:
                <code>
                class C
                {
                   int M();
                   bool M();
                }
                </code>
                The SymbolKey for both 'M' methods will be the same.  The SymbolKey will then resolve to both methods.
            </para>
            <para>
            <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/>s are not guaranteed to work across different versions of Roslyn. They can be persisted
            in their <see cref="M:Microsoft.CodeAnalysis.SymbolKey.ToString"/> form and used across sessions with the same version of Roslyn. However, future
            versions may change the encoded format and may no longer be able to <see cref="M:Microsoft.CodeAnalysis.SymbolKey.Resolve(Microsoft.CodeAnalysis.Compilation,System.Boolean,System.Threading.CancellationToken)"/> previous keys.  As
            such, only persist if using for a cache that can be regenerated if necessary.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolKey.AnonymousFunctionOrDelegateSymbolKey">
            <summary>
            Anonymous functions and anonymous-delegates (the special VB synthesized delegate types),
            only come into existence when someone has explicitly written a lambda in their source 
            code. So to appropriately round-trip this symbol we store the location that the lambda
            was at so that we can find the symbol again when we resolve the key.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SymbolKey.FormatVersion">
            <summary>
            Current format version.  Any time we change anything about our format, we should
            change this.  This will help us detect and reject any cases where a person serializes
            out a SymbolKey from a previous version of Roslyn and then attempt to use it in a 
            newer version where the encoding has changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/> using the result of a previous call to
            <see cref="M:Microsoft.CodeAnalysis.SymbolKey.ToString"/> from this same session.  Instantiating with a string 
            from any other source is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.Create(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Constructs a new <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/> representing the provided <paramref name="symbol"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.GetComparer(System.Boolean,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that determines if two <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/>s
            represent the same effective symbol.
            </summary>
            <param name="ignoreCase">Whether or not casing should be considered when comparing keys. 
            For example, with <c>ignoreCase=true</c> then <c>X.SomeClass</c> and <c>X.Someclass</c> would be 
            considered the same effective symbol</param>
            <param name="ignoreAssemblyKeys">Whether or not the originating assembly of referenced
            symbols should be compared when determining if two symbols are effectively the same.
            For example, with <c>ignoreAssemblyKeys=true</c> then an <c>X.SomeClass</c> from assembly 
            <c>A</c> and <c>X.SomeClass</c> from assembly <c>B</c> will be considered the same
            effective symbol.
            </param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.Resolve(Microsoft.CodeAnalysis.Compilation,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Tries to resolve this <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/> in the given 
            <paramref name="compilation"/> to a matching symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.ToString">
            <summary>
            Returns this <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/> encoded as a string.  This can be persisted
            and used later with <see cref="M:Microsoft.CodeAnalysis.SymbolKey.#ctor(System.String)"/> to then try to resolve back
            to the corresponding <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> in a future <see cref="T:Microsoft.CodeAnalysis.Compilation"/>.
            
            This string form is not guaranteed to be reusable across all future versions of 
            Roslyn.  As such it should only be used for caching data, with the knowledge that
            the data may need to be recomputed if the cached data can no longer be used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.ErrorTypeSymbolKey.GetContainingNamespaceNamesInReverse(Microsoft.CodeAnalysis.INamespaceSymbol)">
            <summary>
            For a symbol like <c>System.Collections.Generic.IEnumerable</c>, this would produce <c>"Generic",
            "Collections", "System"</c>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.SymbolKeyReader.ReadSymbolKeyArray``1(System.String@)">
            <summary>
            Reads an array of symbols out from the key.  Note: the number of symbols returned 
            will either be the same as the original amount written, or <c>default</c> will be 
            returned. It will never be less or more.  <c>default</c> will be returned if any 
            elements could not be resolved to the requested <typeparamref name="TSymbol"/> type 
            in the provided <see cref="P:Microsoft.CodeAnalysis.SymbolKey.SymbolKeyReader.Compilation"/>.
            
            Callers should <see cref="M:System.IDisposable.Dispose"/> the instance returned.  No check is
            necessary if <c>default</c> was returned before calling <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolKey.SymbolKeyWriter.WriteSymbolKeyArray``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Writes out the provided symbols to the key.  The array provided must not
            be <c>default</c>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolKeyResolution">
            <summary>
            The result of <see cref="M:Microsoft.CodeAnalysis.SymbolKey.Resolve(Microsoft.CodeAnalysis.Compilation,System.Boolean,System.Threading.CancellationToken)"/>. If the <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/> could be uniquely mapped to a
            single <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> then that will be returned in <see cref="P:Microsoft.CodeAnalysis.SymbolKeyResolution.Symbol"/>.  Otherwise, if the key resolves
            to multiple symbols (which can happen in error scenarios), then <see cref="P:Microsoft.CodeAnalysis.SymbolKeyResolution.CandidateSymbols"/> and <see
            cref="P:Microsoft.CodeAnalysis.SymbolKeyResolution.CandidateReason"/> will be returned.
            
            If no symbol can be found <see cref="P:Microsoft.CodeAnalysis.SymbolKeyResolution.Symbol"/> will be <c>null</c> and <see cref="P:Microsoft.CodeAnalysis.SymbolKeyResolution.CandidateSymbols"/>
            will be empty.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PublicContract">
            <summary>
            Helpers used for public API argument validation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PublicContract.ToBoxedImmutableArrayWithNonNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Use to validate public API input for properties that are exposed as <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.PublicContract.ToBoxedImmutableArrayWithDistinctNonNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Use to validate public API input for properties that are exposed as <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> and 
            whose items should be unique.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SerializableBytes">
            <summary>
            Helpers to create temporary streams backed by pooled memory
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.OperationExtensions.GetValueUsageInfo(Microsoft.CodeAnalysis.IOperation,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.ValueUsageInfo"/> for the given operation.
            This extension can be removed once https://github.com/dotnet/roslyn/issues/25057 is implemented.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.OperationExtensions.IsAnyCompoundAssignment(Microsoft.CodeAnalysis.IOperation)">
            <summary>
            Retursn true if the given operation is a regular compound assignment,
            i.e. <see cref="T:Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation"/> such as <code>a += b</code>,
            or a special null coalescing compoud assignment, i.e. <see cref="T:Microsoft.CodeAnalysis.Operations.ICoalesceAssignmentOperation"/>
            such as <code>a ??= b</code>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.OperationExtensions.WalkDownConversion(Microsoft.CodeAnalysis.IOperation)">
            <summary>
            Walks down consecutive conversion operations until an operand is reached that isn't a conversion operation.
            </summary>
            <param name="operation">The starting operation.</param>
            <returns>The inner non conversion operation or the starting operation if it wasn't a conversion operation.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SymbolUsageInfo">
            <summary>
            Provides information about the way a particular symbol is being used at a symbol reference node.
            For namespaces and types, this corresponds to values from <see cref="T:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo"/>.
            For methods, fields, properties, events, locals and parameters, this corresponds to values from <see cref="T:Microsoft.CodeAnalysis.ValueUsageInfo"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.None">
            <summary>
            Represents default value indicating no usage.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.Qualified">
            <summary>
            Represents a reference to a namespace or type on the left side of a dotted name (qualified name or member access).
            For example, 'NS' in <code>NS.Type x = new NS.Type();</code> or <code>NS.Type.StaticMethod();</code> or 
            'Type' in <code>Type.NestedType x = new Type.NestedType();</code> or <code>Type.StaticMethod();</code>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.TypeArgument">
            <summary>
            Represents a generic type argument reference.
            For example, 'Type' in <code>Generic{Type} x = ...;</code> or <code>class Derived : Base{Type} { }</code>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.TypeConstraint">
            <summary>
            Represents a type parameter constraint that is a type.
            For example, 'Type' in <code>class Derived{T} where T : Type { }</code>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.Base">
            <summary>
            Represents a base type or interface reference in the base list of a named type.
            For example, 'Base' in <code>class Derived : Base { }</code>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.ObjectCreation">
            <summary>
            Represents a reference to a type whose instance is being created.
            For example, 'C' in <code>var x = new C();</code>, where 'C' is a named type.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.Import">
            <summary>
            Represents a reference to a namespace or type within a using or imports directive.
            For example, <code>using NS;</code> or <code>using static NS.Extensions</code> or <code>using Alias = MyType</code>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.TypeOrNamespaceUsageInfo.NamespaceDeclaration">
            <summary>
            Represents a reference to a namespace name in a namespace declaration context.
            For example, 'N1' or <code>namespaces N1.N2 { }</code>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.None">
            <summary>
            Represents default value indicating no usage.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.Read">
            <summary>
            Represents a value read.
            For example, reading the value of a local/field/parameter.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.Write">
            <summary>
            Represents a value write.
            For example, assigning a value to a local/field/parameter.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.Reference">
            <summary>
            Represents a reference being taken for the symbol.
            For example, passing an argument to an "in", "ref" or "out" parameter.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.Name">
            <summary>
            Represents a name-only reference that neither reads nor writes the underlying value.
            For example, 'nameof(x)' or reference to a symbol 'x' in a documentation comment
            does not read or write the underlying value stored in 'x'.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.ReadWrite">
            <summary>
            Represents a value read and/or write.
            For example, an increment or compound assignment operation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.ReadableReference">
            <summary>
            Represents a readable reference being taken to the value.
            For example, passing an argument to an "in" or "ref readonly" parameter.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.WritableReference">
            <summary>
            Represents a readable reference being taken to the value.
            For example, passing an argument to an "out" parameter.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ValueUsageInfo.ReadableWritableReference">
            <summary>
            Represents a value read or write.
            For example, passing an argument to a "ref" parameter.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.PooledObject`1">
            <summary>
            this is RAII object to automatically release pooled object when its owning pool
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SharedPools">
            <summary>
            Shared object pool for roslyn
            
            Use this shared pool if only concern is reducing object allocations.
            if perf of an object pool itself is also a concern, use ObjectPool directly.
            
            For example, if you want to create a million of small objects within a second, 
            use the ObjectPool directly. it should have much less overhead than using this.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SharedPools.BigDefault``1">
            <summary>
            pool that uses default constructor with 100 elements pooled
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SharedPools.Default``1">
            <summary>
            pool that uses default constructor with 20 elements pooled
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SharedPools.StringIgnoreCaseDictionary``1">
            <summary>
            pool that uses string as key with StringComparer.OrdinalIgnoreCase as key comparer
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SharedPools.StringIgnoreCaseHashSet">
            <summary>
            pool that uses string as element with StringComparer.OrdinalIgnoreCase as element comparer
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SharedPools.StringHashSet">
            <summary>
            pool that uses string as element with StringComparer.Ordinal as element comparer
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SharedPools.ByteArray">
            <summary>
            Used to reduce the # of temporary byte[]s created to satisfy serialization and
            other I/O requests
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MoveDeclarationNearReference.IMoveDeclarationNearReferenceService.CanMoveDeclarationNearReferenceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Returns true if <paramref name="localDeclarationStatement"/> is local declaration statement
            that can be moved forward to be closer to its first reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MoveDeclarationNearReference.IMoveDeclarationNearReferenceService.MoveDeclarationNearReferenceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Moves <paramref name="localDeclarationStatement"/> closer to its first reference. Only
            applicable if <see cref="M:Microsoft.CodeAnalysis.MoveDeclarationNearReference.IMoveDeclarationNearReferenceService.CanMoveDeclarationNearReferenceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)"/> returned
            <code>true</code>.  If not, then the original document will be returned unchanged.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ReplaceDiscardDeclarationsWithAssignments.IReplaceDiscardDeclarationsWithAssignmentsService.ReplaceAsync(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken)">
            <summary>
            Returns an updated <paramref name="memberDeclaration"/> with all the
            local declarations named '_' replaced with simple assignments to discard.
            For example,
             1. <code>int _ = M();</code> is replaced with <code>_ = M();</code>
             2. <code>int x = 1, _ = M(), y = 2;</code> is replaced with following statements:
             <code>
                     int x = 1;
                     _ = M();
                     int y = 2;
             </code>
            This is normally done in context of a code transformation that generates new discard assignment(s),
            such as <code>_ = M();</code>, and wants to prevent compiler errors where the containing method already
            has a discard variable declaration, say <code>var _ = M2();</code> at some line after the one
            where the code transformation wants to generate new discard assignment(s), which would be a compiler error.
            This method replaces such discard variable declarations with discard assignments.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.An_error_occurred_while_reading_the_specified_configuration_file_colon_0">
            <summary>An error occurred while reading the specified configuration file: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Symbol_0_is_not_from_source">
            <summary>Symbol "{0}" is not from source.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Documentation_comment_id_must_start_with_E_F_M_N_P_or_T">
            <summary>Documentation comment id must start with E, F, M, N, P or T</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cycle_detected_in_extensions">
            <summary>Cycle detected in extensions</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Destination_type_must_be_a_0_but_given_one_is_1">
            <summary>Destination type must be a {0}, but given one is {1}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Destination_type_must_be_a_0_or_a_1_but_given_one_is_2">
            <summary>Destination type must be a {0} or a {1}, but given one is {2}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Destination_type_must_be_a_0_1_or_2_but_given_one_is_3">
            <summary>Destination type must be a {0}, {1} or {2}, but given one is {3}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Destination_type_must_be_a_0_1_2_or_3_but_given_one_is_4">
            <summary>Destination type must be a {0}, {1}, {2} or {3}, but given one is {4}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Could_not_find_location_to_generation_symbol_into">
            <summary>Could not find location to generation symbol into.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.No_location_provided_to_add_statements_to">
            <summary>No location provided to add statements to.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Destination_location_was_not_in_source">
            <summary>Destination location was not in source.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Destination_location_was_from_a_different_tree">
            <summary>Destination location was from a different tree.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Node_is_of_the_wrong_type">
            <summary>Node is of the wrong type.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Location_must_be_null_or_from_source">
            <summary>Location must be null or from source.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Duplicate_source_file_0_in_project_1">
            <summary>Duplicate source file '{0}' in project '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_projects_is_not_supported">
            <summary>Removing projects is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_projects_is_not_supported">
            <summary>Adding projects is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Workspace_error">
            <summary>Workspace error</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Error_reading_content_of_source_file_0_1">
            <summary>Error reading content of source file '{0}' -- '{1}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Workspace_is_not_empty">
            <summary>Workspace is not empty.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_not_part_of_the_workspace">
            <summary>'{0}' is not part of the workspace.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_already_part_of_the_workspace">
            <summary>'{0}' is already part of the workspace.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_not_referenced">
            <summary>'{0}' is not referenced.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_already_referenced">
            <summary>'{0}' is already referenced.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_project_reference_from_0_to_1_will_cause_a_circular_reference">
            <summary>Adding project reference from '{0}' to '{1}' will cause a circular reference.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Metadata_is_not_referenced">
            <summary>Metadata is not referenced.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Metadata_is_already_referenced">
            <summary>Metadata is already referenced.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_not_present">
            <summary>{0} is not present.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_already_present">
            <summary>{0} is already present.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_specified_document_is_not_a_version_of_this_document">
            <summary>The specified document is not a version of this document.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_language_0_is_not_supported">
            <summary>The language '{0}' is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_solution_already_contains_the_specified_project">
            <summary>The solution already contains the specified project.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_solution_does_not_contain_the_specified_project">
            <summary>The solution does not contain the specified project.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_project_already_references_the_target_project">
            <summary>The project already references the target project.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_project_already_contains_the_specified_reference">
            <summary>The project already contains the specified reference.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.A_project_may_not_reference_itself">
            <summary>A project may not reference itself.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_solution_already_contains_the_specified_document">
            <summary>The solution already contains the specified document.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_solution_already_contains_the_specified_reference">
            <summary>The solution already contains the specified reference.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Temporary_storage_cannot_be_written_more_than_once">
            <summary>Temporary storage cannot be written more than once.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_not_open">
            <summary>'{0}' is not open.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.A_language_name_cannot_be_specified_for_this_option">
            <summary>A language name cannot be specified for this option.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.A_language_name_must_be_specified_for_this_option">
            <summary>A language name must be specified for this option.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.File_was_externally_modified_colon_0">
            <summary>File was externally modified: {0}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Unrecognized_language_name">
            <summary>Unrecognized language name.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Can_t_resolve_metadata_reference_colon_0">
            <summary>Can't resolve metadata reference: '{0}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Can_t_resolve_analyzer_reference_colon_0">
            <summary>Can't resolve analyzer reference: '{0}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_project_block_expected_after_Project">
            <summary>Invalid project block, expected "=" after Project.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_project_block_expected_after_project_name">
            <summary>Invalid project block, expected "," after project name.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_project_block_expected_after_project_path">
            <summary>Invalid project block, expected "," after project path.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Expected_0">
            <summary>Expected {0}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_must_be_a_non_null_and_non_empty_string">
            <summary>"{0}" must be a non-null and non-empty string.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Expected_header_colon_0">
            <summary>Expected header: "{0}".</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Expected_end_of_file">
            <summary>Expected end-of-file.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Expected_0_line">
            <summary>Expected {0} line.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.This_submission_already_references_another_submission_project">
            <summary>This submission already references another submission project.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Only_submission_project_can_reference_submission_projects">
            <summary>Only submission project can reference submission projects.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_still_contains_open_documents">
            <summary>{0} still contains open documents.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_still_open">
            <summary>{0} is still open.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Arrays_with_more_than_one_dimension_cannot_be_serialized">
            <summary>Arrays with more than one dimension cannot be serialized.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Value_too_large_to_be_represented_as_a_30_bit_unsigned_integer">
            <summary>Value too large to be represented as a 30 bit unsigned integer.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Specified_path_must_be_absolute">
            <summary>Specified path must be absolute.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Name_can_be_simplified">
            <summary>Name can be simplified.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Unknown_identifier">
            <summary>Unknown identifier.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cannot_generate_code_for_unsupported_operator_0">
            <summary>Cannot generate code for unsupported operator '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_number_of_parameters_for_binary_operator">
            <summary>Invalid number of parameters for binary operator.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_number_of_parameters_for_unary_operator">
            <summary>Invalid number of parameters for unary operator.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cannot_open_project_0_because_the_file_extension_1_is_not_associated_with_a_language">
            <summary>Cannot open project '{0}' because the file extension '{1}' is not associated with a language.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cannot_open_project_0_because_the_language_1_is_not_supported">
            <summary>Cannot open project '{0}' because the language '{1}' is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_project_file_path_colon_0">
            <summary>Invalid project file path: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_solution_file_path_colon_0">
            <summary>Invalid solution file path: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Project_file_not_found_colon_0">
            <summary>Project file not found: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Solution_file_not_found_colon_0">
            <summary>Solution file not found: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Unmerged_change_from_project_0">
            <summary>Unmerged change from project '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Added_colon">
            <summary>Added:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.After_colon">
            <summary>After:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Before_colon">
            <summary>Before:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removed_colon">
            <summary>Removed:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Invalid_CodePage_value_colon_0">
            <summary>Invalid CodePage value: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_additional_documents_is_not_supported">
            <summary>Adding additional documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_analyzer_config_documents_is_not_supported">
            <summary>Adding analyzer config documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_analyzer_references_is_not_supported">
            <summary>Adding analyzer references is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_documents_is_not_supported">
            <summary>Adding documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_metadata_references_is_not_supported">
            <summary>Adding metadata references is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Adding_project_references_is_not_supported">
            <summary>Adding project references is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_additional_documents_is_not_supported">
            <summary>Changing additional documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_analyzer_config_documents_is_not_supported">
            <summary>Changing analyzer config documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_documents_is_not_supported">
            <summary>Changing documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_project_properties_is_not_supported">
            <summary>Changing project properties is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_additional_documents_is_not_supported">
            <summary>Removing additional documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_analyzer_config_documents_is_not_supported">
            <summary>Removing analyzer config documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_analyzer_references_is_not_supported">
            <summary>Removing analyzer references is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_documents_is_not_supported">
            <summary>Removing documents is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_metadata_references_is_not_supported">
            <summary>Removing metadata references is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Removing_project_references_is_not_supported">
            <summary>Removing project references is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Service_of_type_0_is_required_to_accomplish_the_task_but_is_not_available_from_the_workspace">
            <summary>Service of type '{0}' is required to accomplish the task but is not available from the workspace.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.At_least_one_diagnostic_must_be_supplied">
            <summary>At least one diagnostic must be supplied.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Diagnostic_must_have_span_0">
            <summary>Diagnostic must have span '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cannot_deserialize_type_0">
            <summary>Cannot deserialize type '{0}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cannot_serialize_type_0">
            <summary>Cannot serialize type '{0}'.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_type_0_is_not_understood_by_the_serialization_binder">
            <summary>The type '{0}' is not understood by the serialization binder.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Label_for_node_0_is_invalid_it_must_be_within_bracket_0_1">
            <summary>Label for node '{0}' is invalid, it must be within [0, {1}).</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Matching_nodes_0_and_1_must_have_the_same_label">
            <summary>Matching nodes '{0}' and '{1}' must have the same label.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Node_0_must_be_contained_in_the_new_tree">
            <summary>Node '{0}' must be contained in the new tree.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Node_0_must_be_contained_in_the_old_tree">
            <summary>Node '{0}' must be contained in the old tree.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_member_0_is_not_declared_within_the_declaration_of_the_symbol">
            <summary>The member '{0}' is not declared within the declaration of the symbol.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_position_is_not_within_the_symbol_s_declaration">
            <summary>The position is not within the symbol's declaration</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_symbol_0_cannot_be_located_within_the_current_solution">
            <summary>The symbol '{0}' cannot be located within the current solution.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_compilation_options_is_not_supported">
            <summary>Changing compilation options is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_parse_options_is_not_supported">
            <summary>Changing parse options is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_node_is_not_part_of_the_tree">
            <summary>The node is not part of the tree.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.This_workspace_does_not_support_opening_and_closing_documents">
            <summary>This workspace does not support opening and closing documents.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Exceptions_colon">
            <summary>Exceptions:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_returned_an_uninitialized_ImmutableArray">
            <summary>'{0}' returned an uninitialized ImmutableArray</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Failure">
            <summary>Failure</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Warning">
            <summary>Warning</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Options_did_not_come_from_specified_Solution">
            <summary>Options did not come from specified Solution</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Enable">
            <summary>Enable</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Enable_and_ignore_future_errors">
            <summary>Enable and ignore future errors</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_encountered_an_error_and_has_been_disabled">
            <summary>'{0}' encountered an error and has been disabled.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Show_Stack_Trace">
            <summary>Show Stack Trace</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Stream_is_too_long">
            <summary>Stream is too long.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Deserialization_reader_for_0_read_incorrect_number_of_values">
            <summary>Deserialization reader for '{0}' read incorrect number of values.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Async_Method">
            <summary>Async Method</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Error">
            <summary>Error</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.None">
            <summary>None</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Suggestion">
            <summary>Suggestion</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.File_0_size_of_1_exceeds_maximum_allowed_size_of_2">
            <summary>File '{0}' size of {1} exceeds maximum allowed size of {2}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_document_property_is_not_supported">
            <summary>Changing document properties is not supported</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Variables_captured_colon">
            <summary>Variables captured:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Refactoring_Only">
            <summary>Refactoring Only</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Remove_the_line_below_if_you_want_to_inherit_dot_editorconfig_settings_from_higher_directories">
            <summary>Remove the line below if you want to inherit .editorconfig settings from higher directories</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Core_EditorConfig_Options">
            <summary>Core EditorConfig Options</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.CSharp_files">
            <summary>C# files</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.dot_NET_Coding_Conventions">
            <summary>.NET Coding Conventions</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Indentation_and_spacing">
            <summary>Indentation and spacing</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.New_line_preferences">
            <summary>New line preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Visual_Basic_files">
            <summary>Visual Basic files</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Changing_document_0_is_not_supported">
            <summary>Changing document '{0}' is not supported.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.DateTimeKind_must_be_Utc">
            <summary>DateTimeKind must be Utc</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Warning_adding_imports_will_bring_an_extension_method_into_scope_with_the_same_name_as_member_access">
            <summary>Adding imports will bring an extension method into scope with the same name as '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Document_does_not_support_syntax_trees">
            <summary>Document does not support syntax trees</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources._0_is_in_a_different_project">
            <summary>{0} is in a different project.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Project_does_not_contain_specified_reference">
            <summary>Project does not contain specified reference</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Solution_does_not_contain_specified_reference">
            <summary>Solution does not contain specified reference</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Cannot_apply_action_that_is_not_in_0">
            <summary>Cannot apply action that is not in '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Symbols_project_could_not_be_found_in_the_provided_solution">
            <summary>Symbol's project could not be found in the provided solution</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.The_contents_of_a_SourceGeneratedDocument_may_not_be_changed">
            <summary>The contents of a SourceGeneratedDocument may not be changed.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Rename_0_to_1">
            <summary>Rename '{0}' to '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Sync_namespace_to_folder_structure">
            <summary>Sync namespace to folder structure</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.CodeAction__0__did_not_produce_a_changed_solution">
            <summary>CodeAction '{0}' did not produce a changed solution</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspacesResources.Predefined_conversion_from_0_to_1">
            <summary>Predefined conversion from {0} to {1}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Absolute_path_expected">
            <summary>Absolute path expected.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.An_element_with_the_same_key_but_a_different_value_already_exists">
            <summary>An element with the same key but a different value already exists.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Organize_usings">
            <summary>Organize usings</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.this_dot_and_Me_dot_preferences">
            <summary>this. and Me. preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Language_keywords_vs_BCL_types_preferences">
            <summary>Language keywords vs BCL types preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Parentheses_preferences">
            <summary>Parentheses preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Modifier_preferences">
            <summary>Modifier preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Expression_level_preferences">
            <summary>Expression-level preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Field_preferences">
            <summary>Field preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Parameter_preferences">
            <summary>Parameter preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Suppression_preferences">
            <summary>Suppression preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Pascal_Case">
            <summary>Pascal Case</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Abstract_Method">
            <summary>Abstract Method</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Begins_with_I">
            <summary>Begins with I</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Class">
            <summary>Class</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Delegate">
            <summary>Delegate</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Enum">
            <summary>Enum</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Event">
            <summary>Event</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Interface">
            <summary>Interface</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Non_Field_Members">
            <summary>Non-Field Members</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Private_Method">
            <summary>Private Method</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Private_or_Internal_Field">
            <summary>Private or Internal Field</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Private_or_Internal_Static_Field">
            <summary>Private or Internal Static Field</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Property">
            <summary>Property</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Public_or_Protected_Field">
            <summary>Public or Protected Field</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Static_Field">
            <summary>Static Field</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Static_Method">
            <summary>Static Method</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Struct">
            <summary>Struct</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Types">
            <summary>Types</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Method">
            <summary>Method</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Missing_prefix_colon_0">
            <summary>Missing prefix: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Missing_suffix_colon_0">
            <summary>Missing suffix: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Prefix_0_does_not_match_expected_prefix_1">
            <summary>Prefix '{0}' does not match expected prefix '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Prefix_0_is_not_expected">
            <summary>Prefix '{0}' is not expected</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.These_non_leading_words_must_begin_with_an_upper_case_letter_colon_0">
            <summary>These non-leading words must begin with an upper case letter: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.These_non_leading_words_must_begin_with_a_lowercase_letter_colon_0">
            <summary>These non-leading words must begin with a lowercase letter: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.These_words_cannot_contain_lower_case_characters_colon_0">
            <summary>These words cannot contain lower case characters: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.These_words_cannot_contain_upper_case_characters_colon_0">
            <summary>These words cannot contain upper case characters: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.These_words_must_begin_with_upper_case_characters_colon_0">
            <summary>These words must begin with upper case characters: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.The_first_word_0_must_begin_with_an_upper_case_character">
            <summary>The first word, '{0}', must begin with an upper case character</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.The_first_word_0_must_begin_with_a_lower_case_character">
            <summary>The first word, '{0}', must begin with a lower case character</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Cast_is_redundant">
            <summary>Cast is redundant.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Naming_styles">
            <summary>Naming styles</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Naming_rules">
            <summary>Naming rules</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Symbol_specifications">
            <summary>Symbol specifications</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Specified_sequence_has_duplicate_items">
            <summary>Specified sequence has duplicate items</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.Segment_size_must_be_power_of_2_greater_than_1">
            <summary>Segment size must be power of 2 greater than 1</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CompilerExtensionsResources.New_line_preferences">
            <summary>New line preferences</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Supplied_diagnostic_cannot_be_null">
            <summary>Supplied diagnostic cannot be null.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Fix_all_0">
            <summary>Fix all '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Fix_all_0_in_1">
            <summary>Fix all '{0}' in '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Fix_all_0_in_Solution">
            <summary>Fix all '{0}' in Solution</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Compilation_is_required_to_accomplish_the_task_but_is_not_supported_by_project_0">
            <summary>Compilation is required to accomplish the task but is not supported by project {0}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.SyntaxTree_is_required_to_accomplish_the_task_but_is_not_supported_by_document_0">
            <summary>Syntax tree is required to accomplish the task but is not supported by document {0}.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Project_of_ID_0_is_required_to_accomplish_the_task_but_is_not_available_from_the_solution">
            <summary>Project of ID {0} is required to accomplish the task but is not available from the solution</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.The_solution_does_not_contain_the_specified_document">
            <summary>The solution does not contain the specified document.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.WorkspaceExtensionsResources.Warning_colon_Declaration_changes_scope_and_may_change_meaning">
            <summary>Warning: Declaration changes scope and may change meaning.</summary>
        </member>
        <member name="T:Roslyn.Utilities.AsyncBatchingWorkQueue">
            <inheritdoc cref="T:Roslyn.Utilities.AsyncBatchingWorkQueue`2"/>
        </member>
        <member name="T:Roslyn.Utilities.AsyncBatchingWorkQueue`1">
            <inheritdoc cref="T:Roslyn.Utilities.AsyncBatchingWorkQueue`2"/>
        </member>
        <member name="T:Roslyn.Utilities.AsyncBatchingWorkQueue`2">
            <summary>
            A queue where items can be added to to be processed in batches after some delay has passed.
            When processing happens, all the items added since the last processing point will be passed
            along to be worked on.  Rounds of processing happen serially, only starting up after a
            previous round has completed.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._delay">
            <summary>
            Delay we wait after finishing the processing of one batch and starting up on then.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._equalityComparer">
            <summary>
            Equality comparer uses to dedupe items if present.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._processBatchAsync">
            <summary>
            Callback to actually perform the processing of the next batch of work.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._gate">
            <summary>
            Lock we will use to ensure the remainder of these fields can be accessed in a threadsafe
            manner.  When work is added we'll place the data into <see cref="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._nextBatch"/>.
            We'll then kick of a task to process this in the future if we don't already have an
            existing task in flight for that.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._nextBatch">
            <summary>
            Data added that we want to process in our next update task.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._uniqueItems">
            <summary>
            Used if <see cref="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._equalityComparer"/> is present to ensure only unique items are added to <see
            cref="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._nextBatch"/>.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._updateTask">
            <summary>
            Task kicked off to do the next batch of processing of <see cref="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._nextBatch"/>. These
            tasks form a chain so that the next task only processes when the previous one completes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._taskInFlight">
            <summary>
            Whether or not there is an existing task in flight that will process the current batch
            of <see cref="F:Roslyn.Utilities.AsyncBatchingWorkQueue`2._nextBatch"/>.  If there is an existing in flight task, we don't need to
            kick off a new one if we receive more work before it runs.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.CancellationSeries">
            <summary>
            Produces a series of <see cref="T:System.Threading.CancellationToken"/> objects such that requesting a new token
            causes the previously issued token to be cancelled.
            </summary>
            <remarks>
            <para>Consuming code is responsible for managing overlapping asynchronous operations.</para>
            <para>This class has a lock-free implementation to minimise latency and contention.</para>
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.CancellationSeries.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of <see cref="T:Roslyn.Utilities.CancellationSeries"/>.
            </summary>
            <param name="token">An optional cancellation token that, when cancelled, cancels the last
            issued token and causes any subsequent tokens to be issued in a cancelled state.</param>
        </member>
        <member name="P:Roslyn.Utilities.CancellationSeries.HasActiveToken">
            <summary>
            Determines if the cancellation series has an active token which has not been cancelled.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.CancellationSeries.CreateNext(System.Threading.CancellationToken)">
            <summary>
            Creates the next <see cref="T:System.Threading.CancellationToken"/> in the series, ensuring the last issued
            token (if any) is cancelled first.
            </summary>
            <param name="token">An optional cancellation token that, when cancelled, cancels the
            returned token.</param>
            <returns>
            A cancellation token that will be cancelled when either:
            <list type="bullet">
            <item><see cref="M:Roslyn.Utilities.CancellationSeries.CreateNext(System.Threading.CancellationToken)"/> is called again</item>
            <item>The token passed to this method (if any) is cancelled</item>
            <item>The token passed to the constructor (if any) is cancelled</item>
            <item><see cref="M:Roslyn.Utilities.CancellationSeries.Dispose"/> is called</item>
            </list>
            </returns>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        </member>
        <member name="M:Roslyn.Utilities.ReferenceHolder`1.TestAccessor.ReleasedWeak(System.Int32)">
            <summary>
            Creates a <see cref="T:Roslyn.Utilities.ReferenceHolder`1"/> for a weakly-held reference that has since been collected.
            </summary>
            <param name="hashCode">The hash code of the collected value.</param>
            <returns>A weak <see cref="T:Roslyn.Utilities.ReferenceHolder`1"/> which was already collected.</returns>
        </member>
        <member name="T:Roslyn.Utilities.TaskQueue">
            <summary>
            Implements a queue of asynchronously executed tasks.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTask(System.String,System.Action,System.Threading.CancellationToken)">
            <summary>
            Enqueue specified <paramref name="operation"/> and notify <see cref="P:Roslyn.Utilities.TaskQueue.Listener"/> of its start and completion.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that executes the operation.</returns>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTask``1(System.String,System.Func{``0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roslyn.Utilities.TaskQueue.ScheduleTask(System.String,System.Action,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTask(System.String,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roslyn.Utilities.TaskQueue.ScheduleTask(System.String,System.Action,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTask``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roslyn.Utilities.TaskQueue.ScheduleTask(System.String,System.Action,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress(System.Action,System.Threading.CancellationToken)">
            <summary>
            Enqueue specified <paramref name="operation"/>.
            Assumes <see cref="P:Roslyn.Utilities.TaskQueue.Listener"/> has already been notified of its start and will be notified when it completes.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that executes the operation.</returns>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress``1(System.Func{``0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress(System.Action,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress(System.Action,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roslyn.Utilities.TaskQueue.ScheduleTaskInProgress(System.Action,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Roslyn.Utilities.WeakSet`1">
            <summary>
            A simple collection of values held as weak references. Objects in the set are compared by reference equality.
            </summary>
            <typeparam name="T">The type of object stored in the set.</typeparam>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentDictionaryExtensions.Add``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            NOTE!!! adding duplicates will result in exceptions. 
            Being concurrent only allows accessing the dictionary without taking locks.
            Duplicate keys are still not allowed in the hashtable.
            If unsure about adding unique items use APIs such as TryAdd, GetOrAdd, etc...
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ConfiguredYieldAwaitable">
            <summary>
            A custom awaiter that supports <see cref="M:Roslyn.Utilities.YieldAwaitableExtensions.ConfigureAwait(System.Runtime.CompilerServices.YieldAwaitable,System.Boolean)"/> for
            <see cref="M:System.Threading.Tasks.Task.Yield"/>.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.RoslynDebug.Assert(System.Boolean)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>
        </member>
        <member name="M:Roslyn.Utilities.RoslynDebug.Assert(System.Boolean,System.String)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>
        </member>
        <member name="M:Roslyn.Utilities.RoslynDebug.AssertOrFailFast(System.Boolean,System.String)">
            <summary>
            Generally <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/> is a sufficient method for enforcing DEBUG 
            only invariants in our code. When it triggers that provides a nice stack trace for 
            investigation. Generally that is enough.
            
            <para>There are cases for which a stack is not enough and we need a full heap dump to 
            investigate the failure. This method takes care of that. The behavior is that when running
            in our CI environment if the assert triggers we will rudely crash the process and 
            produce a heap dump for investigation.</para>
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.EnumerableExtensions.IsEmpty``1(``0[])">
            <remarks>
            This method is necessary to avoid an ambiguity between <see cref="M:Roslyn.Utilities.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0})"/> and <see cref="M:Roslyn.Utilities.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})"/>.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.List{``0})">
            <remarks>
            This method is necessary to avoid an ambiguity between <see cref="M:Roslyn.Utilities.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0})"/> and <see cref="M:Roslyn.Utilities.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})"/>.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.EnumerableExtensions.SelectAsArrayAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Maps an immutable array through a function that returns ValueTask, returning the new ImmutableArray.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.EnumerableExtensions.SelectAsArrayAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},``1,System.Threading.CancellationToken)">
            <summary>
            Maps an immutable array through a function that returns ValueTask, returning the new ImmutableArray.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.EnumerableExtensions.AsSingleton``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of specified sequence if it has exactly one, and default(TSource) otherwise.
            Unlike <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/> doesn't throw if there is more than one element in the sequence.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.Functions`1">
            <summary>
            Cached versions of commonly used delegates.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Roslyn.Utilities.Predicates`1">
            <summary>
            Cached versions of commonly used delegates.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(System.Object)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/> with information about an unexpected value.
            </summary>
            <param name="o">The unexpected value.</param>
            <returns>The <see cref="T:System.InvalidOperationException"/>, which should be thrown by the caller.</returns>
        </member>
        <member name="T:Roslyn.Utilities.ReferenceEqualityComparer">
            <summary>
            Compares objects based upon their reference identity.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.RoslynString.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Roslyn.Utilities.RoslynString.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="M:Roslyn.Utilities.StringExtensions.IsValidClrNamespaceName(System.String)">
            <summary>
            Checks if the given name is a sequence of valid CLR names separated by a dot.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.StringExtensions.Unquote(System.String)">
            <summary>
            Remove one set of leading and trailing double quote characters, if both are present.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ValueTaskFactory">
            <summary>
            Implements <see cref="T:System.Threading.Tasks.ValueTask"/> and <see cref="T:System.Threading.Tasks.ValueTask`1"/> static members that are only available in .NET 5.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.VoidResult">
            <summary>
            Explicitly indicates result is void
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.YieldAwaitableExtensions.ConfigureAwait(System.Runtime.CompilerServices.YieldAwaitable,System.Boolean)">
            <summary>
            Implements <c>ConfigureAwait(bool)</c> for <see cref="M:System.Threading.Tasks.Task.Yield"/>. The resulting behavior in asynchronous code
            is the same as one would expect for <see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/>.
            </summary>
            <param name="awaitable">The awaitable provided by <see cref="M:System.Threading.Tasks.Task.Yield"/>.</param>
            <param name="continueOnCapturedContext"><inheritdoc cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/></param>
            <returns>An object used to await this yield.</returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.Combine(System.Int32,System.Int32)">
            <summary>
            This is how VB Anonymous Types combine hash values for fields.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Hash.Combine``1(``0,System.Int32)">
            <summary>
            This is how VB Anonymous Types combine hash values for fields.
            PERF: Do not use with enum types because that involves multiple
            unnecessary boxing operations.  Unfortunately, we can't constrain
            T to "non-enum", so we'll use a more restrictive constraint.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.Hash.FnvOffsetBias">
            <summary>
            The offset bias value used in the FNV-1a algorithm
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.Hash.FnvPrime">
            <summary>
            The generative factor used in the FNV-1a algorithm
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.Byte[])">
            <summary>
            Compute the FNV-1a hash of a sequence of bytes
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="data">The sequence of bytes</param>
            <returns>The FNV-1a hash of <paramref name="data"/></returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.ReadOnlySpan{System.Byte},System.Boolean@)">
            <summary>
            Compute the FNV-1a hash of a sequence of bytes and determines if the byte
            sequence is valid ASCII and hence the hash code matches a char sequence
            encoding the same text.
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="data">The sequence of bytes that are likely to be ASCII text.</param>
            <param name="isAscii">True if the sequence contains only characters in the ASCII range.</param>
            <returns>The FNV-1a hash of <paramref name="data"/></returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Compute the FNV-1a hash of a sequence of bytes
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="data">The sequence of bytes</param>
            <returns>The FNV-1a hash of <paramref name="data"/></returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.ReadOnlySpan{System.Char})">
            <summary>
            Compute the hashcode of a sub-string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            Note: FNV-1a was developed and tuned for 8-bit sequences. We're using it here
            for 16-bit Unicode chars on the understanding that the majority of chars will
            fit into 8-bits and, therefore, the algorithm will retain its desirable traits
            for generating hash codes.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.String,System.Int32,System.Int32)">
            <summary>
            Compute the hashcode of a sub-string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            Note: FNV-1a was developed and tuned for 8-bit sequences. We're using it here
            for 16-bit Unicode chars on the understanding that the majority of chars will
            fit into 8-bits and, therefore, the algorithm will retain its desirable traits
            for generating hash codes.
            </summary>
            <param name="text">The input string</param>
            <param name="start">The start index of the first character to hash</param>
            <param name="length">The number of characters, beginning with <paramref name="start"/> to hash</param>
            <returns>The FNV-1a hash code of the substring beginning at <paramref name="start"/> and ending after <paramref name="length"/> characters.</returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.String,System.Int32)">
            <summary>
            Compute the hashcode of a sub-string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="text">The input string</param>
            <param name="start">The start index of the first character to hash</param>
            <returns>The FNV-1a hash code of the substring beginning at <paramref name="start"/> and ending at the end of the string.</returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.String)">
            <summary>
            Compute the hashcode of a string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="text">The input string</param>
            <returns>The FNV-1a hash code of <paramref name="text"/></returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.Text.StringBuilder)">
            <summary>
            Compute the hashcode of a string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="text">The input string</param>
            <returns>The FNV-1a hash code of <paramref name="text"/></returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.Char[],System.Int32,System.Int32)">
            <summary>
            Compute the hashcode of a sub string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="text">The input string as a char array</param>
            <param name="start">The start index of the first character to hash</param>
            <param name="length">The number of characters, beginning with <paramref name="start"/> to hash</param>
            <returns>The FNV-1a hash code of the substring beginning at <paramref name="start"/> and ending after <paramref name="length"/> characters.</returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.GetFNVHashCode(System.Char)">
            <summary>
            Compute the hashcode of a single character using the FNV-1a algorithm
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            Note: In general, this isn't any more useful than "char.GetHashCode". However,
            it may be needed if you need to generate the same hash code as a string or
            substring with just a single character.
            </summary>
            <param name="ch">The character to hash</param>
            <returns>The FNV-1a hash code of the character.</returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.CombineFNVHash(System.Int32,System.String)">
            <summary>
            Combine a string with an existing FNV-1a hash code
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="hashCode">The accumulated hash code</param>
            <param name="text">The string to combine</param>
            <returns>The result of combining <paramref name="hashCode"/> with <paramref name="text"/> using the FNV-1a algorithm</returns>
        </member>
        <member name="M:Roslyn.Utilities.Hash.CombineFNVHash(System.Int32,System.Char)">
            <summary>
            Combine a char with an existing FNV-1a hash code
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="hashCode">The accumulated hash code</param>
            <param name="ch">The new character to combine</param>
            <returns>The result of combining <paramref name="hashCode"/> with <paramref name="ch"/> using the FNV-1a algorithm</returns>
        </member>
        <member name="T:Roslyn.Utilities.IObjectWritable">
            <summary>
            Objects that implement this interface know how to write their contents to an <see cref="T:Roslyn.Utilities.ObjectWriter"/>,
            so they can be reconstructed later by an <see cref="T:Roslyn.Utilities.ObjectReader"/>.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.IObjectWritable.ShouldReuseInSerialization">
            <summary>
            Returns 'true' when the same instance could be used more than once.
            Instances that return 'false' should not be tracked for the purpose 
            of de-duplication while serializing/deserializing.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ObjectBinder">
            <summary>
            <see cref="T:Roslyn.Utilities.ObjectBinder"/> is a registry that maps between arbitrary <see cref="T:System.Type"/>s and 
            the 'reader' function used to deserialize serialized instances of those types.  Registration
            must happen ahead of time using the <see cref="M:Roslyn.Utilities.ObjectBinder.RegisterTypeReader(System.Type,System.Func{Roslyn.Utilities.ObjectReader,Roslyn.Utilities.IObjectWritable})"/> method.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectBinder.s_gate">
            <summary>
            Lock for all data in this type.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectBinder.s_lastSnapshot">
            <summary>
            Last created snapshot of our data.  We hand this out instead of exposing our raw
            data so that <see cref="T:Roslyn.Utilities.ObjectReader"/> and <see cref="T:Roslyn.Utilities.ObjectWriter"/> do not need to
            take any locks while processing.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectBinder.s_typeToIndex">
            <summary>
            Map from a <see cref="T:System.Type"/> to the corresponding index in <see cref="F:Roslyn.Utilities.ObjectBinder.s_types"/> and
            <see cref="F:Roslyn.Utilities.ObjectBinder.s_typeReaders"/>.  <see cref="T:Roslyn.Utilities.ObjectWriter"/> will write out the index into
            the stream, and <see cref="T:Roslyn.Utilities.ObjectReader"/> will use that index to get the reader used
            for deserialization.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ObjectBinder.GetSnapshot">
            <summary>
            Gets an immutable copy of the state of this binder.  This copy does not need to be
            locked while it is used.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ObjectReader">
            <summary>
            An <see cref="T:Roslyn.Utilities.ObjectReader"/> that deserializes objects from a byte stream.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectReader.VersionByte1">
            <summary>
            We start the version at something reasonably random.  That way an older file, with 
            some random start-bytes, has little chance of matching our version.  When incrementing
            this version, just change VersionByte2.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectReader._objectReferenceMap">
            <summary>
            Map of reference id's to deserialized objects.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectReader._binderSnapshot">
            <summary>
            Copy of the global binder data that maps from Types to the appropriate reading-function
            for that type.  Types register functions directly with <see cref="T:Roslyn.Utilities.ObjectBinder"/>, but 
            that means that <see cref="T:Roslyn.Utilities.ObjectBinder"/> is both static and locked.  This gives us 
            local copy we can work with without needing to worry about anyone else mutating.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ObjectReader.#ctor(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of a <see cref="T:Roslyn.Utilities.ObjectReader"/>.
            </summary>
            <param name="stream">The stream to read objects from.</param>
            <param name="leaveOpen">True to leave the <paramref name="stream"/> open after the <see cref="T:Roslyn.Utilities.ObjectWriter"/> is disposed.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslyn.Utilities.ObjectReader.TryGetReader(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Attempts to create a <see cref="T:Roslyn.Utilities.ObjectReader"/> from the provided <paramref name="stream"/>.
            If the <paramref name="stream"/> does not start with a valid header, then <see langword="null"/> will
            be returned.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ObjectReader.GetReader(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Roslyn.Utilities.ObjectReader"/> from the provided <paramref name="stream"/>.
            Unlike <see cref="M:Roslyn.Utilities.ObjectReader.TryGetReader(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)"/>, it requires the version
            of the data in the stream to exactly match the current format version.
            Should only be used to read data written by the same version of Roslyn.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1">
            <summary>
            A reference-id to object map, that can share base data efficiently.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ObjectWriter">
            <summary>
            An <see cref="T:Roslyn.Utilities.ObjectWriter"/> that serializes objects to a byte stream.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter._objectReferenceMap">
            <summary>
            Map of serialized object's reference ids.  The object-reference-map uses reference equality
            for performance.  While the string-reference-map uses value-equality for greater cache hits 
            and reuse.
            
            These are not readonly because they're structs and we mutate them.
            
            When we write out objects/strings we give each successive, unique, item a monotonically 
            increasing integral ID starting at 0.  I.e. the first object gets ID-0, the next gets 
            ID-1 and so on and so forth.  We do *not* include these IDs with the object when it is
            written out.  We only include the ID if we hit the object *again* while writing.
            
            During reading, the reader knows to give each object it reads the same monotonically 
            increasing integral value.  i.e. the first object it reads is put into an array at position
            0, the next at position 1, and so on.  Then, when the reader reads in an object-reference
            it can just retrieved it directly from that array.
            
            In other words, writing and reading take advantage of the fact that they know they will
            write and read objects in the exact same order.  So they only need the IDs for references
            and not the objects themselves because the ID is inferred from the order the object is
            written or read in.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter._binderSnapshot">
            <summary>
            Copy of the global binder data that maps from Types to the appropriate reading-function
            for that type.  Types register functions directly with <see cref="T:Roslyn.Utilities.ObjectBinder"/>, but 
            that means that <see cref="T:Roslyn.Utilities.ObjectBinder"/> is both static and locked.  This gives us 
            local copy we can work with without needing to worry about anyone else mutating.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ObjectWriter.#ctor(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of a <see cref="T:Roslyn.Utilities.ObjectWriter"/>.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="leaveOpen">True to leave the <paramref name="stream"/> open after the <see cref="T:Roslyn.Utilities.ObjectWriter"/> is disposed.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Roslyn.Utilities.ObjectWriter.GuidAccessor">
            <summary>
            Used so we can easily grab the low/high 64bits of a guid for serialization.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ObjectWriter.WriteValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Write an array of bytes. The array data is provided as a
            <see cref="T:System.ReadOnlySpan`1">ReadOnlySpan</see>&lt;<see cref="T:System.Byte"/>&gt;, and deserialized to a byte array.
            </summary>
            <param name="span">The array data.</param>
        </member>
        <member name="T:Roslyn.Utilities.ObjectWriter.WriterReferenceMap">
            <summary>
            An object reference to reference-id map, that can share base data efficiently.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.s_reverseTypeMap">
            <summary>
            Indexed by EncodingKind.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.ByteMarkerMask">
            <summary>
            byte marker mask for encoding compressed uint 
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.Byte1Marker">
            <summary>
            byte marker bits for uint encoded in 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.Byte2Marker">
            <summary>
            byte marker bits for uint encoded in 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.Byte4Marker">
            <summary>
            byte marker bits for uint encoded in 4 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Null">
            <summary>
            The null value
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Type">
            <summary>
            A type
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Object">
            <summary>
            An object with member values encoded as variants
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.ObjectRef_1Byte">
            <summary>
            An object reference with the id encoded as 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.ObjectRef_2Bytes">
            <summary>
            An object reference with the id encode as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.ObjectRef_4Bytes">
            <summary>
            An object reference with the id encoded as 4 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.StringUtf8">
            <summary>
            A string encoded as UTF8 (using BinaryWriter.Write(string))
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.StringUtf16">
            <summary>
            A string encoded as UTF16 (as array of UInt16 values)
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.StringRef_1Byte">
            <summary>
            A reference to a string with the id encoded as 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.StringRef_2Bytes">
            <summary>
            A reference to a string with the id encoded as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.StringRef_4Bytes">
            <summary>
            A reference to a string with the id encoded as 4 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Boolean_True">
            <summary>
            The boolean value true.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Boolean_False">
            <summary>
            The boolean value char.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Char">
            <summary>
            A character value encoded as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int8">
            <summary>
            An Int8 value encoded as 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int16">
            <summary>
            An Int16 value encoded as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32">
            <summary>
            An Int32 value encoded as 4 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_1Byte">
            <summary>
            An Int32 value encoded as 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_2Bytes">
            <summary>
            An Int32 value encoded as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_0">
            <summary>
            The Int32 value 0
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_1">
            <summary>
            The Int32 value 1
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_2">
            <summary>
            The Int32 value 2
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_3">
            <summary>
            The Int32 value 3
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_4">
            <summary>
            The Int32 value 4
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_5">
            <summary>
            The Int32 value 5
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_6">
            <summary>
            The Int32 value 6
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_7">
            <summary>
            The Int32 value 7
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_8">
            <summary>
            The Int32 value 8
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_9">
            <summary>
            The Int32 value 9
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int32_10">
            <summary>
            The Int32 value 10
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Int64">
            <summary>
            An Int64 value encoded as 8 bytes
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt8">
            <summary>
            A UInt8 value encoded as 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt16">
            <summary>
            A UIn16 value encoded as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32">
            <summary>
            A UInt32 value encoded as 4 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_1Byte">
            <summary>
            A UInt32 value encoded as 1 byte.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_2Bytes">
            <summary>
            A UInt32 value encoded as 2 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_0">
            <summary>
            The UInt32 value 0
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_1">
            <summary>
            The UInt32 value 1
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_2">
            <summary>
            The UInt32 value 2
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_3">
            <summary>
            The UInt32 value 3
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_4">
            <summary>
            The UInt32 value 4
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_5">
            <summary>
            The UInt32 value 5
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_6">
            <summary>
            The UInt32 value 6
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_7">
            <summary>
            The UInt32 value 7
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_8">
            <summary>
            The UInt32 value 8
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_9">
            <summary>
            The UInt32 value 9
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt32_10">
            <summary>
            The UInt32 value 10
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.UInt64">
            <summary>
            A UInt64 value encoded as 8 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Float4">
            <summary>
            A float value encoded as 4 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Float8">
            <summary>
            A double value encoded as 8 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Decimal">
            <summary>
            A decimal value encoded as 12 bytes.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.DateTime">
            <summary>
            A DateTime value
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Array">
            <summary>
            An array with length encoded as compressed uint
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Array_0">
            <summary>
            An array with zero elements
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Array_1">
            <summary>
            An array with one element
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Array_2">
            <summary>
            An array with 2 elements
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.Array_3">
            <summary>
            An array with 3 elements
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.BooleanType">
            <summary>
            The boolean type
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.StringType">
            <summary>
            The string type
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ObjectWriter.EncodingKind.EncodingName">
            <summary>
            Encoding serialized as <see cref="P:System.Text.Encoding.WebName"/>.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.SerializationThreadPool.ImmediateBackgroundThreadPool">
            <summary>
            Naive thread pool focused on reducing the latency to execution of chunky work items as much as possible.
            If a thread is ready to process a work item the moment a work item is queued, it's used, otherwise
            a new thread is created. This is meant as a stop-gap measure for workloads that would otherwise be
            creating a new thread for every work item.
            </summary>
            <remarks>
            This class is derived from <see href="https://github.com/dotnet/machinelearning/blob/ebc431f531436c45097c88757dfd14fe0c1381b3/src/Microsoft.ML.Core/Utilities/ThreadUtils.cs">dotnet/machinelearning</see>.
            </remarks>
        </member>
        <member name="F:Roslyn.Utilities.SerializationThreadPool.ImmediateBackgroundThreadPool.s_idleTimeout">
            <summary>How long should threads wait around for additional work items before retiring themselves.</summary>
        </member>
        <member name="F:Roslyn.Utilities.SerializationThreadPool.ImmediateBackgroundThreadPool.s_queue">
            <summary>The queue of work items. Also used as a lock to protect all relevant state.</summary>
        </member>
        <member name="F:Roslyn.Utilities.SerializationThreadPool.ImmediateBackgroundThreadPool.s_availableThreads">
            <summary>The number of threads currently waiting in <c>tryDequeue</c> for work to arrive.</summary>
        </member>
        <member name="M:Roslyn.Utilities.SerializationThreadPool.ImmediateBackgroundThreadPool.QueueAsync(System.Func{System.Object})">
            <summary>
            Queues a <see cref="T:System.Func`1"/> delegate to be executed immediately on another thread,
            and returns a <see cref="T:System.Threading.Tasks.Task"/> that represents its eventual completion. The task will
            always end in the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state; if the delegate throws
            an exception, it'll be allowed to propagate on the thread, crashing the process.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.SerializationThreadPool.ImmediateBackgroundThreadPool.QueueAsync(System.Func{System.Object,System.Object},System.Object)">
            <summary>
            Queues a <see cref="T:System.Func`2"/> delegate and associated state to be executed immediately on
            another thread, and returns a <see cref="T:System.Threading.Tasks.Task"/> that represents its eventual completion.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ArrayExtensions.BinarySearchUpperBound(System.Int32[],System.Int32)">
            <summary>
            Search a sorted integer array for the target value in O(log N) time.
            </summary>
            <param name="array">The array of integers which must be sorted in ascending order.</param>
            <param name="value">The target value.</param>
            <returns>An index in the array pointing to the position where <paramref name="value"/> should be
            inserted in order to maintain the sorted order. All values to the right of this position will be
            strictly greater than <paramref name="value"/>. Note that this may return a position off the end
            of the array if all elements are less than or equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Roslyn.Utilities.CompilerOptionParseUtilities.ParseFeatureFromMSBuild(System.String)">
            <summary>
            Parse the value provided to an MSBuild Feature option into a list of entries.  This will 
            leave name=value in their raw form.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ConcurrentSet`1">
            <summary>
            A concurrent, simplified HashSet.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ConcurrentSet`1.DefaultConcurrencyLevel">
            <summary>
            The default concurrency level is 2. That means the collection can cope with up to two
            threads making simultaneous modifications without blocking.
            Note ConcurrentDictionary's default concurrency level is dynamic, scaling according to
            the number of processors.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ConcurrentSet`1.DefaultCapacity">
            <summary>
            Taken from ConcurrentDictionary.DEFAULT_CAPACITY
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ConcurrentSet`1._dictionary">
            <summary>
            The backing dictionary. The values are never used; just the keys.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.#ctor">
            <summary>
            Construct a concurrent set with the default concurrency level.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Construct a concurrent set using the specified equality comparer.
            </summary>
            <param name="equalityComparer">The equality comparer for values in the set.</param>
        </member>
        <member name="P:Roslyn.Utilities.ConcurrentSet`1.Count">
            <summary>
            Obtain the number of elements in the set.
            </summary>
            <returns>The number of elements in the set.</returns>
        </member>
        <member name="P:Roslyn.Utilities.ConcurrentSet`1.IsEmpty">
            <summary>
            Determine whether the set is empty.</summary>
            <returns>true if the set is empty; otherwise, false.</returns>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.Contains(`0)">
            <summary>
            Determine whether the given value is in the set.
            </summary>
            <param name="value">The value to test.</param>
            <returns>true if the set contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.Add(`0)">
            <summary>
            Attempts to add a value to the set.
            </summary>
            <param name="value">The value to add.</param>
            <returns>true if the value was added to the set. If the value already exists, this method returns false.</returns>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.Remove(`0)">
            <summary>
            Attempts to remove a value from the set.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>true if the value was removed successfully; otherwise false.</returns>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.Clear">
            <summary>
            Clear the set
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ConcurrentSet`1.GetEnumerator">
            <summary>
            Obtain an enumerator that iterates through the elements in the set.
            </summary>
            <returns>An enumerator for the set.</returns>
        </member>
        <member name="T:Roslyn.Utilities.ConsList`1">
            <summary>
            a simple Lisp-like immutable list.  Good to use when lists are always accessed from the head.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.DocumentationCommentXmlNames">
            <summary>
            Names of well-known XML attributes and elements.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.EncodingExtensions.GetMaxCharCountOrThrowIfHuge(System.Text.Encoding,System.IO.Stream)">
            <summary>
            Get maximum char count needed to decode the entire stream.
            </summary>
            <exception cref="T:System.IO.IOException">Stream is so big that max char count can't fit in <see cref="T:System.Int32"/>.</exception> 
        </member>
        <member name="M:Roslyn.Utilities.EnumUtilities.ConvertEnumUnderlyingTypeToUInt64(System.Object,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Convert a boxed primitive (generally of the backing type of an enum) into a ulong.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Roslyn.Utilities.FileNameUtilities">
            <summary>
            Implements a few file name utilities that are needed by the compiler.
            In general the compiler is not supposed to understand the format of the paths.
            In rare cases it needs to check if a string is a valid file name or change the extension 
            (embedded resources, netmodules, output name).
            The APIs are intentionally limited to cover just these rare cases. Do not add more APIs.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.IsFileName(System.String)">
            <summary>
            Returns true if the string represents an unqualified file name. 
            The name may contain any characters but directory and volume separators.
            </summary>
            <param name="path">Path.</param>
            <returns>
            True if <paramref name="path"/> is a simple file name, false if it is null or includes a directory specification.
            </returns>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.IndexOfExtension(System.String)">
            <summary>
            Returns the offset in <paramref name="path"/> where the dot that starts an extension is, or -1 if the path doesn't have an extension.
            </summary>
            <remarks>
            Returns 0 for path ".goo".
            Returns -1 for path "goo.".
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.GetExtension(System.String)">
            <summary>
            Returns an extension of the specified path string.
            </summary>
            <remarks>
            The same functionality as <see cref="M:System.IO.Path.GetExtension(System.String)"/> but doesn't throw an exception
            if there are invalid characters in the path.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.RemoveExtension(System.String)">
            <summary>
            Removes extension from path.
            </summary>
            <remarks>
            Returns "goo" for path "goo.".
            Returns "goo.." for path "goo...".
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.ChangeExtension(System.String,System.String)">
            <summary>
            Returns path with the extension changed to <paramref name="extension"/>.
            </summary>
            <returns>
            Equivalent of <see cref="M:System.IO.Path.ChangeExtension(System.String,System.String)"/>
            
            If <paramref name="path"/> is null, returns null. 
            If path does not end with an extension, the new extension is appended to the path.
            If extension is null, equivalent to <see cref="M:Roslyn.Utilities.FileNameUtilities.RemoveExtension(System.String)"/>.
            </returns>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.IndexOfFileName(System.String)">
            <summary>
            Returns the position in given path where the file name starts.
            </summary>
            <returns>-1 if path is null.</returns>
        </member>
        <member name="M:Roslyn.Utilities.FileNameUtilities.GetFileName(System.String,System.Boolean)">
            <summary>
            Get file name from path.
            </summary>
            <remarks>Unlike <see cref="M:System.IO.Path.GetFileName(System.String)"/> doesn't check for invalid path characters.</remarks>
        </member>
        <member name="T:Roslyn.Utilities.SetWithInsertionOrder`1">
            <summary>
            A set that returns the inserted values in insertion order.
            The mutation operations are not thread-safe.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.Empty">
            <summary>
            Null or empty.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.Relative">
            <summary>
            "file"
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.RelativeToCurrentDirectory">
            <summary>
            ".\file"
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.RelativeToCurrentParent">
            <summary>
            "..\file"
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.RelativeToCurrentRoot">
            <summary>
            "\dir\file"
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.RelativeToDriveDirectory">
            <summary>
            "C:dir\file"
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.PathKind.Absolute">
            <summary>
            "C:\file" or "\\machine" (UNC).
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.OneOrMany`1">
            <summary>
            Represents a single item or many items (including none).
            </summary>
            <remarks>
            Used when a collection usually contains a single item but sometimes might contain multiple.
            </remarks>
        </member>
        <member name="T:Roslyn.Utilities.PlatformInformation">
            <summary>
            This class provides simple properties for determining whether the current platform is Windows or Unix-based.
            We intentionally do not use System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(...) because
            it incorrectly reports 'true' for 'Windows' in desktop builds running on Unix-based platforms via Mono.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PlatformInformation.IsUsingMonoRuntime">
            <summary>
            Are we running on .NET 5 or later using the Mono runtime?
            Will also return true when running on Mono itself; if necessary
            we can use IsRunningOnMono to distinguish.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.StreamExtensions.TryReadAll(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Attempts to read all of the requested bytes from the stream into the buffer
            </summary>
            <returns>
            The number of bytes read. Less than <paramref name="count" /> will
            only be returned if the end of stream is reached before all bytes can be read.
            </returns>
            <remarks>
            Unlike <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> it is not guaranteed that
            the stream position or the output buffer will be unchanged if an exception is
            returned.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads all bytes from the current position of the given stream to its end.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.StringTable">
            <summary>
            This is basically a lossy cache of strings that is searchable by
            strings, string sub ranges, character array ranges or string-builder.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.TextChangeRangeExtensions.Merge(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChangeRange},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChangeRange})">
             <summary>
             Merges the new change ranges into the old change ranges, adjusting the new ranges to be with respect to the original text
             (with neither old or new changes applied) instead of with respect to the original text after "old changes" are applied.
            
             This may require splitting, concatenation, etc. of individual change ranges.
             </summary>
             <remarks>
             Both `oldChanges` and `newChanges` must contain non-overlapping spans in ascending order.
             </remarks>
        </member>
        <member name="T:Roslyn.Utilities.TextChangeRangeExtensions.UnadjustedNewChange">
            <summary>
            Represents a new change being processed by <see cref="M:Roslyn.Utilities.TextChangeRangeExtensions.Merge(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChangeRange},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChangeRange})"/>.
            Such a new change must be adjusted before being added to the result list.
            </summary>
            <remarks>
            A value of this type may represent the intermediate state of merging of an old change into an unadjusted new change,
            resulting in a temporary unadjusted new change whose <see cref="P:Roslyn.Utilities.TextChangeRangeExtensions.UnadjustedNewChange.SpanStart"/> is negative (not valid) until it is adjusted.
            This tends to happen when we need to merge an old change deletion into a new change near the beginning of the text. (see TextChangeTests.Fuzz_4)
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.FileUtilities.ResolveRelativePath(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Resolves relative path and returns absolute path.
            The method depends only on values of its parameters and their implementation (for fileExists).
            It doesn't itself depend on the state of the current process (namely on the current drive directories) or 
            the state of file system.
            </summary>
            <param name="path">
            Path to resolve.
            </param>
            <param name="basePath">
            Base file path to resolve CWD-relative paths against. Null if not available.
            </param>
            <param name="baseDirectory">
            Base directory to resolve CWD-relative paths against if <paramref name="basePath"/> isn't specified. 
            Must be absolute path.
            Null if not available.
            </param>
            <param name="searchPaths">
            Sequence of paths used to search for unqualified relative paths.
            </param>
            <param name="fileExists">
            Method that tests existence of a file.
            </param>
            <returns>
            The resolved path or null if the path can't be resolved or does not exist.
            </returns>
        </member>
        <member name="M:Roslyn.Utilities.FileUtilities.NormalizeAbsolutePath(System.String)">
            <summary>
            Normalizes an absolute path.
            </summary>
            <param name="path">Path to normalize.</param>
            <exception cref="T:System.IO.IOException"/>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:Roslyn.Utilities.FileUtilities.CreateFileStreamChecked(System.Func{System.String,System.IO.Stream},System.String,System.String)">
            <summary>
            Used to create a file given a path specified by the user.
            paramName - Provided by the Public surface APIs to have a clearer message. Internal API just rethrow the exception
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.FileUtilities.GetFileTimeStamp(System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Roslyn.Utilities.FileUtilities.GetFileLength(System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsDirectorySeparator(System.Char)">
            <summary>
            True if the character is the platform directory separator character or the alternate directory separator.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsAnyDirectorySeparator(System.Char)">
            <summary>
            True if the character is any recognized directory separator character.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.TrimTrailingSeparators(System.String)">
            <summary>
            Removes trailing directory separator characters
            </summary>
            <remarks>
            This will trim the root directory separator:
            "C:\" maps to "C:", and "/" maps to ""
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.EnsureTrailingSeparator(System.String)">
            <summary>
            Ensures a trailing directory separator character
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.GetDirectoryName(System.String)">
            <summary>
            Get directory name from path.
            </summary>
            <remarks>
            Unlike <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/> it doesn't check for invalid path characters
            </remarks>
            <returns>Prefix of path that represents a directory</returns>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.GetPathRoot(System.String)">
            <summary>
            Gets the root part of the path.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.GetPathKind(System.String)">
            <summary>
            Gets the specific kind of relative or absolute path.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsAbsolute(System.String)">
            <summary>
            True if the path is an absolute path (rooted to drive or network share)
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsDriveRootedAbsolutePath(System.String)">
            <summary>
            Returns true if given path is absolute and starts with a drive specification ("C:\").
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.CombineAbsoluteAndRelativePaths(System.String,System.String)">
            <summary>
            Combines an absolute path with a relative.
            </summary>
            <param name="root">Absolute root path.</param>
            <param name="relativePath">Relative path.</param>
            <returns>
            An absolute combined path, or null if <paramref name="relativePath"/> is 
            absolute (e.g. "C:\abc", "\\machine\share\abc"), 
            relative to the current root (e.g. "\abc"), 
            or relative to a drive directory (e.g. "C:abc\def").
            </returns>
            <seealso cref="M:Roslyn.Utilities.PathUtilities.CombinePossiblyRelativeAndRelativePaths(System.String,System.String)"/>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.CombinePossiblyRelativeAndRelativePaths(System.String,System.String)">
            <summary>
            Combine two paths, the first of which may be absolute.
            </summary>
            <param name="root">First path: absolute, relative, or null.</param>
            <param name="relativePath">Second path: relative and non-null.</param>
            <returns>null, if <paramref name="root"/> is null; a combined path, otherwise.</returns>
            <seealso cref="M:Roslyn.Utilities.PathUtilities.CombineAbsoluteAndRelativePaths(System.String,System.String)"/>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.CombinePaths(System.String,System.String)">
            <summary>
            Combines paths with the same semantics as <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>
            but does not throw on null paths or paths with invalid characters.
            </summary>
            <param name="root">First path: absolute, relative, or null.</param>
            <param name="path">Second path: absolute, relative, or null.</param>
            <returns>
            The combined paths. If <paramref name="path"/> contains an absolute path, returns <paramref name="path"/>.
            </returns>
            <remarks>
            Relative and absolute paths treated the same as <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsFilePath(System.String)">
            <summary>
            Determines whether an assembly reference is considered an assembly file path or an assembly name.
            used, for example, on values of /r and #r.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.ContainsPathComponent(System.String,System.String,System.Boolean)">
            <summary>
            Determines if "path" contains 'component' within itself.
            i.e. asking if the path "c:\goo\bar\baz" has component "bar" would return 'true'.
            On the other hand, if you had "c:\goo\bar1\baz" then it would not have "bar" as a
            component.
            
            A path contains a component if any file name or directory name in the path
            matches 'component'.  As such, if you had something like "\\goo" then that would
            not have "goo" as a component. That's because here "goo" is the server name portion
            of the UNC path, and not an actual directory or file name.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.GetRelativePath(System.String,System.String)">
            <summary>
            Gets a path relative to a directory.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsChildPath(System.String,System.String)">
            <summary>
            True if the child path is a child of the parent path.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.PathsEqual(System.String,System.String)">
            <summary>
            True if the two paths are the same.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.PathsEqual(System.String,System.String,System.Int32)">
            <summary>
            True if the two paths are the same.  (but only up to the specified length)
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.IsValidFilePath(System.String)">
            <summary>
            Unfortunately, we cannot depend on Path.GetInvalidPathChars() or Path.GetInvalidFileNameChars()
            From MSDN: The array returned from this method is not guaranteed to contain the complete set of characters
            that are invalid in file and directory names. The full set of invalid characters can vary by file system.
            https://msdn.microsoft.com/en-us/library/system.io.path.getinvalidfilenamechars.aspx
            
            Additionally, Path.GetInvalidPathChars() doesn't include "?" or "*" which are invalid characters,
            and Path.GetInvalidFileNameChars() includes ":" and "\" which are valid characters.
            
            The more accurate way is to let the framework parse the path and throw on any errors.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.NormalizeWithForwardSlash(System.String)">
            <summary>
            If the current environment uses the '\' directory separator, replaces all uses of '\'
            in the given string with '/'. Otherwise, returns the string.
            </summary>
            <remarks>
            This method is equivalent to Microsoft.CodeAnalysis.BuildTasks.GenerateMSBuildEditorConfig.NormalizeWithForwardSlash
            Both methods should be kept in sync.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.PathUtilities.ExpandAbsolutePathWithRelativeParts(System.String)">
            <summary>
            Takes an absolute path and attempts to expand any '..' or '.' into their equivalent representation.
            </summary>
            <returns>An equivalent path that does not contain any '..' or '.' path parts, or the original path.</returns>
            <remarks>
            This method handles unix and windows drive rooted absolute paths only (i.e /a/b or x:\a\b). Passing any other kind of path
            including relative, drive relative, unc, or windows device paths will simply return the original input. 
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.ReflectionUtilities.GetTypeFromEither(System.String,System.String)">
            <summary>
            Find a <see cref="T:System.Type"/> instance by first probing the contract name and then the name as it
            would exist in mscorlib.  This helps satisfy both the CoreCLR and Desktop scenarios. 
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.UnicodeCharacterUtilities">
            <summary>
            Defines a set of helper methods to classify Unicode characters.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.UnicodeCharacterUtilities.IsIdentifierPartCharacter(System.Char)">
            <summary>
            Returns true if the Unicode character can be a part of an identifier.
            </summary>
            <param name="ch">The Unicode character.</param>
        </member>
        <member name="M:Roslyn.Utilities.UnicodeCharacterUtilities.IsValidIdentifier(System.String)">
            <summary>
            Check that the name is a valid Unicode identifier.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.UnicodeCharacterUtilities.IsFormattingChar(System.Char)">
            <summary>
            Returns true if the Unicode character is a formatting character (Unicode class Cf).
            </summary>
            <param name="ch">The Unicode character.</param>
        </member>
        <member name="M:Roslyn.Utilities.UnicodeCharacterUtilities.IsFormattingChar(System.Globalization.UnicodeCategory)">
            <summary>
            Returns true if the Unicode character is a formatting character (Unicode class Cf).
            </summary>
            <param name="cat">The Unicode character.</param>
        </member>
        <member name="T:Roslyn.Utilities.AnnotationTable`1">
            <summary>
            An AnnotationTable helps you attach your own annotation types/instances to syntax.  
            
            It maintains a map between your instances and actual SyntaxAnnotation's used to annotate the nodes
            and offers an API that matches the true annotation API on SyntaxNode.
            
            The table controls the lifetime of when you can find and retrieve your annotations. You won't be able to 
            find your annotations via HasAnnotations/GetAnnotations unless you use the same annotation table for these operations
            that you used for the WithAdditionalAnnotations operation.  
            
            Your custom annotations are not serialized with the syntax tree, so they won't move across boundaries unless the 
            same AnnotationTable is available on both ends.
            
            also, note that this table is not thread safe.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.AsyncLazy`1">
            <summary>
            Represents a value that can be retrieved synchronously or asynchronously by many clients.
            The value will be computed on-demand the moment the first client asks for it. While being
            computed, more clients can request the value. As long as there are outstanding clients the
            underlying computation will proceed.  If all outstanding clients cancel their request then
            the underlying value computation will be cancelled as well.
            
            Creators of an <see cref="T:Roslyn.Utilities.AsyncLazy`1" /> can specify whether the result of the computation is
            cached for future requests or not. Choosing to not cache means the computation functions are kept
            alive, whereas caching means the value (but not functions) are kept alive once complete.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._asynchronousComputeFunction">
            <summary>
            The underlying function that starts an asynchronous computation of the resulting value.
            Null'ed out once we've computed the result and we've been asked to cache it.  Otherwise,
            it is kept around in case the value needs to be computed again.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._synchronousComputeFunction">
            <summary>
            The underlying function that starts a synchronous computation of the resulting value.
            Null'ed out once we've computed the result and we've been asked to cache it, or if we
            didn't get any synchronous function given to us in the first place.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._cacheResult">
            <summary>
            Whether or not we should keep the value around once we've computed it.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._cachedResult">
            <summary>
            The Task that holds the cached result.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1.s_gate">
            <summary>
            Mutex used to protect reading and writing to all mutable objects and fields.  Traces
            indicate that there's negligible contention on this lock, hence we can save some memory
            by using a single lock for all AsyncLazy instances.  Only trivial and non-reentrant work
            should be done while holding the lock.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._requests">
            <summary>
            The hash set of all currently outstanding asynchronous requests. Null if there are no requests,
            and will never be empty.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._asynchronousComputationCancellationSource">
            <summary>
            If an asynchronous request is active, the CancellationTokenSource that allows for
            cancelling the underlying computation.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1._computationActive">
            <summary>
            Whether a computation is active or queued on any thread, whether synchronous or
            asynchronous.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.AsyncLazy`1.#ctor(`0)">
            <summary>
            Creates an AsyncLazy that always returns the value, analogous to <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.AsyncLazy`1.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Func{System.Threading.CancellationToken,`0},System.Boolean)">
            <summary>
            Creates an AsyncLazy that supports both asynchronous computation and inline synchronous
            computation.
            </summary>
            <param name="asynchronousComputeFunction">A function called to start the asynchronous
            computation. This function should be cheap and non-blocking.</param>
            <param name="synchronousComputeFunction">A function to do the work synchronously, which
            is allowed to block. This function should not be implemented by a simple Wait on the
            asynchronous value. If that's all you are doing, just don't pass a synchronous function
            in the first place.</param>
            <param name="cacheResult">Whether the result should be cached once the computation is
            complete.</param>
        </member>
        <member name="M:Roslyn.Utilities.AsyncLazy`1.TakeLock(System.Threading.CancellationToken)">
            <summary>
            Takes the lock for this object and if acquired validates the invariants of this class.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.AsyncLazy`1.Request">
            <remarks>
            This inherits from <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to avoid allocating two objects when we can just use one.
            The public surface area of <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> should probably be avoided in favor of the public
            methods on this class for correct behavior.
            </remarks>
        </member>
        <member name="F:Roslyn.Utilities.AsyncLazy`1.Request._cancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> associated with this request. This field will be initialized before
            any cancellation is observed from the token.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.BKTree">
             <summary>
             NOTE: Only use if you truly need a BK-tree.  If you just want to compare words, use
             the 'SpellChecker' type instead.
            
             An implementation of a Burkhard-Keller tree.  Introduced in:
             
             'Some approaches to best-match file searching.'
             Communications of the ACM CACM
             Volume 16 Issue 4, April 1973 
             Pages 230-236 
             http://dl.acm.org/citation.cfm?doid=362003.362025
             </summary>
        </member>
        <member name="F:Roslyn.Utilities.BKTree.Edge.ChildNodeIndex">
            <summary>Where the child node can be found in <see cref="F:Roslyn.Utilities.BKTree._nodes"/>.</summary>
        </member>
        <member name="F:Roslyn.Utilities.BKTree.Node.WordSpan">
            <summary>
            The string this node corresponds to.  Specifically, this span is the range of
            <see cref="F:Roslyn.Utilities.BKTree._concatenatedLowerCaseWords"/> for that string.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.BKTree.Node.EdgeCount">
            <summary>How many child edges this node has.</summary>
        </member>
        <member name="F:Roslyn.Utilities.BKTree.Node.FirstEdgeIndex">
            <summary>Where the first edge can be found in <see cref="F:Roslyn.Utilities.BKTree._edges"/>.  The edges 
            are in the range _edges[FirstEdgeIndex, FirstEdgeIndex + EdgeCount)
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfNull``1(``0,System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is null.  This method executes in
            all builds
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfNull``1(System.Nullable{``0},System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is null.  This method executes in
            all builds
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfNull``1(``0,System.String,System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is null.  This method executes in
            all builds
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfFalse(System.Boolean,System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is false.  This method executes
            in all builds
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfFalse(System.Boolean,System.String,System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is false.  This method executes
            in all builds
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfTrue(System.Boolean,System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is true. This method executes in
            all builds.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.Contract.ThrowIfTrue(System.Boolean,System.String,System.Int32)">
            <summary>
            Throws a non-accessible exception if the provided value is true. This method executes in
            all builds.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.EditDistance">
            <summary>
             NOTE: Only use if you truly need an edit distance.  If you just want to compare words, use
             the 'SpellChecker' type instead.
            
             Implementation of the Damerau-Levenshtein edit distance algorithm from:
             An Extension of the String-to-String Correction Problem:
             Published in Journal of the ACM (JACM)
             Volume 22 Issue 2, April 1975.
            
             Important, unlike many edit distance algorithms out there, this one implements a true metric
             that satisfies the triangle inequality.  (Unlike the "Optimal String Alignment" or "Restricted
             string edit distance" solutions which do not).  This means this edit distance can be used in
             other domains that require the triangle inequality (like BKTrees).
            
             Specifically, this implementation satisfies the following inequality: D(x, y) + D(y, z) >= D(x, z)
             (where D is the edit distance).
            </summary> 
        </member>
        <member name="M:Roslyn.Utilities.IDictionaryExtensions.MultiRemoveSet``3(System.Collections.Generic.IDictionary{``0,``2},``0,``1)">
            <summary>
            Private implementation we can delegate to for sets.
            This must be a different name as overloads are not resolved based on constraints
            and would conflict with <see cref="M:Roslyn.Utilities.IDictionaryExtensions.MultiRemove``3(System.Collections.Generic.IDictionary{``0,``2},``0,``1)"/>
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.IReferenceCountedDisposable`1">
            <summary>
            A covariant interface form of <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> that lets you re-cast an <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/>
            to a more base type. This can include types that do not implement <see cref="T:System.IDisposable"/> if you want to prevent a caller from accidentally
            disposing <see cref="P:Roslyn.Utilities.IReferenceCountedDisposable`1.Target"/> directly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Roslyn.Utilities.IReferenceCountedDisposable`1.Target">
            <summary>
            Gets the target object.
            </summary>
            <remarks>
            <para>This call is not valid after <see cref="M:System.IDisposable.Dispose"/> is called. If this property or the target
            object is used concurrently with a call to <see cref="M:System.IDisposable.Dispose"/>, it is possible for the code to be
            using a disposed object. After the current instance is disposed, this property throws
            <see cref="T:System.ObjectDisposedException"/>. However, the exact time when this property starts throwing after
            <see cref="M:System.IDisposable.Dispose"/> is called is unspecified; code is expected to not use this property or the object
            it returns after any code invokes <see cref="M:System.IDisposable.Dispose"/>.</para>
            </remarks>
            <value>The target object.</value>
        </member>
        <member name="M:Roslyn.Utilities.IReferenceCountedDisposable`1.TryAddReference">
            <summary>
            Increments the reference count for the disposable object, and returns a new disposable reference to it.
            </summary>
            <remarks>
            <para>The returned object is an independent reference to the same underlying object. Disposing of the
            returned value multiple times will only cause the reference count to be decreased once.</para>
            </remarks>
            <returns>A new <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> pointing to the same underlying object, if it
            has not yet been disposed; otherwise, <see langword="null"/> if this reference to the underlying object
            has already been disposed.</returns>
        </member>
        <member name="M:Roslyn.Utilities.LazyInitialization.EnsureInitialized``1(``0@,System.Func{``0})">
            <summary>
            Ensure that the given target value is initialized (not null) in a thread-safe manner.
            </summary>
            <typeparam name="T">The type of the target value. Must be a reference type.</typeparam>
            <param name="target">The target to initialize.</param>
            <param name="valueFactory">A factory delegate to create a new instance of the target value. Note that this delegate may be called
            more than once by multiple threads, but only one of those values will successfully be written to the target.</param>
            <returns>The target value.</returns>
        </member>
        <member name="M:Roslyn.Utilities.LazyInitialization.EnsureInitialized``2(``0@,System.Func{``1,``0},``1)">
            <summary>
            Ensure that the given target value is initialized (not null) in a thread-safe manner.
            </summary>
            <typeparam name="T">The type of the target value. Must be a reference type.</typeparam>
            <param name="target">The target to initialize.</param>
            <typeparam name="U">The type of the <paramref name="state"/> argument passed to the value factory.</typeparam>
            <param name="valueFactory">A factory delegate to create a new instance of the target value. Note that this delegate may be called
            more than once by multiple threads, but only one of those values will successfully be written to the target.</param>
            <param name="state">An argument passed to the value factory.</param>
            <returns>The target value.</returns>
        </member>
        <member name="M:Roslyn.Utilities.LazyInitialization.EnsureInitialized``1(System.Runtime.CompilerServices.StrongBox{``0}@,System.Func{``0})">
            <summary>
            Ensure that the given target value is initialized in a thread-safe manner. This overload supports the
            initialization of value types, and reference type fields where <see langword="null"/> is considered an
            initialized value.
            </summary>
            <typeparam name="T">The type of the target value.</typeparam>
            <param name="target">A target value box to initialize.</param>
            <param name="valueFactory">A factory delegate to create a new instance of the target value. Note that this delegate may be called
            more than once by multiple threads, but only one of those values will successfully be written to the target.</param>
            <returns>The target value.</returns>
        </member>
        <member name="M:Roslyn.Utilities.LazyInitialization.EnsureInitialized``2(System.Runtime.CompilerServices.StrongBox{``0}@,System.Func{``1,``0},``1)">
            <summary>
            Ensure that the given target value is initialized in a thread-safe manner. This overload supports the
            initialization of value types, and reference type fields where <see langword="null"/> is considered an
            initialized value.
            </summary>
            <typeparam name="T">The type of the target value.</typeparam>
            <param name="target">A target value box to initialize.</param>
            <typeparam name="U">The type of the <paramref name="state"/> argument passed to the value factory.</typeparam>
            <param name="valueFactory">A factory delegate to create a new instance of the target value. Note that this delegate may be called
            more than once by multiple threads, but only one of those values will successfully be written to the target.</param>
            <param name="state">An argument passed to the value factory.</param>
            <returns>The target value.</returns>
        </member>
        <member name="T:Roslyn.Utilities.NonReentrantLock">
            <summary>
            A lightweight mutual exclusion object which supports waiting with cancellation and prevents
            recursion (i.e. you may not call Wait if you already hold the lock)
            </summary>
            <remarks>
            <para>
            The <see cref="T:Roslyn.Utilities.NonReentrantLock"/> provides a lightweight mutual exclusion class that doesn't
            use Windows kernel synchronization primitives.
            </para>
            <para>
            The implementation is distilled from the workings of <see cref="T:System.Threading.SemaphoreSlim"/>
            The basic idea is that we use a regular sync object (Monitor.Enter/Exit) to guard the setting
            of an 'owning thread' field. If, during the Wait, we find the lock is held by someone else
            then we register a cancellation callback and enter a "Monitor.Wait" loop. If the cancellation
            callback fires, then it "pulses" all the waiters to wake them up and check for cancellation.
            Waiters are also "pulsed" when leaving the lock.
            </para>
            <para>
            All public members of <see cref="T:Roslyn.Utilities.NonReentrantLock"/> are thread-safe and may be used concurrently
            from multiple threads.
            </para>
            </remarks>
        </member>
        <member name="F:Roslyn.Utilities.NonReentrantLock._syncLock">
            <summary>
            A synchronization object to protect access to the <see cref="F:Roslyn.Utilities.NonReentrantLock._owningThreadId"/> field and to be pulsed
            when <see cref="M:Roslyn.Utilities.NonReentrantLock.Release"/> is called and during cancellation.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.NonReentrantLock._owningThreadId">
            <summary>
            The <see cref="P:System.Environment.CurrentManagedThreadId" /> of the thread that holds the lock. Zero if no thread is holding
            the lock.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="useThisInstanceForSynchronization">If false (the default), then the class
            allocates an internal object to be used as a sync lock.
            If true, then the sync lock object will be the NonReentrantLock instance itself. This
            saves an allocation but a client may not safely further use this instance in a call to
            Monitor.Enter/Exit or in a "lock" statement.
            </param>
        </member>
        <member name="F:Roslyn.Utilities.NonReentrantLock.Factory">
            <summary>
            Shared factory for use in lazy initialization.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.Wait(System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Roslyn.Utilities.NonReentrantLock"/>, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <remarks>
            Recursive locking is not supported. i.e. A thread may not call Wait successfully twice without an
            intervening <see cref="M:Roslyn.Utilities.NonReentrantLock.Release"/>.
            </remarks>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> token to
            observe.</param>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> was
            canceled.</exception>
            <exception cref="T:System.Threading.LockRecursionException">The caller already holds the lock</exception>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.Release">
            <summary>
            Exit the mutual exclusion.
            </summary>
            <remarks>
            The calling thread must currently hold the lock.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The lock is not currently held by the calling thread.</exception>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.LockHeldByMe">
            <summary>
            Determine if the lock is currently held by the calling thread.
            </summary>
            <returns>True if the lock is currently held by the calling thread.</returns>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.AssertHasLock">
            <summary>
            Throw an exception if the lock is not held by the calling thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">The lock is not currently held by the calling thread.</exception>
        </member>
        <member name="P:Roslyn.Utilities.NonReentrantLock.IsLocked">
            <summary>
            Checks if the lock is currently held.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.NonReentrantLock.IsOwnedByMe">
            <summary>
            Checks if the lock is currently held by the calling thread.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.TakeOwnership">
            <summary>
            Take ownership of the lock (by the calling thread). The lock may not already
            be held by any other code.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.ReleaseOwnership">
            <summary>
            Release ownership of the lock. The lock must already be held by the calling thread.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.NonReentrantLock.s_cancellationTokenCanceledEventHandler">
            <summary>
            Action object passed to a cancellation token registration.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.NonReentrantLock.CancellationTokenCanceledEventHandler(System.Object)">
            <summary>
            Callback executed when a cancellation token is canceled during a Wait.
            </summary>
            <param name="obj">The syncLock that protects a <see cref="T:Roslyn.Utilities.NonReentrantLock"/> instance.</param>
        </member>
        <member name="T:Roslyn.Utilities.NonReentrantLock.SemaphoreDisposer">
            <summary>
            Since we want to avoid boxing the return from <see cref="M:Roslyn.Utilities.NonReentrantLock.DisposableWait(System.Threading.CancellationToken)"/>, this type must be public.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ImmutableHashMapExtensions.GetOrAdd``3(Roslyn.Collections.Immutable.ImmutableHashMap{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Obtains the value for the specified key from a dictionary, or adds a new value to the dictionary where the key did not previously exist.
            </summary>
            <typeparam name="TKey">The type of key stored by the dictionary.</typeparam>
            <typeparam name="TValue">The type of value stored by the dictionary.</typeparam>
            <typeparam name="TArg">The type of argument supplied to the value factory.</typeparam>
            <param name="location">The variable or field to atomically update if the specified <paramref name="key" /> is not in the dictionary.</param>
            <param name="key">The key for the value to retrieve or add.</param>
            <param name="valueProvider">The function to execute to obtain the value to insert into the dictionary if the key is not found. Returns null if the value can't be obtained.</param>
            <param name="factoryArgument">The argument to pass to the value factory.</param>
            <returns>The value obtained from the dictionary or <paramref name="valueProvider" /> if it was not present.</returns>
        </member>
        <member name="T:Roslyn.Utilities.ReferenceCountedDisposable`1">
             <summary>
             A reference-counting wrapper which allows multiple uses of a single disposable object in code, which is
             deterministically released (by calling <see cref="M:System.IDisposable.Dispose"/>) when the last reference is
             disposed.
             </summary>
             <remarks>
             <para>Each instance of <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> represents a counted reference (also
             referred to as a <em>reference</em> in the following documentation) to a target object. Each of these
             references has a lifetime, starting when it is constructed and continuing through its release. During
             this time, the reference is considered <em>alive</em>. Each reference which is alive owns exactly one
             reference to the target object, ensuring that it will not be disposed while still in use. A reference is
             released through either of the following actions:</para>
            
             <list type="bullet">
             <item>The reference is explicitly released by a call to <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/>.</item>
             <item>The reference is no longer in use by managed code and gets reclaimed by the garbage collector.</item>
             </list>
            
             <para>While each instance of <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> should be explicitly disposed when
             the object is no longer needed by the code owning the reference, this implementation will not leak resources
             in the event one or more callers fail to do so. When all references to an object are explicitly released
             (i.e. by calling <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/>), the target object will itself be deterministically released by a
             call to <see cref="M:System.IDisposable.Dispose"/> when the last reference to it is released. However, in the event
             one or more references is not explicitly released, the underlying object will still become eligible for
             non-deterministic release (i.e. finalization) as soon as each reference to it is released by one of the
             two actions described previously.</para>
            
             <para>When using <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/>, certain steps must be taken to ensure the
             target object is not disposed early.</para>
            
             <list type="number">
             <para>Use <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> consistently. In other words, do not mix code using
             reference-counted wrappers with code that references to the target directly.</para>
             <para>Only use the <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.#ctor(`0)"/> constructor one time per target object.
             Additional references to the same target object must only be obtained by calling
             <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.TryAddReference"/>.</para>
             <para>Do not call <see cref="M:System.IDisposable.Dispose"/> on the target object directly. It will be called
             automatically at the appropriate time, as described above.</para>
             </list>
            
             <para>All public methods on this type adhere to their pre- and post-conditions and will not invalidate state
             even in concurrent execution.</para>
             </remarks>
             <typeparam name="T">The type of disposable object.</typeparam>
        </member>
        <member name="F:Roslyn.Utilities.ReferenceCountedDisposable`1._instance">
            <summary>
            The target of this reference. This value is initialized to a non-<see langword="null"/> value in the
            constructor, and set to <see langword="null"/> when the current reference is disposed.
            </summary>
            <remarks>
            <para>This value is only cleared in order to support cases where one or more references is garbage
            collected without having <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/> called.</para>
            </remarks>
        </member>
        <member name="F:Roslyn.Utilities.ReferenceCountedDisposable`1._boxedReferenceCount">
             <summary>
             The boxed reference count, which is shared by all references with the same <see cref="P:Roslyn.Utilities.ReferenceCountedDisposable`1.Target"/> object.
             </summary>
             <remarks>
             <para>This field serves as the synchronization object for the current type, since it is shared among all
             counted reference to the same target object. Accesses to <see cref="F:Roslyn.Utilities.ReferenceCountedDisposable`1.BoxedReferenceCount._referenceCount"/>
             should only occur when this object is locked.</para>
            
             <para>PERF DEV NOTE: A concurrent (but complex) implementation of this type with identical semantics is
             available in source control history. The use of exclusive locks was not causing any measurable
             performance overhead even on 28-thread machines at the time this was written.</para>
             </remarks>
        </member>
        <member name="M:Roslyn.Utilities.ReferenceCountedDisposable`1.#ctor(`0)">
            <summary>
            Initializes a new reference counting wrapper around an <see cref="T:System.IDisposable"/> object.
            </summary>
            <remarks>
            <para>The reference count is initialized to 1.</para>
            </remarks>
            <param name="instance">The object owned by this wrapper.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="instance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Roslyn.Utilities.ReferenceCountedDisposable`1.Target">
            <summary>
            Gets the target object.
            </summary>
            <remarks>
            <para>This call is not valid after <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/> is called. If this property or the target
            object is used concurrently with a call to <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/>, it is possible for the code to be
            using a disposed object. After the current instance is disposed, this property throws
            <see cref="T:System.ObjectDisposedException"/>. However, the exact time when this property starts throwing after
            <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/> is called is unspecified; code is expected to not use this property or the object
            it returns after any code invokes <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose"/>.</para>
            </remarks>
            <value>The target object.</value>
        </member>
        <member name="M:Roslyn.Utilities.ReferenceCountedDisposable`1.TryAddReference">
            <summary>
            Increments the reference count for the disposable object, and returns a new disposable reference to it.
            </summary>
            <remarks>
            <para>The returned object is an independent reference to the same underlying object. Disposing of the
            returned value multiple times will only cause the reference count to be decreased once.</para>
            </remarks>
            <returns>A new <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> pointing to the same underlying object, if it
            has not yet been disposed; otherwise, <see langword="null"/> if this reference to the underlying object
            has already been disposed.</returns>
        </member>
        <member name="M:Roslyn.Utilities.ReferenceCountedDisposable`1.TryAddReferenceImpl(`0,Roslyn.Utilities.ReferenceCountedDisposable{`0}.BoxedReferenceCount)">
            <summary>
            Provides the implementation for <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.TryAddReference"/> and
            <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.WeakReference.TryAddReference"/>.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.ReferenceCountedDisposable`1.Dispose">
            <summary>
            Releases the current reference, causing the underlying object to be disposed if this was the last
            reference.
            </summary>
            <remarks>
            <para>After this instance is disposed, the <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.TryAddReference"/> method can no longer be used to
            obtain a new reference to the target, even if other references to the target object are still in
            use.</para>
            </remarks>
        </member>
        <member name="T:Roslyn.Utilities.ReferenceCountedDisposable`1.WeakReference">
            <summary>
            Represents a weak reference to a <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> which is capable of
            obtaining a new counted reference up until the point when the object is no longer accessible.
            </summary>
            <remarks>
            This value type holds a single field, which is not subject to torn reads/writes.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.ReferenceCountedDisposable`1.WeakReference.TryAddReference">
             <summary>
             Increments the reference count for the disposable object, and returns a new disposable reference to
             it.
             </summary>
             <remarks>
             <para>Unlike <see cref="M:Roslyn.Utilities.ReferenceCountedDisposable`1.TryAddReference"/>, this method is capable of
             adding a reference to the underlying instance all the way up to the point where it is finally
             disposed.</para>
            
             <para>The returned object is an independent reference to the same underlying object. Disposing of
             the returned value multiple times will only cause the reference count to be decreased once.</para>
             </remarks>
             <returns>A new <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1"/> pointing to the same underlying object,
             if it has not yet been disposed; otherwise, <see langword="null"/> if the underlying object has
             already been disposed.</returns>
        </member>
        <member name="T:Roslyn.Utilities.ReferenceCountedDisposable`1.BoxedReferenceCount">
            <summary>
            Holds the reference count associated with a disposable object.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.ReferenceCountedDisposable`1.BoxedReferenceCount._weakInstance">
            <summary>
            Holds the weak reference used by instances of <see cref="T:Roslyn.Utilities.ReferenceCountedDisposable`1.WeakReference"/> to obtain a reference-counted
            reference to the original object. This field is initialized the first time a weak reference is obtained
            for the instance, and latches in a non-null state once initialized.
            </summary>
            <remarks>
            DO NOT DISPOSE OF THE TARGET.
            </remarks>
        </member>
        <member name="T:Roslyn.Utilities.ReferenceCountedDisposableCache`2">
            <summary>
            Implements a reference-counted cache, where key/value pairs are associated with a count. When the count of a pair goes to zero,
            the value is evicted. Values can also be explicitly evicted at any time. In that case, any new calls to <see cref="M:Roslyn.Utilities.ReferenceCountedDisposableCache`2.GetOrCreate``1(`0,System.Func{`0,``0,`1},``0)"/>
            will return a new value, and the existing holders of the evicted value will still dispose it once they're done with it.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.SemaphoreSlimFactory">
            <summary>
            Container for a <see cref="T:System.Threading.SemaphoreSlim"/> factory.
            </summary>
        </member>
        <member name="F:Roslyn.Utilities.SemaphoreSlimFactory.Instance">
            <summary>
            Factory object that may be used for lazy initialization. Creates AsyncSemaphore instances with an initial count of 1.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.SoftCrashException">
            <summary>
            TODO: remove this exception: https://github.com/dotnet/roslyn/issues/40476
            
            this represents soft crash request compared to hard crash which will bring down VS.
            
            by soft crash, it means everything same as hard crash except it should use NFW and info bar
            to inform users about unexpected condition instead of killing VS as traditional crash did.
            
            in other words, no one should ever try to recover from this exception. but they must try to not hard crash.
            
            this exception is based on cancellation exception since, in Roslyn code, cancellation exception is so far
            only safest exception to throw without worrying about crashing VS 99%. there is still 1% case it will bring
            down VS and those places should be guarded on this exception as we find such place.
            
            for now, this is an opt-in based. if a feature wants to move to soft crash (ex, OOP), one should catch
            exception and translate that to this exception and then add handler which report NFW and info bar in their
            code path and make sure it doesn't bring down VS.
            
            as we use soft-crash in more places, we should come up with more general framework.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.SpecializedTasks.TransformWithoutIntermediateCancellationExceptionAsync``3(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,``0,``2},``0,System.Threading.CancellationToken)">
             <summary>
             This helper method provides semantics equivalent to the following, but avoids throwing an intermediate
             <see cref="T:System.OperationCanceledException"/> in the case where the asynchronous operation is cancelled.
            
             <code><![CDATA[
             public ValueTask<TResult> MethodAsync(TArg arg, CancellationToken cancellationToken)
             {
               var intermediate = await func(arg, cancellationToken).ConfigureAwait(false);
               return transform(intermediate);
             }
             ]]></code>
             </summary>
             <remarks>
             This helper method is only intended for use in cases where profiling reveals substantial overhead related to
             cancellation processing.
             </remarks>
             <typeparam name="TArg">The type of a state variable to pass to <paramref name="func"/> and <paramref name="transform"/>.</typeparam>
             <typeparam name="TIntermediate">The type of intermediate result produced by <paramref name="func"/>.</typeparam>
             <typeparam name="TResult">The type of result produced by <paramref name="transform"/>.</typeparam>
             <param name="func">The intermediate asynchronous operation.</param>
             <param name="transform">The synchronous transformation to apply to the result of <paramref name="func"/>.</param>
             <param name="arg">The state to pass to <paramref name="func"/> and <paramref name="transform"/>.</param>
             <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that the operation will observe.</param>
             <returns></returns>
        </member>
        <member name="F:Roslyn.Utilities.WordSimilarityChecker._substringsAreSimilar">
            <summary>
            Whether or words should be considered similar if one is contained within the other
            (regardless of edit distance).  For example if is true then IService would be considered
            similar to IServiceFactory despite the edit distance being quite high at 7.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.WordSimilarityChecker.AreSimilar(System.String,System.String,System.Boolean,System.Double@)">
            <summary>
            Returns true if 'originalText' and 'candidateText' are likely a misspelling of each other.
            Returns false otherwise.  If it is a likely misspelling a similarityWeight is provided
            to help rank the match.  Lower costs mean it was a better match.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.SyntaxPath">
            <summary>
            Stores the "path" from the root of a tree to a node, allowing the node to be recovered in a
            later snapshot of the tree, under certain circumstances.
            
            The implementation stores the child indices to represent the path, so any edit which affects
            the child indices could render this object unable to recover its node.  NOTE: One thing C#
            IDE has done in the past to do a better job of this is to store the fully qualified name of
            the member to at least be able to descend into the same member.  We could apply the same sort
            of logic here.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.SyntaxPath.TryResolve(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNodeOrToken@)">
            <summary>
            Attempts to recover the node at this path in the provided tree.  If the node is found
            then 'true' is returned, otherwise the result is 'false' and 'node' will be null.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ConstantValueSource`1">
            <summary>
            This value source keeps a strong reference to a value.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ValueSource`1">
            <summary>
            A class that abstracts the accessing of a value that is guaranteed to be available at some point.
            </summary>
        </member>
        <member name="M:Roslyn.Utilities.WeakEventHandler`1.Create``1(``0,System.Action{``0,System.Object,`0})">
            <summary>
            Creates an event handler that holds onto the target weakly.
            </summary>
            <param name="target">The target that is held weakly, and passed as an argument to the invoker.</param>
            <param name="invoker">An action that will receive the event arguments as well as the target instance. 
            The invoker itself must not capture any state.</param>
        </member>
        <member name="T:Roslyn.Utilities.PerformanceSensitiveAttribute">
            <summary>
            Indicates that a code element is performance sensitive under a known scenario.
            </summary>
            <remarks>
            <para>When applying this attribute, only explicitly set the values for properties specifically indicated by the
            test/measurement technique described in the associated <see cref="P:Roslyn.Utilities.PerformanceSensitiveAttribute.Uri"/>.</para>
            </remarks>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.Uri">
            <summary>
            Gets the location where the original problem is documented, likely with steps to reproduce the issue and/or
            validate performance related to a change in the method.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.Constraint">
            <summary>
            Gets or sets a description of the constraint imposed by the original performance issue.
            </summary>
            <remarks>
            <para>Constraints are normally specified by other specific properties that allow automated validation of the
            constraint. This property supports documenting constraints which cannot be described in terms of other
            constraint properties.</para>
            </remarks>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowCaptures">
            <summary>
            Gets or sets a value indicating whether captures are allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowImplicitBoxing">
            <summary>
            Gets or sets a value indicating whether implicit boxing of value types is allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowGenericEnumeration">
            <summary>
            Gets or sets a value indicating whether enumeration of a generic
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> is allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowLocks">
            <summary>
            Gets or sets a value indicating whether locks are allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.OftenCompletesSynchronously">
            <summary>
            Gets or sets a value indicating whether the asynchronous state machine typically completes synchronously.
            </summary>
            <remarks>
            <para>When <see langword="true"/>, validation of this performance constraint typically involves analyzing
            the method to ensure synchronous completion of the state machine does not require the allocation of a
            <see cref="T:System.Threading.Tasks.Task"/>, either through caching the result or by using
            <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</para>
            </remarks>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.IsParallelEntry">
            <summary>
            Gets or sets a value indicating whether this is an entry point to a parallel algorithm.
            </summary>
            <remarks>
            <para>Parallelization APIs and algorithms, e.g. <c>Parallel.ForEach</c>, may be efficient for parallel entry
            points (few direct calls but large amounts of iterative work), but are problematic when called inside the
            iterations themselves. Performance-sensitive code should avoid the use of heavy parallelization APIs except
            for known entry points to the parallel portion of code.</para>
            </remarks>
        </member>
        <member name="T:Roslyn.Collections.Immutable.ImmutableHashMap`2">
            <summary>
            An immutable unordered hash map implementation.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Roslyn.Collections.Immutable.ImmutableHashMap`2._root">
            <summary>
            The root node of the tree that stores this map.
            </summary>
        </member>
        <member name="F:Roslyn.Collections.Immutable.ImmutableHashMap`2._keyComparer">
            <summary>
            The comparer used to sort keys in this map.
            </summary>
        </member>
        <member name="F:Roslyn.Collections.Immutable.ImmutableHashMap`2._valueComparer">
            <summary>
            The comparer used to detect equivalent values in this map.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.#ctor(Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1}.Bucket,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2"/> class.
            </summary>
            <param name="root">The root.</param>
            <param name="comparer">The comparer.</param>
            <param name="valueComparer">The value comparer.</param>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="valueComparer">The value comparer.</param>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.Empty">
            <summary>
            Gets an empty map with default equality comparers.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.Clear">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.Add(`0,`1)">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.SetItem(`0,`1)">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Applies a given set of key=value pairs to an immutable dictionary, replacing any conflicting keys in the resulting dictionary.
            </summary>
            <param name="items">The key=value pairs to set on the map.  Any keys that conflict with existing keys will overwrite the previous values.</param>
            <returns>An immutable dictionary.</returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.Remove(`0)">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Returns a hash map that uses the specified key and value comparers and has the same contents as this map.
            </summary>
            <param name="keyComparer">The key comparer.  A value of <c>null</c> results in using the default equality comparer for the type.</param>
            <param name="valueComparer">The value comparer.  A value of <c>null</c> results in using the default equality comparer for the type.</param>
            <returns>The hash map with the new comparers.</returns>
            <remarks>
            In the event that a change in the key equality comparer results in a key collision, an exception is thrown.
            </remarks>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns a hash map that uses the specified key comparer and current value comparer and has the same contents as this map.
            </summary>
            <param name="keyComparer">The key comparer.  A value of <c>null</c> results in using the default equality comparer for the type.</param>
            <returns>The hash map with the new comparers.</returns>
            <remarks>
            In the event that a change in the key equality comparer results in a key collision, an exception is thrown.
            </remarks>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.ContainsValue(`1)">
            <summary>
            Determines whether the ImmutableSortedMap&lt;TKey,TValue&gt;
            contains an element with the specified value.
            </summary>
            <param name="value">
            The value to locate in the ImmutableSortedMap&lt;TKey,TValue&gt;.
            The value can be null for reference types.
            </param>
            <returns>
            true if the ImmutableSortedMap&lt;TKey,TValue&gt; contains
            an element with the specified value; otherwise, false.
            </returns>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.Count">
            <summary>
            Gets the number of elements in this collection.
            </summary>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.Keys">
            <summary>
            Gets the keys in the map.
            </summary>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.Values">
            <summary>
            Gets the values in the map.
            </summary>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.Item(`0)">
            <summary>
            Gets the <typeparamref name="TValue"/> with the specified key.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this map contains the specified key-value pair.
            </summary>
            <param name="keyValuePair">The key value pair.</param>
            <returns>
              <c>true</c> if this map contains the key-value pair; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.TryGetKey(`0,`0@)">
            <summary>
            See the <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> interface.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.TryExchangeKey(`0,`0@)">
            <summary>
            Exchanges a key for the actual key instance found in this map.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="existingKey">Receives the equal key found in the map.</param>
            <returns>A value indicating whether an equal and existing key was found in the map.</returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.TryCastToImmutableMap(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1}@)">
            <summary>
            Attempts to discover an <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2"/> instance beneath some enumerable sequence
            if one exists.
            </summary>
            <param name="sequence">The sequence that may have come from an immutable map.</param>
            <param name="other">Receives the concrete <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2"/> typed value if one can be found.</param>
            <returns><c>true</c> if the cast was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            Bulk adds entries to the map.
            </summary>
            <param name="pairs">The entries to add.</param>
            <param name="overwriteOnCollision"><c>true</c> to allow the <paramref name="pairs"/> sequence to include duplicate keys and let the last one win; <c>false</c> to throw on collisions.</param>
            <param name="avoidToHashMap"><c>true</c> when being called from ToHashMap to avoid StackOverflow.</param>
        </member>
        <member name="F:Roslyn.Collections.Immutable.ImmutableHashMap`2.ValueOrListBucket.Hash">
            <summary>
            The hash for this bucket.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.ValueOrListBucket.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.ValueOrListBucket"/> class.
            </summary>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.ValueBucket.#ctor(`0,`1,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.ValueBucket"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="hashcode">The hashcode.</param>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.ListBucket.#ctor(Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1}.ValueBucket[])">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.ListBucket"/> class.
            </summary>
            <param name="buckets">The buckets.</param>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.HashBucket.#ctor(System.Int32,System.UInt32,Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1}.Bucket[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.HashBucket"/> class.
            </summary>
            <param name="hashRoll">The hash roll.</param>
            <param name="used">The used.</param>
            <param name="buckets">The buckets.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.HashBucket.#ctor(System.Int32,Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1}.ValueOrListBucket,Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1}.ValueOrListBucket)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.HashBucket"/> class.
            </summary>
            <param name="suggestedHashRoll">The suggested hash roll.</param>
            <param name="bucket1">The bucket1.</param>
            <param name="bucket2">The bucket2.</param>
        </member>
        <member name="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.DebuggerProxy">
            <summary>
            A simple view of the immutable collection that the debugger can show to the developer.
            </summary>
        </member>
        <member name="F:Roslyn.Collections.Immutable.ImmutableHashMap`2.DebuggerProxy._map">
            <summary>
            The collection to be enumerated.
            </summary>
        </member>
        <member name="F:Roslyn.Collections.Immutable.ImmutableHashMap`2.DebuggerProxy._contents">
            <summary>
            The simple view of the collection.
            </summary>
        </member>
        <member name="M:Roslyn.Collections.Immutable.ImmutableHashMap`2.DebuggerProxy.#ctor(Roslyn.Collections.Immutable.ImmutableHashMap{`0,`1})">
            <summary>   
            Initializes a new instance of the <see cref="T:Roslyn.Collections.Immutable.ImmutableHashMap`2.DebuggerProxy"/> class.
            </summary>
            <param name="map">The collection to display in the debugger</param>
        </member>
        <member name="P:Roslyn.Collections.Immutable.ImmutableHashMap`2.DebuggerProxy.Contents">
            <summary>
            Gets a simple debugger-viewable collection.
            </summary>
        </member>
        <member name="T:System.Linq.EnumerableExtensions">
            <summary>
            Declare the following extension methods in System.Linq namespace to avoid accidental boxing of ImmutableArray{T} that implements IEnumerable{T}.
            The boxing would occur if the methods were defined in Roslyn.Utilities and the file calling these methods has <c>using Roslyn.Utilities</c>
            but not <c>using System.Linq</c>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
